// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package iuct_service

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"test/gothrift/com_types"
	"test/gothrift/iuct_types"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = com_types.GoUnusedProtection__
var _ = iuct_types.GoUnusedProtection__

type EUserCenterOption int64

const (
	EUserCenterOption_E_ADD_PROGRAM_PRAISE         EUserCenterOption = 1
	EUserCenterOption_E_DEL_PROGRAM_PRAISE         EUserCenterOption = 2
	EUserCenterOption_E_ADD_USER_SCORE             EUserCenterOption = 11
	EUserCenterOption_E_ADD_USER_SUBSCRIBE         EUserCenterOption = 21
	EUserCenterOption_E_DEL_USER_SUBSCRIBE         EUserCenterOption = 22
	EUserCenterOption_E_ADD_USER_SETTING           EUserCenterOption = 31
	EUserCenterOption_E_GET_USER_SETTING           EUserCenterOption = 32
	EUserCenterOption_E_CHECK_USER_SETTING_PROFILE EUserCenterOption = 33
	EUserCenterOption_E_ADD_USER_RESOURCE          EUserCenterOption = 41
	EUserCenterOption_E_GET_USER_RESOURCE          EUserCenterOption = 42
	EUserCenterOption_E_GET_RESOURCE               EUserCenterOption = 43
	EUserCenterOption_E_ADD_USER_PROFILE           EUserCenterOption = 51
	EUserCenterOption_E_ADD_USER_LOCK              EUserCenterOption = 61
	EUserCenterOption_E_DEL_USER_LOCK              EUserCenterOption = 62
	EUserCenterOption_E_GET_USER_LOCK              EUserCenterOption = 63
	EUserCenterOption_E_DEL_COMMENT                EUserCenterOption = 71
	EUserCenterOption_E_ADD_COMMENT_PRAISE         EUserCenterOption = 81
	EUserCenterOption_E_DEL_COMMENT_PRAISE         EUserCenterOption = 82
	EUserCenterOption_E_GET_COMMENT_PRAISE         EUserCenterOption = 83
	EUserCenterOption_E_DEL_USER_ALL_SHARES        EUserCenterOption = 91
	EUserCenterOption_E_ADD_SEARCH_HISTORY         EUserCenterOption = 101
	EUserCenterOption_E_DEL_SEARCH_HISTORY         EUserCenterOption = 102
	EUserCenterOption_E_ADD_VOTE                   EUserCenterOption = 111
)

func (p EUserCenterOption) String() string {
	switch p {
	case EUserCenterOption_E_ADD_PROGRAM_PRAISE:
		return "E_ADD_PROGRAM_PRAISE"
	case EUserCenterOption_E_DEL_PROGRAM_PRAISE:
		return "E_DEL_PROGRAM_PRAISE"
	case EUserCenterOption_E_ADD_USER_SCORE:
		return "E_ADD_USER_SCORE"
	case EUserCenterOption_E_ADD_USER_SUBSCRIBE:
		return "E_ADD_USER_SUBSCRIBE"
	case EUserCenterOption_E_DEL_USER_SUBSCRIBE:
		return "E_DEL_USER_SUBSCRIBE"
	case EUserCenterOption_E_ADD_USER_SETTING:
		return "E_ADD_USER_SETTING"
	case EUserCenterOption_E_GET_USER_SETTING:
		return "E_GET_USER_SETTING"
	case EUserCenterOption_E_CHECK_USER_SETTING_PROFILE:
		return "E_CHECK_USER_SETTING_PROFILE"
	case EUserCenterOption_E_ADD_USER_RESOURCE:
		return "E_ADD_USER_RESOURCE"
	case EUserCenterOption_E_GET_USER_RESOURCE:
		return "E_GET_USER_RESOURCE"
	case EUserCenterOption_E_GET_RESOURCE:
		return "E_GET_RESOURCE"
	case EUserCenterOption_E_ADD_USER_PROFILE:
		return "E_ADD_USER_PROFILE"
	case EUserCenterOption_E_ADD_USER_LOCK:
		return "E_ADD_USER_LOCK"
	case EUserCenterOption_E_DEL_USER_LOCK:
		return "E_DEL_USER_LOCK"
	case EUserCenterOption_E_GET_USER_LOCK:
		return "E_GET_USER_LOCK"
	case EUserCenterOption_E_DEL_COMMENT:
		return "E_DEL_COMMENT"
	case EUserCenterOption_E_ADD_COMMENT_PRAISE:
		return "E_ADD_COMMENT_PRAISE"
	case EUserCenterOption_E_DEL_COMMENT_PRAISE:
		return "E_DEL_COMMENT_PRAISE"
	case EUserCenterOption_E_GET_COMMENT_PRAISE:
		return "E_GET_COMMENT_PRAISE"
	case EUserCenterOption_E_DEL_USER_ALL_SHARES:
		return "E_DEL_USER_ALL_SHARES"
	case EUserCenterOption_E_ADD_SEARCH_HISTORY:
		return "E_ADD_SEARCH_HISTORY"
	case EUserCenterOption_E_DEL_SEARCH_HISTORY:
		return "E_DEL_SEARCH_HISTORY"
	case EUserCenterOption_E_ADD_VOTE:
		return "E_ADD_VOTE"
	}
	return "<UNSET>"
}

func EUserCenterOptionFromString(s string) (EUserCenterOption, error) {
	switch s {
	case "E_ADD_PROGRAM_PRAISE":
		return EUserCenterOption_E_ADD_PROGRAM_PRAISE, nil
	case "E_DEL_PROGRAM_PRAISE":
		return EUserCenterOption_E_DEL_PROGRAM_PRAISE, nil
	case "E_ADD_USER_SCORE":
		return EUserCenterOption_E_ADD_USER_SCORE, nil
	case "E_ADD_USER_SUBSCRIBE":
		return EUserCenterOption_E_ADD_USER_SUBSCRIBE, nil
	case "E_DEL_USER_SUBSCRIBE":
		return EUserCenterOption_E_DEL_USER_SUBSCRIBE, nil
	case "E_ADD_USER_SETTING":
		return EUserCenterOption_E_ADD_USER_SETTING, nil
	case "E_GET_USER_SETTING":
		return EUserCenterOption_E_GET_USER_SETTING, nil
	case "E_CHECK_USER_SETTING_PROFILE":
		return EUserCenterOption_E_CHECK_USER_SETTING_PROFILE, nil
	case "E_ADD_USER_RESOURCE":
		return EUserCenterOption_E_ADD_USER_RESOURCE, nil
	case "E_GET_USER_RESOURCE":
		return EUserCenterOption_E_GET_USER_RESOURCE, nil
	case "E_GET_RESOURCE":
		return EUserCenterOption_E_GET_RESOURCE, nil
	case "E_ADD_USER_PROFILE":
		return EUserCenterOption_E_ADD_USER_PROFILE, nil
	case "E_ADD_USER_LOCK":
		return EUserCenterOption_E_ADD_USER_LOCK, nil
	case "E_DEL_USER_LOCK":
		return EUserCenterOption_E_DEL_USER_LOCK, nil
	case "E_GET_USER_LOCK":
		return EUserCenterOption_E_GET_USER_LOCK, nil
	case "E_DEL_COMMENT":
		return EUserCenterOption_E_DEL_COMMENT, nil
	case "E_ADD_COMMENT_PRAISE":
		return EUserCenterOption_E_ADD_COMMENT_PRAISE, nil
	case "E_DEL_COMMENT_PRAISE":
		return EUserCenterOption_E_DEL_COMMENT_PRAISE, nil
	case "E_GET_COMMENT_PRAISE":
		return EUserCenterOption_E_GET_COMMENT_PRAISE, nil
	case "E_DEL_USER_ALL_SHARES":
		return EUserCenterOption_E_DEL_USER_ALL_SHARES, nil
	case "E_ADD_SEARCH_HISTORY":
		return EUserCenterOption_E_ADD_SEARCH_HISTORY, nil
	case "E_DEL_SEARCH_HISTORY":
		return EUserCenterOption_E_DEL_SEARCH_HISTORY, nil
	case "E_ADD_VOTE":
		return EUserCenterOption_E_ADD_VOTE, nil
	}
	return EUserCenterOption(0), fmt.Errorf("not a valid EUserCenterOption string")
}

func EUserCenterOptionPtr(v EUserCenterOption) *EUserCenterOption { return &v }

func (p EUserCenterOption) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *EUserCenterOption) UnmarshalText(text []byte) error {
	q, err := EUserCenterOptionFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *EUserCenterOption) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = EUserCenterOption(v)
	return nil
}

func (p *EUserCenterOption) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//  - NRetCode
//  - StrRetMsg
//  - NOutId1
//  - NOutId2
type IuctRespBase struct {
	NRetCode  int32  `thrift:"nRetCode,1,required" db:"nRetCode" json:"nRetCode"`
	StrRetMsg string `thrift:"strRetMsg,2,required" db:"strRetMsg" json:"strRetMsg"`
	NOutId1   *int64 `thrift:"nOutId1,3" db:"nOutId1" json:"nOutId1,omitempty"`
	NOutId2   *int64 `thrift:"nOutId2,4" db:"nOutId2" json:"nOutId2,omitempty"`
}

func NewIuctRespBase() *IuctRespBase {
	return &IuctRespBase{}
}

func (p *IuctRespBase) GetNRetCode() int32 {
	return p.NRetCode
}

func (p *IuctRespBase) GetStrRetMsg() string {
	return p.StrRetMsg
}

var IuctRespBase_NOutId1_DEFAULT int64

func (p *IuctRespBase) GetNOutId1() int64 {
	if !p.IsSetNOutId1() {
		return IuctRespBase_NOutId1_DEFAULT
	}
	return *p.NOutId1
}

var IuctRespBase_NOutId2_DEFAULT int64

func (p *IuctRespBase) GetNOutId2() int64 {
	if !p.IsSetNOutId2() {
		return IuctRespBase_NOutId2_DEFAULT
	}
	return *p.NOutId2
}
func (p *IuctRespBase) IsSetNOutId1() bool {
	return p.NOutId1 != nil
}

func (p *IuctRespBase) IsSetNOutId2() bool {
	return p.NOutId2 != nil
}

func (p *IuctRespBase) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNRetCode bool = false
	var issetStrRetMsg bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetNRetCode = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetStrRetMsg = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNRetCode {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NRetCode is not set"))
	}
	if !issetStrRetMsg {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StrRetMsg is not set"))
	}
	return nil
}

func (p *IuctRespBase) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NRetCode = v
	}
	return nil
}

func (p *IuctRespBase) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.StrRetMsg = v
	}
	return nil
}

func (p *IuctRespBase) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NOutId1 = &v
	}
	return nil
}

func (p *IuctRespBase) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NOutId2 = &v
	}
	return nil
}

func (p *IuctRespBase) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IuctRespBase"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctRespBase) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nRetCode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nRetCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NRetCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nRetCode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nRetCode: ", p), err)
	}
	return err
}

func (p *IuctRespBase) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("strRetMsg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:strRetMsg: ", p), err)
	}
	if err := oprot.WriteString(string(p.StrRetMsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.strRetMsg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:strRetMsg: ", p), err)
	}
	return err
}

func (p *IuctRespBase) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNOutId1() {
		if err := oprot.WriteFieldBegin("nOutId1", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nOutId1: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NOutId1)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nOutId1 (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nOutId1: ", p), err)
		}
	}
	return err
}

func (p *IuctRespBase) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNOutId2() {
		if err := oprot.WriteFieldBegin("nOutId2", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nOutId2: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NOutId2)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nOutId2 (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nOutId2: ", p), err)
		}
	}
	return err
}

func (p *IuctRespBase) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctRespBase(%+v)", *p)
}

// Attributes:
//  - NPid
//  - NUid
//  - TUpdateTime
//  - NInId1
//  - NInId2
//  - StrInData1
//  - StrInData2
type UserCenterReq struct {
	NPid        com_types.PRG_ID   `thrift:"nPid,1,required" db:"nPid" json:"nPid"`
	NUid        *com_types.USER_ID `thrift:"nUid,2" db:"nUid" json:"nUid,omitempty"`
	TUpdateTime *int64             `thrift:"tUpdateTime,3" db:"tUpdateTime" json:"tUpdateTime,omitempty"`
	NInId1      *int64             `thrift:"nInId1,4" db:"nInId1" json:"nInId1,omitempty"`
	NInId2      *int64             `thrift:"nInId2,5" db:"nInId2" json:"nInId2,omitempty"`
	StrInData1  *string            `thrift:"strInData1,6" db:"strInData1" json:"strInData1,omitempty"`
	StrInData2  *string            `thrift:"strInData2,7" db:"strInData2" json:"strInData2,omitempty"`
}

func NewUserCenterReq() *UserCenterReq {
	return &UserCenterReq{}
}

func (p *UserCenterReq) GetNPid() com_types.PRG_ID {
	return p.NPid
}

var UserCenterReq_NUid_DEFAULT com_types.USER_ID

func (p *UserCenterReq) GetNUid() com_types.USER_ID {
	if !p.IsSetNUid() {
		return UserCenterReq_NUid_DEFAULT
	}
	return *p.NUid
}

var UserCenterReq_TUpdateTime_DEFAULT int64

func (p *UserCenterReq) GetTUpdateTime() int64 {
	if !p.IsSetTUpdateTime() {
		return UserCenterReq_TUpdateTime_DEFAULT
	}
	return *p.TUpdateTime
}

var UserCenterReq_NInId1_DEFAULT int64

func (p *UserCenterReq) GetNInId1() int64 {
	if !p.IsSetNInId1() {
		return UserCenterReq_NInId1_DEFAULT
	}
	return *p.NInId1
}

var UserCenterReq_NInId2_DEFAULT int64

func (p *UserCenterReq) GetNInId2() int64 {
	if !p.IsSetNInId2() {
		return UserCenterReq_NInId2_DEFAULT
	}
	return *p.NInId2
}

var UserCenterReq_StrInData1_DEFAULT string

func (p *UserCenterReq) GetStrInData1() string {
	if !p.IsSetStrInData1() {
		return UserCenterReq_StrInData1_DEFAULT
	}
	return *p.StrInData1
}

var UserCenterReq_StrInData2_DEFAULT string

func (p *UserCenterReq) GetStrInData2() string {
	if !p.IsSetStrInData2() {
		return UserCenterReq_StrInData2_DEFAULT
	}
	return *p.StrInData2
}
func (p *UserCenterReq) IsSetNUid() bool {
	return p.NUid != nil
}

func (p *UserCenterReq) IsSetTUpdateTime() bool {
	return p.TUpdateTime != nil
}

func (p *UserCenterReq) IsSetNInId1() bool {
	return p.NInId1 != nil
}

func (p *UserCenterReq) IsSetNInId2() bool {
	return p.NInId2 != nil
}

func (p *UserCenterReq) IsSetStrInData1() bool {
	return p.StrInData1 != nil
}

func (p *UserCenterReq) IsSetStrInData2() bool {
	return p.StrInData2 != nil
}

func (p *UserCenterReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNPid bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetNPid = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNPid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NPid is not set"))
	}
	return nil
}

func (p *UserCenterReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := com_types.PRG_ID(v)
		p.NPid = temp
	}
	return nil
}

func (p *UserCenterReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := com_types.USER_ID(v)
		p.NUid = &temp
	}
	return nil
}

func (p *UserCenterReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TUpdateTime = &v
	}
	return nil
}

func (p *UserCenterReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NInId1 = &v
	}
	return nil
}

func (p *UserCenterReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.NInId2 = &v
	}
	return nil
}

func (p *UserCenterReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.StrInData1 = &v
	}
	return nil
}

func (p *UserCenterReq) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.StrInData2 = &v
	}
	return nil
}

func (p *UserCenterReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserCenterReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserCenterReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nPid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nPid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NPid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nPid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nPid: ", p), err)
	}
	return err
}

func (p *UserCenterReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNUid() {
		if err := oprot.WriteFieldBegin("nUid", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nUid: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NUid)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nUid (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nUid: ", p), err)
		}
	}
	return err
}

func (p *UserCenterReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTUpdateTime() {
		if err := oprot.WriteFieldBegin("tUpdateTime", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tUpdateTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.TUpdateTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tUpdateTime (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tUpdateTime: ", p), err)
		}
	}
	return err
}

func (p *UserCenterReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNInId1() {
		if err := oprot.WriteFieldBegin("nInId1", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nInId1: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NInId1)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nInId1 (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nInId1: ", p), err)
		}
	}
	return err
}

func (p *UserCenterReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNInId2() {
		if err := oprot.WriteFieldBegin("nInId2", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nInId2: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NInId2)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nInId2 (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nInId2: ", p), err)
		}
	}
	return err
}

func (p *UserCenterReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStrInData1() {
		if err := oprot.WriteFieldBegin("strInData1", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:strInData1: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StrInData1)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.strInData1 (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:strInData1: ", p), err)
		}
	}
	return err
}

func (p *UserCenterReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetStrInData2() {
		if err := oprot.WriteFieldBegin("strInData2", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:strInData2: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StrInData2)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.strInData2 (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:strInData2: ", p), err)
		}
	}
	return err
}

func (p *UserCenterReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserCenterReq(%+v)", *p)
}

// Attributes:
//  - NUid
//  - NInId1
//  - NInId2
//  - NInId3
//  - StrInData1
type UserCenterUserReq struct {
	NUid       com_types.USER_ID `thrift:"nUid,1,required" db:"nUid" json:"nUid"`
	NInId1     *int64            `thrift:"nInId1,2" db:"nInId1" json:"nInId1,omitempty"`
	NInId2     *int64            `thrift:"nInId2,3" db:"nInId2" json:"nInId2,omitempty"`
	NInId3     *int64            `thrift:"nInId3,4" db:"nInId3" json:"nInId3,omitempty"`
	StrInData1 *string           `thrift:"strInData1,5" db:"strInData1" json:"strInData1,omitempty"`
}

func NewUserCenterUserReq() *UserCenterUserReq {
	return &UserCenterUserReq{}
}

func (p *UserCenterUserReq) GetNUid() com_types.USER_ID {
	return p.NUid
}

var UserCenterUserReq_NInId1_DEFAULT int64

func (p *UserCenterUserReq) GetNInId1() int64 {
	if !p.IsSetNInId1() {
		return UserCenterUserReq_NInId1_DEFAULT
	}
	return *p.NInId1
}

var UserCenterUserReq_NInId2_DEFAULT int64

func (p *UserCenterUserReq) GetNInId2() int64 {
	if !p.IsSetNInId2() {
		return UserCenterUserReq_NInId2_DEFAULT
	}
	return *p.NInId2
}

var UserCenterUserReq_NInId3_DEFAULT int64

func (p *UserCenterUserReq) GetNInId3() int64 {
	if !p.IsSetNInId3() {
		return UserCenterUserReq_NInId3_DEFAULT
	}
	return *p.NInId3
}

var UserCenterUserReq_StrInData1_DEFAULT string

func (p *UserCenterUserReq) GetStrInData1() string {
	if !p.IsSetStrInData1() {
		return UserCenterUserReq_StrInData1_DEFAULT
	}
	return *p.StrInData1
}
func (p *UserCenterUserReq) IsSetNInId1() bool {
	return p.NInId1 != nil
}

func (p *UserCenterUserReq) IsSetNInId2() bool {
	return p.NInId2 != nil
}

func (p *UserCenterUserReq) IsSetNInId3() bool {
	return p.NInId3 != nil
}

func (p *UserCenterUserReq) IsSetStrInData1() bool {
	return p.StrInData1 != nil
}

func (p *UserCenterUserReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNUid bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetNUid = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNUid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NUid is not set"))
	}
	return nil
}

func (p *UserCenterUserReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := com_types.USER_ID(v)
		p.NUid = temp
	}
	return nil
}

func (p *UserCenterUserReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NInId1 = &v
	}
	return nil
}

func (p *UserCenterUserReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NInId2 = &v
	}
	return nil
}

func (p *UserCenterUserReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NInId3 = &v
	}
	return nil
}

func (p *UserCenterUserReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.StrInData1 = &v
	}
	return nil
}

func (p *UserCenterUserReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserCenterUserReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserCenterUserReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nUid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nUid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NUid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nUid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nUid: ", p), err)
	}
	return err
}

func (p *UserCenterUserReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNInId1() {
		if err := oprot.WriteFieldBegin("nInId1", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nInId1: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NInId1)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nInId1 (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nInId1: ", p), err)
		}
	}
	return err
}

func (p *UserCenterUserReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNInId2() {
		if err := oprot.WriteFieldBegin("nInId2", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nInId2: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NInId2)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nInId2 (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nInId2: ", p), err)
		}
	}
	return err
}

func (p *UserCenterUserReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNInId3() {
		if err := oprot.WriteFieldBegin("nInId3", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nInId3: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NInId3)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nInId3 (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nInId3: ", p), err)
		}
	}
	return err
}

func (p *UserCenterUserReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStrInData1() {
		if err := oprot.WriteFieldBegin("strInData1", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:strInData1: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StrInData1)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.strInData1 (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:strInData1: ", p), err)
		}
	}
	return err
}

func (p *UserCenterUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserCenterUserReq(%+v)", *p)
}

// Attributes:
//  - EOption
//  - StParam
type UserCenterCommReq struct {
	EOption EUserCenterOption  `thrift:"eOption,1,required" db:"eOption" json:"eOption"`
	StParam *UserCenterUserReq `thrift:"stParam,2,required" db:"stParam" json:"stParam"`
}

func NewUserCenterCommReq() *UserCenterCommReq {
	return &UserCenterCommReq{}
}

func (p *UserCenterCommReq) GetEOption() EUserCenterOption {
	return p.EOption
}

var UserCenterCommReq_StParam_DEFAULT *UserCenterUserReq

func (p *UserCenterCommReq) GetStParam() *UserCenterUserReq {
	if !p.IsSetStParam() {
		return UserCenterCommReq_StParam_DEFAULT
	}
	return p.StParam
}
func (p *UserCenterCommReq) IsSetStParam() bool {
	return p.StParam != nil
}

func (p *UserCenterCommReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetEOption bool = false
	var issetStParam bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetEOption = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetStParam = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetEOption {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EOption is not set"))
	}
	if !issetStParam {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StParam is not set"))
	}
	return nil
}

func (p *UserCenterCommReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := EUserCenterOption(v)
		p.EOption = temp
	}
	return nil
}

func (p *UserCenterCommReq) ReadField2(iprot thrift.TProtocol) error {
	p.StParam = &UserCenterUserReq{}
	if err := p.StParam.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StParam), err)
	}
	return nil
}

func (p *UserCenterCommReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserCenterCommReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserCenterCommReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("eOption", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:eOption: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EOption)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.eOption (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:eOption: ", p), err)
	}
	return err
}

func (p *UserCenterCommReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stParam", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stParam: ", p), err)
	}
	if err := p.StParam.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StParam), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stParam: ", p), err)
	}
	return err
}

func (p *UserCenterCommReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserCenterCommReq(%+v)", *p)
}

// Attributes:
//  - VecPids
//  - NUid
//  - NFunction
//  - VecSids
type MultiIntReq struct {
	VecPids   []com_types.PRG_ID    `thrift:"vecPids,1,required" db:"vecPids" json:"vecPids"`
	NUid      int64                 `thrift:"nUid,2,required" db:"nUid" json:"nUid"`
	NFunction *int32                `thrift:"nFunction,3" db:"nFunction" json:"nFunction,omitempty"`
	VecSids   []com_types.SERIES_ID `thrift:"vecSids,4" db:"vecSids" json:"vecSids,omitempty"`
}

func NewMultiIntReq() *MultiIntReq {
	return &MultiIntReq{}
}

func (p *MultiIntReq) GetVecPids() []com_types.PRG_ID {
	return p.VecPids
}

func (p *MultiIntReq) GetNUid() int64 {
	return p.NUid
}

var MultiIntReq_NFunction_DEFAULT int32

func (p *MultiIntReq) GetNFunction() int32 {
	if !p.IsSetNFunction() {
		return MultiIntReq_NFunction_DEFAULT
	}
	return *p.NFunction
}

var MultiIntReq_VecSids_DEFAULT []com_types.SERIES_ID

func (p *MultiIntReq) GetVecSids() []com_types.SERIES_ID {
	return p.VecSids
}
func (p *MultiIntReq) IsSetNFunction() bool {
	return p.NFunction != nil
}

func (p *MultiIntReq) IsSetVecSids() bool {
	return p.VecSids != nil
}

func (p *MultiIntReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetVecPids bool = false
	var issetNUid bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetVecPids = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetNUid = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetVecPids {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecPids is not set"))
	}
	if !issetNUid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NUid is not set"))
	}
	return nil
}

func (p *MultiIntReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]com_types.PRG_ID, 0, size)
	p.VecPids = tSlice
	for i := 0; i < size; i++ {
		var _elem0 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.VecPids = append(p.VecPids, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiIntReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NUid = v
	}
	return nil
}

func (p *MultiIntReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NFunction = &v
	}
	return nil
}

func (p *MultiIntReq) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]com_types.SERIES_ID, 0, size)
	p.VecSids = tSlice
	for i := 0; i < size; i++ {
		var _elem1 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.VecSids = append(p.VecSids, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiIntReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MultiIntReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MultiIntReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecPids", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vecPids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.VecPids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecPids {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vecPids: ", p), err)
	}
	return err
}

func (p *MultiIntReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nUid", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nUid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NUid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nUid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nUid: ", p), err)
	}
	return err
}

func (p *MultiIntReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNFunction() {
		if err := oprot.WriteFieldBegin("nFunction", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nFunction: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.NFunction)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nFunction (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nFunction: ", p), err)
		}
	}
	return err
}

func (p *MultiIntReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVecSids() {
		if err := oprot.WriteFieldBegin("vecSids", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:vecSids: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.VecSids)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.VecSids {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:vecSids: ", p), err)
		}
	}
	return err
}

func (p *MultiIntReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiIntReq(%+v)", *p)
}

// Attributes:
//  - StRetComm
//  - VecIntRets1
//  - VecIntRets2
type MultiIntResp struct {
	StRetComm   *IuctRespBase `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	VecIntRets1 []int32       `thrift:"vecIntRets1,2,required" db:"vecIntRets1" json:"vecIntRets1"`
	VecIntRets2 []int32       `thrift:"vecIntRets2,3" db:"vecIntRets2" json:"vecIntRets2,omitempty"`
}

func NewMultiIntResp() *MultiIntResp {
	return &MultiIntResp{}
}

var MultiIntResp_StRetComm_DEFAULT *IuctRespBase

func (p *MultiIntResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return MultiIntResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

func (p *MultiIntResp) GetVecIntRets1() []int32 {
	return p.VecIntRets1
}

var MultiIntResp_VecIntRets2_DEFAULT []int32

func (p *MultiIntResp) GetVecIntRets2() []int32 {
	return p.VecIntRets2
}
func (p *MultiIntResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *MultiIntResp) IsSetVecIntRets2() bool {
	return p.VecIntRets2 != nil
}

func (p *MultiIntResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetVecIntRets1 bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetVecIntRets1 = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetVecIntRets1 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecIntRets1 is not set"))
	}
	return nil
}

func (p *MultiIntResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *MultiIntResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.VecIntRets1 = tSlice
	for i := 0; i < size; i++ {
		var _elem2 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem2 = v
		}
		p.VecIntRets1 = append(p.VecIntRets1, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiIntResp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.VecIntRets2 = tSlice
	for i := 0; i < size; i++ {
		var _elem3 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem3 = v
		}
		p.VecIntRets2 = append(p.VecIntRets2, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiIntResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MultiIntResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MultiIntResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *MultiIntResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecIntRets1", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vecIntRets1: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.VecIntRets1)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecIntRets1 {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vecIntRets1: ", p), err)
	}
	return err
}

func (p *MultiIntResp) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVecIntRets2() {
		if err := oprot.WriteFieldBegin("vecIntRets2", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vecIntRets2: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.VecIntRets2)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.VecIntRets2 {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vecIntRets2: ", p), err)
		}
	}
	return err
}

func (p *MultiIntResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiIntResp(%+v)", *p)
}

// Attributes:
//  - StRetComm
//  - VecBigIntRets1
//  - VecBigIntRets2
type MultiBigIntResp struct {
	StRetComm      *IuctRespBase `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	VecBigIntRets1 []int64       `thrift:"vecBigIntRets1,2,required" db:"vecBigIntRets1" json:"vecBigIntRets1"`
	VecBigIntRets2 []int64       `thrift:"vecBigIntRets2,3" db:"vecBigIntRets2" json:"vecBigIntRets2,omitempty"`
}

func NewMultiBigIntResp() *MultiBigIntResp {
	return &MultiBigIntResp{}
}

var MultiBigIntResp_StRetComm_DEFAULT *IuctRespBase

func (p *MultiBigIntResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return MultiBigIntResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

func (p *MultiBigIntResp) GetVecBigIntRets1() []int64 {
	return p.VecBigIntRets1
}

var MultiBigIntResp_VecBigIntRets2_DEFAULT []int64

func (p *MultiBigIntResp) GetVecBigIntRets2() []int64 {
	return p.VecBigIntRets2
}
func (p *MultiBigIntResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *MultiBigIntResp) IsSetVecBigIntRets2() bool {
	return p.VecBigIntRets2 != nil
}

func (p *MultiBigIntResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetVecBigIntRets1 bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetVecBigIntRets1 = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetVecBigIntRets1 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecBigIntRets1 is not set"))
	}
	return nil
}

func (p *MultiBigIntResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *MultiBigIntResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.VecBigIntRets1 = tSlice
	for i := 0; i < size; i++ {
		var _elem4 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem4 = v
		}
		p.VecBigIntRets1 = append(p.VecBigIntRets1, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiBigIntResp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.VecBigIntRets2 = tSlice
	for i := 0; i < size; i++ {
		var _elem5 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem5 = v
		}
		p.VecBigIntRets2 = append(p.VecBigIntRets2, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiBigIntResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MultiBigIntResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MultiBigIntResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *MultiBigIntResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecBigIntRets1", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vecBigIntRets1: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.VecBigIntRets1)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecBigIntRets1 {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vecBigIntRets1: ", p), err)
	}
	return err
}

func (p *MultiBigIntResp) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVecBigIntRets2() {
		if err := oprot.WriteFieldBegin("vecBigIntRets2", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vecBigIntRets2: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.VecBigIntRets2)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.VecBigIntRets2 {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vecBigIntRets2: ", p), err)
		}
	}
	return err
}

func (p *MultiBigIntResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiBigIntResp(%+v)", *p)
}

// Attributes:
//  - StRetComm
//  - VecbRets
type MultiBoolResp struct {
	StRetComm *IuctRespBase `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	VecbRets  []bool        `thrift:"vecbRets,2,required" db:"vecbRets" json:"vecbRets"`
}

func NewMultiBoolResp() *MultiBoolResp {
	return &MultiBoolResp{}
}

var MultiBoolResp_StRetComm_DEFAULT *IuctRespBase

func (p *MultiBoolResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return MultiBoolResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

func (p *MultiBoolResp) GetVecbRets() []bool {
	return p.VecbRets
}
func (p *MultiBoolResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *MultiBoolResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetVecbRets bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetVecbRets = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetVecbRets {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecbRets is not set"))
	}
	return nil
}

func (p *MultiBoolResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *MultiBoolResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]bool, 0, size)
	p.VecbRets = tSlice
	for i := 0; i < size; i++ {
		var _elem6 bool
		if v, err := iprot.ReadBool(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem6 = v
		}
		p.VecbRets = append(p.VecbRets, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiBoolResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MultiBoolResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MultiBoolResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *MultiBoolResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecbRets", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vecbRets: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.BOOL, len(p.VecbRets)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecbRets {
		if err := oprot.WriteBool(bool(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vecbRets: ", p), err)
	}
	return err
}

func (p *MultiBoolResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiBoolResp(%+v)", *p)
}

// Attributes:
//  - SetStr
//  - NUid
type MultiStrReq struct {
	SetStr map[string]struct{} `thrift:"setStr,1,required" db:"setStr" json:"setStr"`
	NUid   int64               `thrift:"nUid,2,required" db:"nUid" json:"nUid"`
}

func NewMultiStrReq() *MultiStrReq {
	return &MultiStrReq{}
}

func (p *MultiStrReq) GetSetStr() map[string]struct{} {
	return p.SetStr
}

func (p *MultiStrReq) GetNUid() int64 {
	return p.NUid
}
func (p *MultiStrReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSetStr bool = false
	var issetNUid bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetSetStr = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetNUid = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSetStr {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SetStr is not set"))
	}
	if !issetNUid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NUid is not set"))
	}
	return nil
}

func (p *MultiStrReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]struct{}, size)
	p.SetStr = tSet
	for i := 0; i < size; i++ {
		var _elem7 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem7 = v
		}
		p.SetStr[_elem7] = struct{}{}
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *MultiStrReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NUid = v
	}
	return nil
}

func (p *MultiStrReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MultiStrReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MultiStrReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("setStr", thrift.SET, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:setStr: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.SetStr)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.SetStr {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:setStr: ", p), err)
	}
	return err
}

func (p *MultiStrReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nUid", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nUid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NUid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nUid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nUid: ", p), err)
	}
	return err
}

func (p *MultiStrReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiStrReq(%+v)", *p)
}

// Attributes:
//  - NPid
//  - NUid
//  - NSid
//  - StrSp
type HistoryReq struct {
	NPid  com_types.PRG_ID    `thrift:"nPid,1,required" db:"nPid" json:"nPid"`
	NUid  com_types.USER_ID   `thrift:"nUid,2,required" db:"nUid" json:"nUid"`
	NSid  com_types.SERIES_ID `thrift:"nSid,3,required" db:"nSid" json:"nSid"`
	StrSp string              `thrift:"strSp,4,required" db:"strSp" json:"strSp"`
}

func NewHistoryReq() *HistoryReq {
	return &HistoryReq{}
}

func (p *HistoryReq) GetNPid() com_types.PRG_ID {
	return p.NPid
}

func (p *HistoryReq) GetNUid() com_types.USER_ID {
	return p.NUid
}

func (p *HistoryReq) GetNSid() com_types.SERIES_ID {
	return p.NSid
}

func (p *HistoryReq) GetStrSp() string {
	return p.StrSp
}
func (p *HistoryReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNPid bool = false
	var issetNUid bool = false
	var issetNSid bool = false
	var issetStrSp bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetNPid = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetNUid = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetNSid = true
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
			issetStrSp = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNPid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NPid is not set"))
	}
	if !issetNUid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NUid is not set"))
	}
	if !issetNSid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSid is not set"))
	}
	if !issetStrSp {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StrSp is not set"))
	}
	return nil
}

func (p *HistoryReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := com_types.PRG_ID(v)
		p.NPid = temp
	}
	return nil
}

func (p *HistoryReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := com_types.USER_ID(v)
		p.NUid = temp
	}
	return nil
}

func (p *HistoryReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := com_types.SERIES_ID(v)
		p.NSid = temp
	}
	return nil
}

func (p *HistoryReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.StrSp = v
	}
	return nil
}

func (p *HistoryReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HistoryReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HistoryReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nPid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nPid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NPid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nPid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nPid: ", p), err)
	}
	return err
}

func (p *HistoryReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nUid", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nUid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NUid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nUid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nUid: ", p), err)
	}
	return err
}

func (p *HistoryReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nSid", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nSid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NSid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nSid (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nSid: ", p), err)
	}
	return err
}

func (p *HistoryReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("strSp", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:strSp: ", p), err)
	}
	if err := oprot.WriteString(string(p.StrSp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.strSp (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:strSp: ", p), err)
	}
	return err
}

func (p *HistoryReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryReq(%+v)", *p)
}

// Attributes:
//  - StRetComm
//  - NOffSet
//  - TTimeStamp
//  - NPid
type HistoryResp struct {
	StRetComm  *IuctRespBase     `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	NOffSet    int32             `thrift:"nOffSet,2,required" db:"nOffSet" json:"nOffSet"`
	TTimeStamp int64             `thrift:"tTimeStamp,3,required" db:"tTimeStamp" json:"tTimeStamp"`
	NPid       *com_types.PRG_ID `thrift:"nPid,4" db:"nPid" json:"nPid,omitempty"`
}

func NewHistoryResp() *HistoryResp {
	return &HistoryResp{}
}

var HistoryResp_StRetComm_DEFAULT *IuctRespBase

func (p *HistoryResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return HistoryResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

func (p *HistoryResp) GetNOffSet() int32 {
	return p.NOffSet
}

func (p *HistoryResp) GetTTimeStamp() int64 {
	return p.TTimeStamp
}

var HistoryResp_NPid_DEFAULT com_types.PRG_ID

func (p *HistoryResp) GetNPid() com_types.PRG_ID {
	if !p.IsSetNPid() {
		return HistoryResp_NPid_DEFAULT
	}
	return *p.NPid
}
func (p *HistoryResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *HistoryResp) IsSetNPid() bool {
	return p.NPid != nil
}

func (p *HistoryResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetNOffSet bool = false
	var issetTTimeStamp bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetNOffSet = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetTTimeStamp = true
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetNOffSet {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NOffSet is not set"))
	}
	if !issetTTimeStamp {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TTimeStamp is not set"))
	}
	return nil
}

func (p *HistoryResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *HistoryResp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NOffSet = v
	}
	return nil
}

func (p *HistoryResp) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TTimeStamp = v
	}
	return nil
}

func (p *HistoryResp) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := com_types.PRG_ID(v)
		p.NPid = &temp
	}
	return nil
}

func (p *HistoryResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HistoryResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HistoryResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *HistoryResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nOffSet", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nOffSet: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NOffSet)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nOffSet (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nOffSet: ", p), err)
	}
	return err
}

func (p *HistoryResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tTimeStamp", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tTimeStamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TTimeStamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tTimeStamp (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tTimeStamp: ", p), err)
	}
	return err
}

func (p *HistoryResp) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNPid() {
		if err := oprot.WriteFieldBegin("nPid", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nPid: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NPid)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nPid (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nPid: ", p), err)
		}
	}
	return err
}

func (p *HistoryResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryResp(%+v)", *p)
}

// Attributes:
//  - NUid
//  - SetTypes
//  - StrSp
//  - BGetAll
//  - VecUid
type HistoryListReq struct {
	NUid     com_types.USER_ID   `thrift:"nUid,1,required" db:"nUid" json:"nUid"`
	SetTypes map[int32]struct{}  `thrift:"setTypes,2,required" db:"setTypes" json:"setTypes"`
	StrSp    string              `thrift:"strSp,3,required" db:"strSp" json:"strSp"`
	BGetAll  bool                `thrift:"bGetAll,4,required" db:"bGetAll" json:"bGetAll"`
	VecUid   []com_types.USER_ID `thrift:"vecUid,5" db:"vecUid" json:"vecUid,omitempty"`
}

func NewHistoryListReq() *HistoryListReq {
	return &HistoryListReq{}
}

func (p *HistoryListReq) GetNUid() com_types.USER_ID {
	return p.NUid
}

func (p *HistoryListReq) GetSetTypes() map[int32]struct{} {
	return p.SetTypes
}

func (p *HistoryListReq) GetStrSp() string {
	return p.StrSp
}

func (p *HistoryListReq) GetBGetAll() bool {
	return p.BGetAll
}

var HistoryListReq_VecUid_DEFAULT []com_types.USER_ID

func (p *HistoryListReq) GetVecUid() []com_types.USER_ID {
	return p.VecUid
}
func (p *HistoryListReq) IsSetVecUid() bool {
	return p.VecUid != nil
}

func (p *HistoryListReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNUid bool = false
	var issetSetTypes bool = false
	var issetStrSp bool = false
	var issetBGetAll bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetNUid = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetSetTypes = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetStrSp = true
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
			issetBGetAll = true
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNUid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NUid is not set"))
	}
	if !issetSetTypes {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SetTypes is not set"))
	}
	if !issetStrSp {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StrSp is not set"))
	}
	if !issetBGetAll {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BGetAll is not set"))
	}
	return nil
}

func (p *HistoryListReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := com_types.USER_ID(v)
		p.NUid = temp
	}
	return nil
}

func (p *HistoryListReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[int32]struct{}, size)
	p.SetTypes = tSet
	for i := 0; i < size; i++ {
		var _elem8 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem8 = v
		}
		p.SetTypes[_elem8] = struct{}{}
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *HistoryListReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StrSp = v
	}
	return nil
}

func (p *HistoryListReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.BGetAll = v
	}
	return nil
}

func (p *HistoryListReq) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]com_types.USER_ID, 0, size)
	p.VecUid = tSlice
	for i := 0; i < size; i++ {
		var _elem9 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem9 = v
		}
		p.VecUid = append(p.VecUid, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HistoryListReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HistoryListReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HistoryListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nUid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nUid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NUid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nUid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nUid: ", p), err)
	}
	return err
}

func (p *HistoryListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("setTypes", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setTypes: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.I32, len(p.SetTypes)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.SetTypes {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setTypes: ", p), err)
	}
	return err
}

func (p *HistoryListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("strSp", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:strSp: ", p), err)
	}
	if err := oprot.WriteString(string(p.StrSp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.strSp (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:strSp: ", p), err)
	}
	return err
}

func (p *HistoryListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bGetAll", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:bGetAll: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.BGetAll)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bGetAll (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:bGetAll: ", p), err)
	}
	return err
}

func (p *HistoryListReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetVecUid() {
		if err := oprot.WriteFieldBegin("vecUid", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:vecUid: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.VecUid)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.VecUid {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:vecUid: ", p), err)
		}
	}
	return err
}

func (p *HistoryListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryListReq(%+v)", *p)
}

// Attributes:
//  - StRetComm
//  - VecHistorys
//  - VecIds
type HistoryListResp struct {
	StRetComm   *IuctRespBase              `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	VecHistorys []*iuct_types.USER_HISTORY `thrift:"vecHistorys,2,required" db:"vecHistorys" json:"vecHistorys"`
	VecIds      []com_types.PRG_ID         `thrift:"vecIds,3,required" db:"vecIds" json:"vecIds"`
}

func NewHistoryListResp() *HistoryListResp {
	return &HistoryListResp{}
}

var HistoryListResp_StRetComm_DEFAULT *IuctRespBase

func (p *HistoryListResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return HistoryListResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

func (p *HistoryListResp) GetVecHistorys() []*iuct_types.USER_HISTORY {
	return p.VecHistorys
}

func (p *HistoryListResp) GetVecIds() []com_types.PRG_ID {
	return p.VecIds
}
func (p *HistoryListResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *HistoryListResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetVecHistorys bool = false
	var issetVecIds bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetVecHistorys = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetVecIds = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetVecHistorys {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecHistorys is not set"))
	}
	if !issetVecIds {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecIds is not set"))
	}
	return nil
}

func (p *HistoryListResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *HistoryListResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*iuct_types.USER_HISTORY, 0, size)
	p.VecHistorys = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &iuct_types.USER_HISTORY{}
		if err := _elem10.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
		}
		p.VecHistorys = append(p.VecHistorys, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HistoryListResp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]com_types.PRG_ID, 0, size)
	p.VecIds = tSlice
	for i := 0; i < size; i++ {
		var _elem11 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem11 = v
		}
		p.VecIds = append(p.VecIds, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HistoryListResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HistoryListResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HistoryListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *HistoryListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecHistorys", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vecHistorys: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VecHistorys)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecHistorys {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vecHistorys: ", p), err)
	}
	return err
}

func (p *HistoryListResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecIds", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vecIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.VecIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecIds {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vecIds: ", p), err)
	}
	return err
}

func (p *HistoryListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryListResp(%+v)", *p)
}

// Attributes:
//  - StRetComm
//  - NLastHitPid
//  - NOffSet
//  - MapPidHis
type UserSeriesProHisListResp struct {
	StRetComm   *IuctRespBase              `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	NLastHitPid com_types.PRG_ID           `thrift:"nLastHitPid,2,required" db:"nLastHitPid" json:"nLastHitPid"`
	NOffSet     int32                      `thrift:"nOffSet,3,required" db:"nOffSet" json:"nOffSet"`
	MapPidHis   map[com_types.PRG_ID]int32 `thrift:"mapPidHis,4,required" db:"mapPidHis" json:"mapPidHis"`
}

func NewUserSeriesProHisListResp() *UserSeriesProHisListResp {
	return &UserSeriesProHisListResp{}
}

var UserSeriesProHisListResp_StRetComm_DEFAULT *IuctRespBase

func (p *UserSeriesProHisListResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return UserSeriesProHisListResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

func (p *UserSeriesProHisListResp) GetNLastHitPid() com_types.PRG_ID {
	return p.NLastHitPid
}

func (p *UserSeriesProHisListResp) GetNOffSet() int32 {
	return p.NOffSet
}

func (p *UserSeriesProHisListResp) GetMapPidHis() map[com_types.PRG_ID]int32 {
	return p.MapPidHis
}
func (p *UserSeriesProHisListResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *UserSeriesProHisListResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetNLastHitPid bool = false
	var issetNOffSet bool = false
	var issetMapPidHis bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetNLastHitPid = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetNOffSet = true
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
			issetMapPidHis = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetNLastHitPid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NLastHitPid is not set"))
	}
	if !issetNOffSet {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NOffSet is not set"))
	}
	if !issetMapPidHis {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MapPidHis is not set"))
	}
	return nil
}

func (p *UserSeriesProHisListResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *UserSeriesProHisListResp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := com_types.PRG_ID(v)
		p.NLastHitPid = temp
	}
	return nil
}

func (p *UserSeriesProHisListResp) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NOffSet = v
	}
	return nil
}

func (p *UserSeriesProHisListResp) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[com_types.PRG_ID]int32, size)
	p.MapPidHis = tMap
	for i := 0; i < size; i++ {
		var _key12 com_types.PRG_ID
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := com_types.PRG_ID(v)
			_key12 = temp
		}
		var _val13 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val13 = v
		}
		p.MapPidHis[_key12] = _val13
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UserSeriesProHisListResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserSeriesProHisListResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserSeriesProHisListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *UserSeriesProHisListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nLastHitPid", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nLastHitPid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NLastHitPid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nLastHitPid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nLastHitPid: ", p), err)
	}
	return err
}

func (p *UserSeriesProHisListResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nOffSet", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nOffSet: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NOffSet)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nOffSet (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nOffSet: ", p), err)
	}
	return err
}

func (p *UserSeriesProHisListResp) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mapPidHis", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mapPidHis: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I64, thrift.I32, len(p.MapPidHis)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.MapPidHis {
		if err := oprot.WriteI64(int64(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mapPidHis: ", p), err)
	}
	return err
}

func (p *UserSeriesProHisListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserSeriesProHisListResp(%+v)", *p)
}

// Attributes:
//  - StRetComm
//  - MapSidHis
type UserSerirsHisListResp struct {
	StRetComm *IuctRespBase                 `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	MapSidHis map[com_types.SERIES_ID]int32 `thrift:"mapSidHis,2,required" db:"mapSidHis" json:"mapSidHis"`
}

func NewUserSerirsHisListResp() *UserSerirsHisListResp {
	return &UserSerirsHisListResp{}
}

var UserSerirsHisListResp_StRetComm_DEFAULT *IuctRespBase

func (p *UserSerirsHisListResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return UserSerirsHisListResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

func (p *UserSerirsHisListResp) GetMapSidHis() map[com_types.SERIES_ID]int32 {
	return p.MapSidHis
}
func (p *UserSerirsHisListResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *UserSerirsHisListResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetMapSidHis bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetMapSidHis = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetMapSidHis {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MapSidHis is not set"))
	}
	return nil
}

func (p *UserSerirsHisListResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *UserSerirsHisListResp) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[com_types.SERIES_ID]int32, size)
	p.MapSidHis = tMap
	for i := 0; i < size; i++ {
		var _key14 com_types.SERIES_ID
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := com_types.SERIES_ID(v)
			_key14 = temp
		}
		var _val15 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val15 = v
		}
		p.MapSidHis[_key14] = _val15
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UserSerirsHisListResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserSerirsHisListResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserSerirsHisListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *UserSerirsHisListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mapSidHis", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mapSidHis: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I64, thrift.I32, len(p.MapSidHis)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.MapSidHis {
		if err := oprot.WriteI64(int64(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mapSidHis: ", p), err)
	}
	return err
}

func (p *UserSerirsHisListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserSerirsHisListResp(%+v)", *p)
}

// Attributes:
//  - NUid
//  - VecPids
//  - TTimeStamp
//  - VecSids
//  - NFunction
type MultiFavoriteReq struct {
	NUid       int64                 `thrift:"nUid,1,required" db:"nUid" json:"nUid"`
	VecPids    []com_types.PRG_ID    `thrift:"vecPids,2,required" db:"vecPids" json:"vecPids"`
	TTimeStamp int64                 `thrift:"tTimeStamp,3,required" db:"tTimeStamp" json:"tTimeStamp"`
	VecSids    []com_types.SERIES_ID `thrift:"vecSids,4" db:"vecSids" json:"vecSids,omitempty"`
	NFunction  *int32                `thrift:"nFunction,5" db:"nFunction" json:"nFunction,omitempty"`
}

func NewMultiFavoriteReq() *MultiFavoriteReq {
	return &MultiFavoriteReq{}
}

func (p *MultiFavoriteReq) GetNUid() int64 {
	return p.NUid
}

func (p *MultiFavoriteReq) GetVecPids() []com_types.PRG_ID {
	return p.VecPids
}

func (p *MultiFavoriteReq) GetTTimeStamp() int64 {
	return p.TTimeStamp
}

var MultiFavoriteReq_VecSids_DEFAULT []com_types.SERIES_ID

func (p *MultiFavoriteReq) GetVecSids() []com_types.SERIES_ID {
	return p.VecSids
}

var MultiFavoriteReq_NFunction_DEFAULT int32

func (p *MultiFavoriteReq) GetNFunction() int32 {
	if !p.IsSetNFunction() {
		return MultiFavoriteReq_NFunction_DEFAULT
	}
	return *p.NFunction
}
func (p *MultiFavoriteReq) IsSetVecSids() bool {
	return p.VecSids != nil
}

func (p *MultiFavoriteReq) IsSetNFunction() bool {
	return p.NFunction != nil
}

func (p *MultiFavoriteReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNUid bool = false
	var issetVecPids bool = false
	var issetTTimeStamp bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetNUid = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetVecPids = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetTTimeStamp = true
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNUid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NUid is not set"))
	}
	if !issetVecPids {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecPids is not set"))
	}
	if !issetTTimeStamp {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TTimeStamp is not set"))
	}
	return nil
}

func (p *MultiFavoriteReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NUid = v
	}
	return nil
}

func (p *MultiFavoriteReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]com_types.PRG_ID, 0, size)
	p.VecPids = tSlice
	for i := 0; i < size; i++ {
		var _elem16 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem16 = v
		}
		p.VecPids = append(p.VecPids, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiFavoriteReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TTimeStamp = v
	}
	return nil
}

func (p *MultiFavoriteReq) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]com_types.SERIES_ID, 0, size)
	p.VecSids = tSlice
	for i := 0; i < size; i++ {
		var _elem17 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem17 = v
		}
		p.VecSids = append(p.VecSids, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiFavoriteReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.NFunction = &v
	}
	return nil
}

func (p *MultiFavoriteReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MultiFavoriteReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MultiFavoriteReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nUid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nUid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NUid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nUid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nUid: ", p), err)
	}
	return err
}

func (p *MultiFavoriteReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecPids", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vecPids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.VecPids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecPids {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vecPids: ", p), err)
	}
	return err
}

func (p *MultiFavoriteReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tTimeStamp", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tTimeStamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TTimeStamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tTimeStamp (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tTimeStamp: ", p), err)
	}
	return err
}

func (p *MultiFavoriteReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVecSids() {
		if err := oprot.WriteFieldBegin("vecSids", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:vecSids: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.VecSids)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.VecSids {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:vecSids: ", p), err)
		}
	}
	return err
}

func (p *MultiFavoriteReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNFunction() {
		if err := oprot.WriteFieldBegin("nFunction", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nFunction: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.NFunction)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nFunction (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nFunction: ", p), err)
		}
	}
	return err
}

func (p *MultiFavoriteReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiFavoriteReq(%+v)", *p)
}

// Attributes:
//  - StRetComm
//  - StIsFavs
type IsFavsResp struct {
	StRetComm *IuctRespBase          `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	StIsFavs  *iuct_types.ISFAVORITE `thrift:"stIsFavs,2,required" db:"stIsFavs" json:"stIsFavs"`
}

func NewIsFavsResp() *IsFavsResp {
	return &IsFavsResp{}
}

var IsFavsResp_StRetComm_DEFAULT *IuctRespBase

func (p *IsFavsResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return IsFavsResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

var IsFavsResp_StIsFavs_DEFAULT *iuct_types.ISFAVORITE

func (p *IsFavsResp) GetStIsFavs() *iuct_types.ISFAVORITE {
	if !p.IsSetStIsFavs() {
		return IsFavsResp_StIsFavs_DEFAULT
	}
	return p.StIsFavs
}
func (p *IsFavsResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *IsFavsResp) IsSetStIsFavs() bool {
	return p.StIsFavs != nil
}

func (p *IsFavsResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetStIsFavs bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetStIsFavs = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetStIsFavs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StIsFavs is not set"))
	}
	return nil
}

func (p *IsFavsResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *IsFavsResp) ReadField2(iprot thrift.TProtocol) error {
	p.StIsFavs = &iuct_types.ISFAVORITE{}
	if err := p.StIsFavs.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StIsFavs), err)
	}
	return nil
}

func (p *IsFavsResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IsFavsResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IsFavsResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *IsFavsResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stIsFavs", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stIsFavs: ", p), err)
	}
	if err := p.StIsFavs.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StIsFavs), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stIsFavs: ", p), err)
	}
	return err
}

func (p *IsFavsResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsFavsResp(%+v)", *p)
}

// Attributes:
//  - StRetComm
//  - VecIsFavs
type MultiIsFavsResp struct {
	StRetComm *IuctRespBase            `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	VecIsFavs []*iuct_types.ISFAVORITE `thrift:"vecIsFavs,2,required" db:"vecIsFavs" json:"vecIsFavs"`
}

func NewMultiIsFavsResp() *MultiIsFavsResp {
	return &MultiIsFavsResp{}
}

var MultiIsFavsResp_StRetComm_DEFAULT *IuctRespBase

func (p *MultiIsFavsResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return MultiIsFavsResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

func (p *MultiIsFavsResp) GetVecIsFavs() []*iuct_types.ISFAVORITE {
	return p.VecIsFavs
}
func (p *MultiIsFavsResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *MultiIsFavsResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetVecIsFavs bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetVecIsFavs = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetVecIsFavs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecIsFavs is not set"))
	}
	return nil
}

func (p *MultiIsFavsResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *MultiIsFavsResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*iuct_types.ISFAVORITE, 0, size)
	p.VecIsFavs = tSlice
	for i := 0; i < size; i++ {
		_elem18 := &iuct_types.ISFAVORITE{}
		if err := _elem18.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem18), err)
		}
		p.VecIsFavs = append(p.VecIsFavs, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiIsFavsResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MultiIsFavsResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MultiIsFavsResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *MultiIsFavsResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecIsFavs", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vecIsFavs: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VecIsFavs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecIsFavs {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vecIsFavs: ", p), err)
	}
	return err
}

func (p *MultiIsFavsResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiIsFavsResp(%+v)", *p)
}

// Attributes:
//  - NUid
//  - SetTypes
//  - NFunction
type FavoriteListReq struct {
	NUid      int64              `thrift:"nUid,1,required" db:"nUid" json:"nUid"`
	SetTypes  map[int32]struct{} `thrift:"setTypes,2,required" db:"setTypes" json:"setTypes"`
	NFunction int32              `thrift:"nFunction,3,required" db:"nFunction" json:"nFunction"`
}

func NewFavoriteListReq() *FavoriteListReq {
	return &FavoriteListReq{}
}

func (p *FavoriteListReq) GetNUid() int64 {
	return p.NUid
}

func (p *FavoriteListReq) GetSetTypes() map[int32]struct{} {
	return p.SetTypes
}

func (p *FavoriteListReq) GetNFunction() int32 {
	return p.NFunction
}
func (p *FavoriteListReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNUid bool = false
	var issetSetTypes bool = false
	var issetNFunction bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetNUid = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetSetTypes = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetNFunction = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNUid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NUid is not set"))
	}
	if !issetSetTypes {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SetTypes is not set"))
	}
	if !issetNFunction {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NFunction is not set"))
	}
	return nil
}

func (p *FavoriteListReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NUid = v
	}
	return nil
}

func (p *FavoriteListReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[int32]struct{}, size)
	p.SetTypes = tSet
	for i := 0; i < size; i++ {
		var _elem19 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem19 = v
		}
		p.SetTypes[_elem19] = struct{}{}
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *FavoriteListReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NFunction = v
	}
	return nil
}

func (p *FavoriteListReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FavoriteListReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FavoriteListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nUid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nUid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NUid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nUid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nUid: ", p), err)
	}
	return err
}

func (p *FavoriteListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("setTypes", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setTypes: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.I32, len(p.SetTypes)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.SetTypes {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setTypes: ", p), err)
	}
	return err
}

func (p *FavoriteListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nFunction", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nFunction: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NFunction)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nFunction (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nFunction: ", p), err)
	}
	return err
}

func (p *FavoriteListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FavoriteListReq(%+v)", *p)
}

// Attributes:
//  - StRetComm
//  - VecFavorite
//  - VecIds
type FavoriteListResp struct {
	StRetComm   *IuctRespBase               `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	VecFavorite []*iuct_types.USER_FAVORITE `thrift:"vecFavorite,2,required" db:"vecFavorite" json:"vecFavorite"`
	VecIds      []com_types.PRG_ID          `thrift:"vecIds,3,required" db:"vecIds" json:"vecIds"`
}

func NewFavoriteListResp() *FavoriteListResp {
	return &FavoriteListResp{}
}

var FavoriteListResp_StRetComm_DEFAULT *IuctRespBase

func (p *FavoriteListResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return FavoriteListResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

func (p *FavoriteListResp) GetVecFavorite() []*iuct_types.USER_FAVORITE {
	return p.VecFavorite
}

func (p *FavoriteListResp) GetVecIds() []com_types.PRG_ID {
	return p.VecIds
}
func (p *FavoriteListResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *FavoriteListResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetVecFavorite bool = false
	var issetVecIds bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetVecFavorite = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetVecIds = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetVecFavorite {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecFavorite is not set"))
	}
	if !issetVecIds {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecIds is not set"))
	}
	return nil
}

func (p *FavoriteListResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *FavoriteListResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*iuct_types.USER_FAVORITE, 0, size)
	p.VecFavorite = tSlice
	for i := 0; i < size; i++ {
		_elem20 := &iuct_types.USER_FAVORITE{}
		if err := _elem20.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem20), err)
		}
		p.VecFavorite = append(p.VecFavorite, _elem20)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FavoriteListResp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]com_types.PRG_ID, 0, size)
	p.VecIds = tSlice
	for i := 0; i < size; i++ {
		var _elem21 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem21 = v
		}
		p.VecIds = append(p.VecIds, _elem21)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FavoriteListResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FavoriteListResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FavoriteListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *FavoriteListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecFavorite", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vecFavorite: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VecFavorite)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecFavorite {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vecFavorite: ", p), err)
	}
	return err
}

func (p *FavoriteListResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecIds", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vecIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.VecIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecIds {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vecIds: ", p), err)
	}
	return err
}

func (p *FavoriteListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FavoriteListResp(%+v)", *p)
}

// Attributes:
//  - VecUpdate
type ProgramUpdateReq struct {
	VecUpdate []*iuct_types.SERIESUPDATE `thrift:"vecUpdate,1,required" db:"vecUpdate" json:"vecUpdate"`
}

func NewProgramUpdateReq() *ProgramUpdateReq {
	return &ProgramUpdateReq{}
}

func (p *ProgramUpdateReq) GetVecUpdate() []*iuct_types.SERIESUPDATE {
	return p.VecUpdate
}
func (p *ProgramUpdateReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetVecUpdate bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetVecUpdate = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetVecUpdate {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecUpdate is not set"))
	}
	return nil
}

func (p *ProgramUpdateReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*iuct_types.SERIESUPDATE, 0, size)
	p.VecUpdate = tSlice
	for i := 0; i < size; i++ {
		_elem22 := &iuct_types.SERIESUPDATE{}
		if err := _elem22.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
		}
		p.VecUpdate = append(p.VecUpdate, _elem22)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ProgramUpdateReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ProgramUpdateReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProgramUpdateReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecUpdate", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vecUpdate: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VecUpdate)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecUpdate {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vecUpdate: ", p), err)
	}
	return err
}

func (p *ProgramUpdateReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProgramUpdateReq(%+v)", *p)
}

// Attributes:
//  - NUid
//  - NPid
//  - NSid
//  - NDeviceType
type UserHitsReq struct {
	NPid        com_types.PRG_ID    `thrift:"nPid,1,required" db:"nPid" json:"nPid"`
	NUid        com_types.USER_ID   `thrift:"nUid,2,required" db:"nUid" json:"nUid"`
	NSid        com_types.SERIES_ID `thrift:"nSid,3,required" db:"nSid" json:"nSid"`
	NDeviceType int32               `thrift:"nDeviceType,4,required" db:"nDeviceType" json:"nDeviceType"`
}

func NewUserHitsReq() *UserHitsReq {
	return &UserHitsReq{}
}

func (p *UserHitsReq) GetNUid() com_types.USER_ID {
	return p.NUid
}

func (p *UserHitsReq) GetNPid() com_types.PRG_ID {
	return p.NPid
}

func (p *UserHitsReq) GetNSid() com_types.SERIES_ID {
	return p.NSid
}

func (p *UserHitsReq) GetNDeviceType() int32 {
	return p.NDeviceType
}
func (p *UserHitsReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNUid bool = false
	var issetNPid bool = false
	var issetNSid bool = false
	var issetNDeviceType bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetNUid = true
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetNPid = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetNSid = true
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
			issetNDeviceType = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNUid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NUid is not set"))
	}
	if !issetNPid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NPid is not set"))
	}
	if !issetNSid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSid is not set"))
	}
	if !issetNDeviceType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NDeviceType is not set"))
	}
	return nil
}

func (p *UserHitsReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := com_types.USER_ID(v)
		p.NUid = temp
	}
	return nil
}

func (p *UserHitsReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := com_types.PRG_ID(v)
		p.NPid = temp
	}
	return nil
}

func (p *UserHitsReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := com_types.SERIES_ID(v)
		p.NSid = temp
	}
	return nil
}

func (p *UserHitsReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NDeviceType = v
	}
	return nil
}

func (p *UserHitsReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserHitsReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserHitsReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nPid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nPid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NPid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nPid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nPid: ", p), err)
	}
	return err
}

func (p *UserHitsReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nUid", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nUid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NUid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nUid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nUid: ", p), err)
	}
	return err
}

func (p *UserHitsReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nSid", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nSid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NSid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nSid (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nSid: ", p), err)
	}
	return err
}

func (p *UserHitsReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nDeviceType", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nDeviceType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NDeviceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nDeviceType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nDeviceType: ", p), err)
	}
	return err
}

func (p *UserHitsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserHitsReq(%+v)", *p)
}

// Attributes:
//  - VecPids
//  - VecDistinctPids
//  - NDeviceType
//  - EPeriod
type MultiHitsReq struct {
	VecPids         []com_types.PRG_ID   `thrift:"vecPids,1,required" db:"vecPids" json:"vecPids"`
	VecDistinctPids [][]com_types.PRG_ID `thrift:"vecDistinctPids,2" db:"vecDistinctPids" json:"vecDistinctPids,omitempty"`
	NDeviceType     *int32               `thrift:"nDeviceType,3" db:"nDeviceType" json:"nDeviceType,omitempty"`
	EPeriod         *int32               `thrift:"ePeriod,4" db:"ePeriod" json:"ePeriod,omitempty"`
}

func NewMultiHitsReq() *MultiHitsReq {
	return &MultiHitsReq{}
}

func (p *MultiHitsReq) GetVecPids() []com_types.PRG_ID {
	return p.VecPids
}

var MultiHitsReq_VecDistinctPids_DEFAULT [][]com_types.PRG_ID

func (p *MultiHitsReq) GetVecDistinctPids() [][]com_types.PRG_ID {
	return p.VecDistinctPids
}

var MultiHitsReq_NDeviceType_DEFAULT int32

func (p *MultiHitsReq) GetNDeviceType() int32 {
	if !p.IsSetNDeviceType() {
		return MultiHitsReq_NDeviceType_DEFAULT
	}
	return *p.NDeviceType
}

var MultiHitsReq_EPeriod_DEFAULT int32

func (p *MultiHitsReq) GetEPeriod() int32 {
	if !p.IsSetEPeriod() {
		return MultiHitsReq_EPeriod_DEFAULT
	}
	return *p.EPeriod
}
func (p *MultiHitsReq) IsSetVecDistinctPids() bool {
	return p.VecDistinctPids != nil
}

func (p *MultiHitsReq) IsSetNDeviceType() bool {
	return p.NDeviceType != nil
}

func (p *MultiHitsReq) IsSetEPeriod() bool {
	return p.EPeriod != nil
}

func (p *MultiHitsReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetVecPids bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetVecPids = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetVecPids {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecPids is not set"))
	}
	return nil
}

func (p *MultiHitsReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]com_types.PRG_ID, 0, size)
	p.VecPids = tSlice
	for i := 0; i < size; i++ {
		var _elem23 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem23 = v
		}
		p.VecPids = append(p.VecPids, _elem23)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiHitsReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]com_types.PRG_ID, 0, size)
	p.VecDistinctPids = tSlice
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]com_types.PRG_ID, 0, size)
		_elem24 := tSlice
		for i := 0; i < size; i++ {
			var _elem25 int64
			if v, err := iprot.ReadI64(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem25 = v
			}
			_elem24 = append(_elem24, _elem25)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.VecDistinctPids = append(p.VecDistinctPids, _elem24)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiHitsReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NDeviceType = &v
	}
	return nil
}

func (p *MultiHitsReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.EPeriod = &v
	}
	return nil
}

func (p *MultiHitsReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MultiHitsReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MultiHitsReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecPids", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vecPids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.VecPids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecPids {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vecPids: ", p), err)
	}
	return err
}

func (p *MultiHitsReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVecDistinctPids() {
		if err := oprot.WriteFieldBegin("vecDistinctPids", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vecDistinctPids: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.LIST, len(p.VecDistinctPids)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.VecDistinctPids {
			if err := oprot.WriteListBegin(thrift.I64, len(v)); err != nil {
				return thrift.PrependError("error writing list begin: ", err)
			}
			for _, v := range v {
				if err := oprot.WriteI64(int64(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return thrift.PrependError("error writing list end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vecDistinctPids: ", p), err)
		}
	}
	return err
}

func (p *MultiHitsReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNDeviceType() {
		if err := oprot.WriteFieldBegin("nDeviceType", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nDeviceType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.NDeviceType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nDeviceType (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nDeviceType: ", p), err)
		}
	}
	return err
}

func (p *MultiHitsReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEPeriod() {
		if err := oprot.WriteFieldBegin("ePeriod", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ePeriod: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.EPeriod)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ePeriod (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ePeriod: ", p), err)
		}
	}
	return err
}

func (p *MultiHitsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiHitsReq(%+v)", *p)
}

// Attributes:
//  - StRetComm
//  - VecHitsNums
//  - VecPids
type MultiHitsResp struct {
	StRetComm   *IuctRespBase `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	VecHitsNums []int32       `thrift:"vecHitsNums,2,required" db:"vecHitsNums" json:"vecHitsNums"`
	VecPids     []int64       `thrift:"vecPids,3,required" db:"vecPids" json:"vecPids"`
}

func NewMultiHitsResp() *MultiHitsResp {
	return &MultiHitsResp{}
}

var MultiHitsResp_StRetComm_DEFAULT *IuctRespBase

func (p *MultiHitsResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return MultiHitsResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

func (p *MultiHitsResp) GetVecHitsNums() []int32 {
	return p.VecHitsNums
}

func (p *MultiHitsResp) GetVecPids() []int64 {
	return p.VecPids
}
func (p *MultiHitsResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *MultiHitsResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetVecHitsNums bool = false
	var issetVecPids bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetVecHitsNums = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetVecPids = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetVecHitsNums {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecHitsNums is not set"))
	}
	if !issetVecPids {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecPids is not set"))
	}
	return nil
}

func (p *MultiHitsResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *MultiHitsResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.VecHitsNums = tSlice
	for i := 0; i < size; i++ {
		var _elem26 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem26 = v
		}
		p.VecHitsNums = append(p.VecHitsNums, _elem26)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiHitsResp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.VecPids = tSlice
	for i := 0; i < size; i++ {
		var _elem27 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem27 = v
		}
		p.VecPids = append(p.VecPids, _elem27)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiHitsResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MultiHitsResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MultiHitsResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *MultiHitsResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecHitsNums", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vecHitsNums: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.VecHitsNums)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecHitsNums {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vecHitsNums: ", p), err)
	}
	return err
}

func (p *MultiHitsResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecPids", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vecPids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.VecPids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecPids {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vecPids: ", p), err)
	}
	return err
}

func (p *MultiHitsResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiHitsResp(%+v)", *p)
}

// Attributes:
//  - StRetComm
//  - VecPraiseNums
//  - VecDegradeNums
type MultiPraiseResp struct {
	StRetComm      *IuctRespBase `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	VecPraiseNums  []int32       `thrift:"vecPraiseNums,2,required" db:"vecPraiseNums" json:"vecPraiseNums"`
	VecDegradeNums []int32       `thrift:"vecDegradeNums,3,required" db:"vecDegradeNums" json:"vecDegradeNums"`
}

func NewMultiPraiseResp() *MultiPraiseResp {
	return &MultiPraiseResp{}
}

var MultiPraiseResp_StRetComm_DEFAULT *IuctRespBase

func (p *MultiPraiseResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return MultiPraiseResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

func (p *MultiPraiseResp) GetVecPraiseNums() []int32 {
	return p.VecPraiseNums
}

func (p *MultiPraiseResp) GetVecDegradeNums() []int32 {
	return p.VecDegradeNums
}
func (p *MultiPraiseResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *MultiPraiseResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetVecPraiseNums bool = false
	var issetVecDegradeNums bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetVecPraiseNums = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetVecDegradeNums = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetVecPraiseNums {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecPraiseNums is not set"))
	}
	if !issetVecDegradeNums {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecDegradeNums is not set"))
	}
	return nil
}

func (p *MultiPraiseResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *MultiPraiseResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.VecPraiseNums = tSlice
	for i := 0; i < size; i++ {
		var _elem28 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem28 = v
		}
		p.VecPraiseNums = append(p.VecPraiseNums, _elem28)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiPraiseResp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.VecDegradeNums = tSlice
	for i := 0; i < size; i++ {
		var _elem29 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem29 = v
		}
		p.VecDegradeNums = append(p.VecDegradeNums, _elem29)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiPraiseResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MultiPraiseResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MultiPraiseResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *MultiPraiseResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecPraiseNums", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vecPraiseNums: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.VecPraiseNums)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecPraiseNums {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vecPraiseNums: ", p), err)
	}
	return err
}

func (p *MultiPraiseResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecDegradeNums", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vecDegradeNums: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.VecDegradeNums)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecDegradeNums {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vecDegradeNums: ", p), err)
	}
	return err
}

func (p *MultiPraiseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiPraiseResp(%+v)", *p)
}

// Attributes:
//  - StRetComm
//  - StDemand
type DemandResp struct {
	StRetComm *IuctRespBase              `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	StDemand  *iuct_types.PROGRAM_DEMAND `thrift:"stDemand,2,required" db:"stDemand" json:"stDemand"`
}

func NewDemandResp() *DemandResp {
	return &DemandResp{}
}

var DemandResp_StRetComm_DEFAULT *IuctRespBase

func (p *DemandResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return DemandResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

var DemandResp_StDemand_DEFAULT *iuct_types.PROGRAM_DEMAND

func (p *DemandResp) GetStDemand() *iuct_types.PROGRAM_DEMAND {
	if !p.IsSetStDemand() {
		return DemandResp_StDemand_DEFAULT
	}
	return p.StDemand
}
func (p *DemandResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *DemandResp) IsSetStDemand() bool {
	return p.StDemand != nil
}

func (p *DemandResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetStDemand bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetStDemand = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetStDemand {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StDemand is not set"))
	}
	return nil
}

func (p *DemandResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *DemandResp) ReadField2(iprot thrift.TProtocol) error {
	p.StDemand = &iuct_types.PROGRAM_DEMAND{}
	if err := p.StDemand.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StDemand), err)
	}
	return nil
}

func (p *DemandResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DemandResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DemandResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *DemandResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stDemand", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stDemand: ", p), err)
	}
	if err := p.StDemand.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StDemand), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stDemand: ", p), err)
	}
	return err
}

func (p *DemandResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DemandResp(%+v)", *p)
}

// Attributes:
//  - VecPids
//  - VecSids
//  - NDeviceType
//  - EPeriod
type MultipleDemandReq struct {
	VecPids     []int64 `thrift:"vecPids,1,required" db:"vecPids" json:"vecPids"`
	VecSids     []int64 `thrift:"vecSids,2,required" db:"vecSids" json:"vecSids"`
	NDeviceType *int32  `thrift:"nDeviceType,3" db:"nDeviceType" json:"nDeviceType,omitempty"`
	EPeriod     *int32  `thrift:"ePeriod,4" db:"ePeriod" json:"ePeriod,omitempty"`
}

func NewMultipleDemandReq() *MultipleDemandReq {
	return &MultipleDemandReq{}
}

func (p *MultipleDemandReq) GetVecPids() []int64 {
	return p.VecPids
}

func (p *MultipleDemandReq) GetVecSids() []int64 {
	return p.VecSids
}

var MultipleDemandReq_NDeviceType_DEFAULT int32

func (p *MultipleDemandReq) GetNDeviceType() int32 {
	if !p.IsSetNDeviceType() {
		return MultipleDemandReq_NDeviceType_DEFAULT
	}
	return *p.NDeviceType
}

var MultipleDemandReq_EPeriod_DEFAULT int32

func (p *MultipleDemandReq) GetEPeriod() int32 {
	if !p.IsSetEPeriod() {
		return MultipleDemandReq_EPeriod_DEFAULT
	}
	return *p.EPeriod
}
func (p *MultipleDemandReq) IsSetNDeviceType() bool {
	return p.NDeviceType != nil
}

func (p *MultipleDemandReq) IsSetEPeriod() bool {
	return p.EPeriod != nil
}

func (p *MultipleDemandReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetVecPids bool = false
	var issetVecSids bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetVecPids = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetVecSids = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetVecPids {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecPids is not set"))
	}
	if !issetVecSids {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecSids is not set"))
	}
	return nil
}

func (p *MultipleDemandReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.VecPids = tSlice
	for i := 0; i < size; i++ {
		var _elem30 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem30 = v
		}
		p.VecPids = append(p.VecPids, _elem30)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultipleDemandReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.VecSids = tSlice
	for i := 0; i < size; i++ {
		var _elem31 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem31 = v
		}
		p.VecSids = append(p.VecSids, _elem31)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultipleDemandReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NDeviceType = &v
	}
	return nil
}

func (p *MultipleDemandReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.EPeriod = &v
	}
	return nil
}

func (p *MultipleDemandReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MultipleDemandReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MultipleDemandReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecPids", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vecPids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.VecPids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecPids {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vecPids: ", p), err)
	}
	return err
}

func (p *MultipleDemandReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecSids", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vecSids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.VecSids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecSids {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vecSids: ", p), err)
	}
	return err
}

func (p *MultipleDemandReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNDeviceType() {
		if err := oprot.WriteFieldBegin("nDeviceType", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nDeviceType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.NDeviceType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nDeviceType (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nDeviceType: ", p), err)
		}
	}
	return err
}

func (p *MultipleDemandReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEPeriod() {
		if err := oprot.WriteFieldBegin("ePeriod", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ePeriod: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.EPeriod)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ePeriod (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ePeriod: ", p), err)
		}
	}
	return err
}

func (p *MultipleDemandReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultipleDemandReq(%+v)", *p)
}

// Attributes:
//  - StRetComm
//  - VecDemands
type MultipleDemandResp struct {
	StRetComm  *IuctRespBase                `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	VecDemands []*iuct_types.PROGRAM_DEMAND `thrift:"vecDemands,2,required" db:"vecDemands" json:"vecDemands"`
}

func NewMultipleDemandResp() *MultipleDemandResp {
	return &MultipleDemandResp{}
}

var MultipleDemandResp_StRetComm_DEFAULT *IuctRespBase

func (p *MultipleDemandResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return MultipleDemandResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

func (p *MultipleDemandResp) GetVecDemands() []*iuct_types.PROGRAM_DEMAND {
	return p.VecDemands
}
func (p *MultipleDemandResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *MultipleDemandResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetVecDemands bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetVecDemands = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetVecDemands {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecDemands is not set"))
	}
	return nil
}

func (p *MultipleDemandResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *MultipleDemandResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*iuct_types.PROGRAM_DEMAND, 0, size)
	p.VecDemands = tSlice
	for i := 0; i < size; i++ {
		_elem32 := &iuct_types.PROGRAM_DEMAND{}
		if err := _elem32.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem32), err)
		}
		p.VecDemands = append(p.VecDemands, _elem32)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultipleDemandResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MultipleDemandResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MultipleDemandResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *MultipleDemandResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecDemands", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vecDemands: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VecDemands)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecDemands {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vecDemands: ", p), err)
	}
	return err
}

func (p *MultipleDemandResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultipleDemandResp(%+v)", *p)
}

// Attributes:
//  - NUid
//  - VecLabels
type UserColumnReq struct {
	NUid      int64                     `thrift:"nUid,1,required" db:"nUid" json:"nUid"`
	VecLabels []com_types.USER_LABEL_ID `thrift:"vecLabels,2,required" db:"vecLabels" json:"vecLabels"`
}

func NewUserColumnReq() *UserColumnReq {
	return &UserColumnReq{}
}

func (p *UserColumnReq) GetNUid() int64 {
	return p.NUid
}

func (p *UserColumnReq) GetVecLabels() []com_types.USER_LABEL_ID {
	return p.VecLabels
}
func (p *UserColumnReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNUid bool = false
	var issetVecLabels bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetNUid = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetVecLabels = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNUid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NUid is not set"))
	}
	if !issetVecLabels {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecLabels is not set"))
	}
	return nil
}

func (p *UserColumnReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NUid = v
	}
	return nil
}

func (p *UserColumnReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]com_types.USER_LABEL_ID, 0, size)
	p.VecLabels = tSlice
	for i := 0; i < size; i++ {
		var _elem33 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem33 = v
		}
		p.VecLabels = append(p.VecLabels, _elem33)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserColumnReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserColumnReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserColumnReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nUid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nUid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NUid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nUid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nUid: ", p), err)
	}
	return err
}

func (p *UserColumnReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecLabels", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vecLabels: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.VecLabels)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecLabels {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vecLabels: ", p), err)
	}
	return err
}

func (p *UserColumnReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserColumnReq(%+v)", *p)
}

// Attributes:
//  - StRetComm
//  - MapColumnData
type UserColumnResp struct {
	StRetComm     *IuctRespBase                                  `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	MapColumnData map[com_types.PLB_ID]*iuct_types.ColumnSetting `thrift:"mapColumnData,2,required" db:"mapColumnData" json:"mapColumnData"`
}

func NewUserColumnResp() *UserColumnResp {
	return &UserColumnResp{}
}

var UserColumnResp_StRetComm_DEFAULT *IuctRespBase

func (p *UserColumnResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return UserColumnResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

func (p *UserColumnResp) GetMapColumnData() map[com_types.PLB_ID]*iuct_types.ColumnSetting {
	return p.MapColumnData
}
func (p *UserColumnResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *UserColumnResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetMapColumnData bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetMapColumnData = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetMapColumnData {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MapColumnData is not set"))
	}
	return nil
}

func (p *UserColumnResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *UserColumnResp) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[com_types.PLB_ID]*iuct_types.ColumnSetting, size)
	p.MapColumnData = tMap
	for i := 0; i < size; i++ {
		var _key34 com_types.PLB_ID
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := com_types.PLB_ID(v)
			_key34 = temp
		}
		_val35 := &iuct_types.ColumnSetting{}
		if err := _val35.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val35), err)
		}
		p.MapColumnData[_key34] = _val35
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UserColumnResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserColumnResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserColumnResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *UserColumnResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mapColumnData", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mapColumnData: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I64, thrift.STRUCT, len(p.MapColumnData)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.MapColumnData {
		if err := oprot.WriteI64(int64(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mapColumnData: ", p), err)
	}
	return err
}

func (p *UserColumnResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserColumnResp(%+v)", *p)
}

// Attributes:
//  - StOrder
//  - NIsCover
type OrderReq struct {
	StOrder  *iuct_types.USER_ORDER `thrift:"stOrder,1,required" db:"stOrder" json:"stOrder"`
	NIsCover *int32                 `thrift:"nIsCover,2" db:"nIsCover" json:"nIsCover,omitempty"`
}

func NewOrderReq() *OrderReq {
	return &OrderReq{}
}

var OrderReq_StOrder_DEFAULT *iuct_types.USER_ORDER

func (p *OrderReq) GetStOrder() *iuct_types.USER_ORDER {
	if !p.IsSetStOrder() {
		return OrderReq_StOrder_DEFAULT
	}
	return p.StOrder
}

var OrderReq_NIsCover_DEFAULT int32

func (p *OrderReq) GetNIsCover() int32 {
	if !p.IsSetNIsCover() {
		return OrderReq_NIsCover_DEFAULT
	}
	return *p.NIsCover
}
func (p *OrderReq) IsSetStOrder() bool {
	return p.StOrder != nil
}

func (p *OrderReq) IsSetNIsCover() bool {
	return p.NIsCover != nil
}

func (p *OrderReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStOrder bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStOrder = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStOrder {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StOrder is not set"))
	}
	return nil
}

func (p *OrderReq) ReadField1(iprot thrift.TProtocol) error {
	p.StOrder = &iuct_types.USER_ORDER{}
	if err := p.StOrder.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StOrder), err)
	}
	return nil
}

func (p *OrderReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NIsCover = &v
	}
	return nil
}

func (p *OrderReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OrderReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OrderReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stOrder", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stOrder: ", p), err)
	}
	if err := p.StOrder.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StOrder), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stOrder: ", p), err)
	}
	return err
}

func (p *OrderReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNIsCover() {
		if err := oprot.WriteFieldBegin("nIsCover", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nIsCover: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.NIsCover)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nIsCover (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nIsCover: ", p), err)
		}
	}
	return err
}

func (p *OrderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderReq(%+v)", *p)
}

// Attributes:
//  - NUid
//  - VecOrder
type MultiIsOrderReq struct {
	NUid     int64               `thrift:"nUid,1,required" db:"nUid" json:"nUid"`
	VecOrder []*iuct_types.ORDER `thrift:"vecOrder,2,required" db:"vecOrder" json:"vecOrder"`
}

func NewMultiIsOrderReq() *MultiIsOrderReq {
	return &MultiIsOrderReq{}
}

func (p *MultiIsOrderReq) GetNUid() int64 {
	return p.NUid
}

func (p *MultiIsOrderReq) GetVecOrder() []*iuct_types.ORDER {
	return p.VecOrder
}
func (p *MultiIsOrderReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNUid bool = false
	var issetVecOrder bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetNUid = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetVecOrder = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNUid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NUid is not set"))
	}
	if !issetVecOrder {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecOrder is not set"))
	}
	return nil
}

func (p *MultiIsOrderReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NUid = v
	}
	return nil
}

func (p *MultiIsOrderReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*iuct_types.ORDER, 0, size)
	p.VecOrder = tSlice
	for i := 0; i < size; i++ {
		_elem36 := &iuct_types.ORDER{}
		if err := _elem36.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem36), err)
		}
		p.VecOrder = append(p.VecOrder, _elem36)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiIsOrderReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MultiIsOrderReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MultiIsOrderReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nUid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nUid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NUid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nUid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nUid: ", p), err)
	}
	return err
}

func (p *MultiIsOrderReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecOrder", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vecOrder: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VecOrder)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecOrder {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vecOrder: ", p), err)
	}
	return err
}

func (p *MultiIsOrderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiIsOrderReq(%+v)", *p)
}

// Attributes:
//  - StRetComm
//  - NTotal
//  - VecOrder
type OrderListResp struct {
	StRetComm *IuctRespBase            `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	NTotal    int32                    `thrift:"nTotal,2,required" db:"nTotal" json:"nTotal"`
	VecOrder  []*iuct_types.USER_ORDER `thrift:"vecOrder,3,required" db:"vecOrder" json:"vecOrder"`
}

func NewOrderListResp() *OrderListResp {
	return &OrderListResp{}
}

var OrderListResp_StRetComm_DEFAULT *IuctRespBase

func (p *OrderListResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return OrderListResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

func (p *OrderListResp) GetNTotal() int32 {
	return p.NTotal
}

func (p *OrderListResp) GetVecOrder() []*iuct_types.USER_ORDER {
	return p.VecOrder
}
func (p *OrderListResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *OrderListResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetNTotal bool = false
	var issetVecOrder bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetNTotal = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetVecOrder = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetNTotal {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NTotal is not set"))
	}
	if !issetVecOrder {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecOrder is not set"))
	}
	return nil
}

func (p *OrderListResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *OrderListResp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NTotal = v
	}
	return nil
}

func (p *OrderListResp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*iuct_types.USER_ORDER, 0, size)
	p.VecOrder = tSlice
	for i := 0; i < size; i++ {
		_elem37 := &iuct_types.USER_ORDER{}
		if err := _elem37.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem37), err)
		}
		p.VecOrder = append(p.VecOrder, _elem37)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OrderListResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OrderListResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OrderListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *OrderListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nTotal", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nTotal: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NTotal)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nTotal (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nTotal: ", p), err)
	}
	return err
}

func (p *OrderListResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecOrder", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vecOrder: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VecOrder)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecOrder {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vecOrder: ", p), err)
	}
	return err
}

func (p *OrderListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderListResp(%+v)", *p)
}

// Attributes:
//  - StShare
//  - NPlatForm
type ShareAddReq struct {
	StShare   *iuct_types.SHARE_INFO `thrift:"stShare,1,required" db:"stShare" json:"stShare"`
	NPlatForm int32                  `thrift:"nPlatForm,2,required" db:"nPlatForm" json:"nPlatForm"`
}

func NewShareAddReq() *ShareAddReq {
	return &ShareAddReq{}
}

var ShareAddReq_StShare_DEFAULT *iuct_types.SHARE_INFO

func (p *ShareAddReq) GetStShare() *iuct_types.SHARE_INFO {
	if !p.IsSetStShare() {
		return ShareAddReq_StShare_DEFAULT
	}
	return p.StShare
}

func (p *ShareAddReq) GetNPlatForm() int32 {
	return p.NPlatForm
}
func (p *ShareAddReq) IsSetStShare() bool {
	return p.StShare != nil
}

func (p *ShareAddReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStShare bool = false
	var issetNPlatForm bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStShare = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetNPlatForm = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStShare {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StShare is not set"))
	}
	if !issetNPlatForm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NPlatForm is not set"))
	}
	return nil
}

func (p *ShareAddReq) ReadField1(iprot thrift.TProtocol) error {
	p.StShare = &iuct_types.SHARE_INFO{}
	if err := p.StShare.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StShare), err)
	}
	return nil
}

func (p *ShareAddReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NPlatForm = v
	}
	return nil
}

func (p *ShareAddReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ShareAddReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ShareAddReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stShare", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stShare: ", p), err)
	}
	if err := p.StShare.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StShare), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stShare: ", p), err)
	}
	return err
}

func (p *ShareAddReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nPlatForm", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nPlatForm: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NPlatForm)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nPlatForm (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nPlatForm: ", p), err)
	}
	return err
}

func (p *ShareAddReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShareAddReq(%+v)", *p)
}

// Attributes:
//  - StRetComm
//  - VecShares
type ShareListResp struct {
	StRetComm *IuctRespBase            `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	VecShares []*iuct_types.SHARE_INFO `thrift:"vecShares,2,required" db:"vecShares" json:"vecShares"`
}

func NewShareListResp() *ShareListResp {
	return &ShareListResp{}
}

var ShareListResp_StRetComm_DEFAULT *IuctRespBase

func (p *ShareListResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return ShareListResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

func (p *ShareListResp) GetVecShares() []*iuct_types.SHARE_INFO {
	return p.VecShares
}
func (p *ShareListResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *ShareListResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetVecShares bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetVecShares = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetVecShares {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecShares is not set"))
	}
	return nil
}

func (p *ShareListResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *ShareListResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*iuct_types.SHARE_INFO, 0, size)
	p.VecShares = tSlice
	for i := 0; i < size; i++ {
		_elem38 := &iuct_types.SHARE_INFO{}
		if err := _elem38.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem38), err)
		}
		p.VecShares = append(p.VecShares, _elem38)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ShareListResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ShareListResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ShareListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *ShareListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecShares", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vecShares: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VecShares)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecShares {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vecShares: ", p), err)
	}
	return err
}

func (p *ShareListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShareListResp(%+v)", *p)
}

// Attributes:
//  - StRetComm
//  - VecComments
//  - VecRefComments
type CommentListResp struct {
	StRetComm      *IuctRespBase                   `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	VecComments    []*iuct_types.USER_COMMENT_INFO `thrift:"vecComments,2,required" db:"vecComments" json:"vecComments"`
	VecRefComments []*iuct_types.USER_COMMENT_INFO `thrift:"vecRefComments,3,required" db:"vecRefComments" json:"vecRefComments"`
}

func NewCommentListResp() *CommentListResp {
	return &CommentListResp{}
}

var CommentListResp_StRetComm_DEFAULT *IuctRespBase

func (p *CommentListResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return CommentListResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

func (p *CommentListResp) GetVecComments() []*iuct_types.USER_COMMENT_INFO {
	return p.VecComments
}

func (p *CommentListResp) GetVecRefComments() []*iuct_types.USER_COMMENT_INFO {
	return p.VecRefComments
}
func (p *CommentListResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *CommentListResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetVecComments bool = false
	var issetVecRefComments bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetVecComments = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetVecRefComments = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetVecComments {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecComments is not set"))
	}
	if !issetVecRefComments {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecRefComments is not set"))
	}
	return nil
}

func (p *CommentListResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *CommentListResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*iuct_types.USER_COMMENT_INFO, 0, size)
	p.VecComments = tSlice
	for i := 0; i < size; i++ {
		_elem39 := &iuct_types.USER_COMMENT_INFO{}
		if err := _elem39.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem39), err)
		}
		p.VecComments = append(p.VecComments, _elem39)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *CommentListResp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*iuct_types.USER_COMMENT_INFO, 0, size)
	p.VecRefComments = tSlice
	for i := 0; i < size; i++ {
		_elem40 := &iuct_types.USER_COMMENT_INFO{}
		if err := _elem40.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem40), err)
		}
		p.VecRefComments = append(p.VecRefComments, _elem40)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *CommentListResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CommentListResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CommentListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *CommentListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecComments", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vecComments: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VecComments)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecComments {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vecComments: ", p), err)
	}
	return err
}

func (p *CommentListResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecRefComments", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vecRefComments: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VecRefComments)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecRefComments {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vecRefComments: ", p), err)
	}
	return err
}

func (p *CommentListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentListResp(%+v)", *p)
}

// Attributes:
//  - StRetComm
//  - VecInfo
type ProgramRankInfoResp struct {
	StRetComm *IuctRespBase          `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	VecInfo   []*iuct_types.RankInfo `thrift:"vecInfo,2,required" db:"vecInfo" json:"vecInfo"`
}

func NewProgramRankInfoResp() *ProgramRankInfoResp {
	return &ProgramRankInfoResp{}
}

var ProgramRankInfoResp_StRetComm_DEFAULT *IuctRespBase

func (p *ProgramRankInfoResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return ProgramRankInfoResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

func (p *ProgramRankInfoResp) GetVecInfo() []*iuct_types.RankInfo {
	return p.VecInfo
}
func (p *ProgramRankInfoResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *ProgramRankInfoResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetVecInfo bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetVecInfo = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetVecInfo {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecInfo is not set"))
	}
	return nil
}

func (p *ProgramRankInfoResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *ProgramRankInfoResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*iuct_types.RankInfo, 0, size)
	p.VecInfo = tSlice
	for i := 0; i < size; i++ {
		_elem41 := &iuct_types.RankInfo{}
		if err := _elem41.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem41), err)
		}
		p.VecInfo = append(p.VecInfo, _elem41)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ProgramRankInfoResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ProgramRankInfoResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProgramRankInfoResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *ProgramRankInfoResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecInfo", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vecInfo: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VecInfo)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecInfo {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vecInfo: ", p), err)
	}
	return err
}

func (p *ProgramRankInfoResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProgramRankInfoResp(%+v)", *p)
}

// Attributes:
//  - ERankType
//  - EOp
//  - NType
//  - NContentType
//  - NSubType
//  - EPeriod
type RankListReq struct {
	ERankType    int32 `thrift:"eRankType,1,required" db:"eRankType" json:"eRankType"`
	EOp          int32 `thrift:"eOp,2,required" db:"eOp" json:"eOp"`
	NType        int32 `thrift:"nType,3,required" db:"nType" json:"nType"`
	NContentType int32 `thrift:"nContentType,4,required" db:"nContentType" json:"nContentType"`
	NSubType     int32 `thrift:"nSubType,5,required" db:"nSubType" json:"nSubType"`
	EPeriod      int32 `thrift:"ePeriod,6,required" db:"ePeriod" json:"ePeriod"`
}

func NewRankListReq() *RankListReq {
	return &RankListReq{}
}

func (p *RankListReq) GetERankType() int32 {
	return p.ERankType
}

func (p *RankListReq) GetEOp() int32 {
	return p.EOp
}

func (p *RankListReq) GetNType() int32 {
	return p.NType
}

func (p *RankListReq) GetNContentType() int32 {
	return p.NContentType
}

func (p *RankListReq) GetNSubType() int32 {
	return p.NSubType
}

func (p *RankListReq) GetEPeriod() int32 {
	return p.EPeriod
}
func (p *RankListReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetERankType bool = false
	var issetEOp bool = false
	var issetNType bool = false
	var issetNContentType bool = false
	var issetNSubType bool = false
	var issetEPeriod bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetERankType = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetEOp = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetNType = true
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
			issetNContentType = true
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
			issetNSubType = true
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
			issetEPeriod = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetERankType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ERankType is not set"))
	}
	if !issetEOp {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EOp is not set"))
	}
	if !issetNType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NType is not set"))
	}
	if !issetNContentType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NContentType is not set"))
	}
	if !issetNSubType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSubType is not set"))
	}
	if !issetEPeriod {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EPeriod is not set"))
	}
	return nil
}

func (p *RankListReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ERankType = v
	}
	return nil
}

func (p *RankListReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EOp = v
	}
	return nil
}

func (p *RankListReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NType = v
	}
	return nil
}

func (p *RankListReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NContentType = v
	}
	return nil
}

func (p *RankListReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.NSubType = v
	}
	return nil
}

func (p *RankListReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.EPeriod = v
	}
	return nil
}

func (p *RankListReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RankListReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RankListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("eRankType", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:eRankType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ERankType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.eRankType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:eRankType: ", p), err)
	}
	return err
}

func (p *RankListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("eOp", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:eOp: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EOp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.eOp (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:eOp: ", p), err)
	}
	return err
}

func (p *RankListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nType", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nType: ", p), err)
	}
	return err
}

func (p *RankListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nContentType", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nContentType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NContentType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nContentType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nContentType: ", p), err)
	}
	return err
}

func (p *RankListReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nSubType", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nSubType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NSubType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nSubType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nSubType: ", p), err)
	}
	return err
}

func (p *RankListReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ePeriod", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ePeriod: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EPeriod)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ePeriod (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ePeriod: ", p), err)
	}
	return err
}

func (p *RankListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RankListReq(%+v)", *p)
}

// Attributes:
//  - StRetComm
//  - VecRank
type RankListResp struct {
	StRetComm *IuctRespBase          `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	VecRank   []*iuct_types.RankItem `thrift:"vecRank,2,required" db:"vecRank" json:"vecRank"`
}

func NewRankListResp() *RankListResp {
	return &RankListResp{}
}

var RankListResp_StRetComm_DEFAULT *IuctRespBase

func (p *RankListResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return RankListResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

func (p *RankListResp) GetVecRank() []*iuct_types.RankItem {
	return p.VecRank
}
func (p *RankListResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *RankListResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetVecRank bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetVecRank = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetVecRank {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecRank is not set"))
	}
	return nil
}

func (p *RankListResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *RankListResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*iuct_types.RankItem, 0, size)
	p.VecRank = tSlice
	for i := 0; i < size; i++ {
		_elem42 := &iuct_types.RankItem{}
		if err := _elem42.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem42), err)
		}
		p.VecRank = append(p.VecRank, _elem42)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RankListResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RankListResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RankListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *RankListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecRank", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vecRank: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VecRank)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecRank {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vecRank: ", p), err)
	}
	return err
}

func (p *RankListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RankListResp(%+v)", *p)
}

// Attributes:
//  - StRetComm
//  - VecSearchHistorys
type SearchHistoryListResp struct {
	StRetComm         *IuctRespBase                     `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	VecSearchHistorys []*iuct_types.USER_SEARCH_HISTORY `thrift:"vecSearchHistorys,2,required" db:"vecSearchHistorys" json:"vecSearchHistorys"`
}

func NewSearchHistoryListResp() *SearchHistoryListResp {
	return &SearchHistoryListResp{}
}

var SearchHistoryListResp_StRetComm_DEFAULT *IuctRespBase

func (p *SearchHistoryListResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return SearchHistoryListResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

func (p *SearchHistoryListResp) GetVecSearchHistorys() []*iuct_types.USER_SEARCH_HISTORY {
	return p.VecSearchHistorys
}
func (p *SearchHistoryListResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *SearchHistoryListResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetVecSearchHistorys bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetVecSearchHistorys = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetVecSearchHistorys {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecSearchHistorys is not set"))
	}
	return nil
}

func (p *SearchHistoryListResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *SearchHistoryListResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*iuct_types.USER_SEARCH_HISTORY, 0, size)
	p.VecSearchHistorys = tSlice
	for i := 0; i < size; i++ {
		_elem43 := &iuct_types.USER_SEARCH_HISTORY{}
		if err := _elem43.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem43), err)
		}
		p.VecSearchHistorys = append(p.VecSearchHistorys, _elem43)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SearchHistoryListResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SearchHistoryListResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SearchHistoryListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *SearchHistoryListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecSearchHistorys", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vecSearchHistorys: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VecSearchHistorys)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecSearchHistorys {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vecSearchHistorys: ", p), err)
	}
	return err
}

func (p *SearchHistoryListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchHistoryListResp(%+v)", *p)
}

// ************************************************
// 	请求删除用户数据数据结构
// 	nUid			用户id
// 	vecIds			历史id列表
// *************************************************
//
// Attributes:
//  - NUid
//  - VecIds
type DelIdsReq struct {
	NUid   int64   `thrift:"nUid,1,required" db:"nUid" json:"nUid"`
	VecIds []int64 `thrift:"vecIds,2,required" db:"vecIds" json:"vecIds"`
}

func NewDelIdsReq() *DelIdsReq {
	return &DelIdsReq{}
}

func (p *DelIdsReq) GetNUid() int64 {
	return p.NUid
}

func (p *DelIdsReq) GetVecIds() []int64 {
	return p.VecIds
}
func (p *DelIdsReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNUid bool = false
	var issetVecIds bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetNUid = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetVecIds = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNUid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NUid is not set"))
	}
	if !issetVecIds {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecIds is not set"))
	}
	return nil
}

func (p *DelIdsReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NUid = v
	}
	return nil
}

func (p *DelIdsReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.VecIds = tSlice
	for i := 0; i < size; i++ {
		var _elem44 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem44 = v
		}
		p.VecIds = append(p.VecIds, _elem44)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DelIdsReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DelIdsReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DelIdsReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nUid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nUid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NUid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nUid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nUid: ", p), err)
	}
	return err
}

func (p *DelIdsReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecIds", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vecIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.VecIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecIds {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vecIds: ", p), err)
	}
	return err
}

func (p *DelIdsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DelIdsReq(%+v)", *p)
}

// Attributes:
//  - StRetComm
//  - VecSubjects
type GuessSubjResp struct {
	StRetComm   *IuctRespBase                 `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	VecSubjects []*iuct_types.GuessSubjSingle `thrift:"vecSubjects,2,required" db:"vecSubjects" json:"vecSubjects"`
}

func NewGuessSubjResp() *GuessSubjResp {
	return &GuessSubjResp{}
}

var GuessSubjResp_StRetComm_DEFAULT *IuctRespBase

func (p *GuessSubjResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return GuessSubjResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

func (p *GuessSubjResp) GetVecSubjects() []*iuct_types.GuessSubjSingle {
	return p.VecSubjects
}
func (p *GuessSubjResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *GuessSubjResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetVecSubjects bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetVecSubjects = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetVecSubjects {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecSubjects is not set"))
	}
	return nil
}

func (p *GuessSubjResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *GuessSubjResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*iuct_types.GuessSubjSingle, 0, size)
	p.VecSubjects = tSlice
	for i := 0; i < size; i++ {
		_elem45 := &iuct_types.GuessSubjSingle{}
		if err := _elem45.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem45), err)
		}
		p.VecSubjects = append(p.VecSubjects, _elem45)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GuessSubjResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GuessSubjResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GuessSubjResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *GuessSubjResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecSubjects", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vecSubjects: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VecSubjects)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecSubjects {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vecSubjects: ", p), err)
	}
	return err
}

func (p *GuessSubjResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GuessSubjResp(%+v)", *p)
}

// ************************************************
// 	请求用户节目数据结构
// 	nPid			节目id
// 	nUid			用户id
// 	nSid			节目剧集id
// 	nDeviceType		设备类型
// 	bFavs			获取是否收藏
// 	bPraise			获取是否点踩点赞
// 	bHistory		获取历史
// 	bUserScore		获取用户对节目的评分
// 	strSp			节目提供商, 获取历史时必填
// 	ePeriod			获取周期 0 所有; 1 今天; 2 昨天
// *************************************************
//
// Attributes:
//  - NPid
//  - NUid
//  - NSid
//  - NDeviceType
//  - BFavs
//  - BPraise
//  - BHistory
//  - BUserScore
//  - StrSp
//  - EPeriod
type UserProgramReq struct {
	NPid        int64   `thrift:"nPid,1,required" db:"nPid" json:"nPid"`
	NUid        int64   `thrift:"nUid,2,required" db:"nUid" json:"nUid"`
	NSid        int64   `thrift:"nSid,3,required" db:"nSid" json:"nSid"`
	NDeviceType *int32  `thrift:"nDeviceType,4" db:"nDeviceType" json:"nDeviceType,omitempty"`
	BFavs       *bool   `thrift:"bFavs,5" db:"bFavs" json:"bFavs,omitempty"`
	BPraise     *bool   `thrift:"bPraise,6" db:"bPraise" json:"bPraise,omitempty"`
	BHistory    *bool   `thrift:"bHistory,7" db:"bHistory" json:"bHistory,omitempty"`
	BUserScore  *bool   `thrift:"bUserScore,8" db:"bUserScore" json:"bUserScore,omitempty"`
	StrSp       *string `thrift:"strSp,9" db:"strSp" json:"strSp,omitempty"`
	EPeriod     *int32  `thrift:"ePeriod,10" db:"ePeriod" json:"ePeriod,omitempty"`
}

func NewUserProgramReq() *UserProgramReq {
	return &UserProgramReq{}
}

func (p *UserProgramReq) GetNPid() int64 {
	return p.NPid
}

func (p *UserProgramReq) GetNUid() int64 {
	return p.NUid
}

func (p *UserProgramReq) GetNSid() int64 {
	return p.NSid
}

var UserProgramReq_NDeviceType_DEFAULT int32

func (p *UserProgramReq) GetNDeviceType() int32 {
	if !p.IsSetNDeviceType() {
		return UserProgramReq_NDeviceType_DEFAULT
	}
	return *p.NDeviceType
}

var UserProgramReq_BFavs_DEFAULT bool

func (p *UserProgramReq) GetBFavs() bool {
	if !p.IsSetBFavs() {
		return UserProgramReq_BFavs_DEFAULT
	}
	return *p.BFavs
}

var UserProgramReq_BPraise_DEFAULT bool

func (p *UserProgramReq) GetBPraise() bool {
	if !p.IsSetBPraise() {
		return UserProgramReq_BPraise_DEFAULT
	}
	return *p.BPraise
}

var UserProgramReq_BHistory_DEFAULT bool

func (p *UserProgramReq) GetBHistory() bool {
	if !p.IsSetBHistory() {
		return UserProgramReq_BHistory_DEFAULT
	}
	return *p.BHistory
}

var UserProgramReq_BUserScore_DEFAULT bool

func (p *UserProgramReq) GetBUserScore() bool {
	if !p.IsSetBUserScore() {
		return UserProgramReq_BUserScore_DEFAULT
	}
	return *p.BUserScore
}

var UserProgramReq_StrSp_DEFAULT string

func (p *UserProgramReq) GetStrSp() string {
	if !p.IsSetStrSp() {
		return UserProgramReq_StrSp_DEFAULT
	}
	return *p.StrSp
}

var UserProgramReq_EPeriod_DEFAULT int32

func (p *UserProgramReq) GetEPeriod() int32 {
	if !p.IsSetEPeriod() {
		return UserProgramReq_EPeriod_DEFAULT
	}
	return *p.EPeriod
}
func (p *UserProgramReq) IsSetNDeviceType() bool {
	return p.NDeviceType != nil
}

func (p *UserProgramReq) IsSetBFavs() bool {
	return p.BFavs != nil
}

func (p *UserProgramReq) IsSetBPraise() bool {
	return p.BPraise != nil
}

func (p *UserProgramReq) IsSetBHistory() bool {
	return p.BHistory != nil
}

func (p *UserProgramReq) IsSetBUserScore() bool {
	return p.BUserScore != nil
}

func (p *UserProgramReq) IsSetStrSp() bool {
	return p.StrSp != nil
}

func (p *UserProgramReq) IsSetEPeriod() bool {
	return p.EPeriod != nil
}

func (p *UserProgramReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNPid bool = false
	var issetNUid bool = false
	var issetNSid bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetNPid = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetNUid = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetNSid = true
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNPid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NPid is not set"))
	}
	if !issetNUid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NUid is not set"))
	}
	if !issetNSid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSid is not set"))
	}
	return nil
}

func (p *UserProgramReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NPid = v
	}
	return nil
}

func (p *UserProgramReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NUid = v
	}
	return nil
}

func (p *UserProgramReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NSid = v
	}
	return nil
}

func (p *UserProgramReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NDeviceType = &v
	}
	return nil
}

func (p *UserProgramReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.BFavs = &v
	}
	return nil
}

func (p *UserProgramReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.BPraise = &v
	}
	return nil
}

func (p *UserProgramReq) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.BHistory = &v
	}
	return nil
}

func (p *UserProgramReq) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.BUserScore = &v
	}
	return nil
}

func (p *UserProgramReq) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.StrSp = &v
	}
	return nil
}

func (p *UserProgramReq) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.EPeriod = &v
	}
	return nil
}

func (p *UserProgramReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserProgramReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserProgramReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nPid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nPid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NPid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nPid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nPid: ", p), err)
	}
	return err
}

func (p *UserProgramReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nUid", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nUid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NUid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nUid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nUid: ", p), err)
	}
	return err
}

func (p *UserProgramReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nSid", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nSid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NSid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nSid (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nSid: ", p), err)
	}
	return err
}

func (p *UserProgramReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNDeviceType() {
		if err := oprot.WriteFieldBegin("nDeviceType", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nDeviceType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.NDeviceType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nDeviceType (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nDeviceType: ", p), err)
		}
	}
	return err
}

func (p *UserProgramReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBFavs() {
		if err := oprot.WriteFieldBegin("bFavs", thrift.BOOL, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bFavs: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.BFavs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bFavs (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bFavs: ", p), err)
		}
	}
	return err
}

func (p *UserProgramReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBPraise() {
		if err := oprot.WriteFieldBegin("bPraise", thrift.BOOL, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:bPraise: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.BPraise)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bPraise (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:bPraise: ", p), err)
		}
	}
	return err
}

func (p *UserProgramReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetBHistory() {
		if err := oprot.WriteFieldBegin("bHistory", thrift.BOOL, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:bHistory: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.BHistory)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bHistory (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:bHistory: ", p), err)
		}
	}
	return err
}

func (p *UserProgramReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetBUserScore() {
		if err := oprot.WriteFieldBegin("bUserScore", thrift.BOOL, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:bUserScore: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.BUserScore)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bUserScore (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:bUserScore: ", p), err)
		}
	}
	return err
}

func (p *UserProgramReq) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetStrSp() {
		if err := oprot.WriteFieldBegin("strSp", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:strSp: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StrSp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.strSp (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:strSp: ", p), err)
		}
	}
	return err
}

func (p *UserProgramReq) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetEPeriod() {
		if err := oprot.WriteFieldBegin("ePeriod", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:ePeriod: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.EPeriod)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ePeriod (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:ePeriod: ", p), err)
		}
	}
	return err
}

func (p *UserProgramReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserProgramReq(%+v)", *p)
}

// ************************************************
// 	返回用户节目数据结构
// 	stRetComm			返回基本数据结构
// 	stDemand			节目综合数据
// 	stIsFavs			是否收藏&关注&追剧&预约
// 	nPraiseStatus		是否点踩点赞
// 	nLastHitsId			剧集中上次观看的频道
// 	nOffSet				剧集中上次观看频道的具体位置
// *************************************************
//
// Attributes:
//  - StRetComm
//  - StPro
type UserProgramResp struct {
	StRetComm *IuctRespBase            `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	StPro     *iuct_types.USER_PROGRAM `thrift:"stPro,2,required" db:"stPro" json:"stPro"`
}

func NewUserProgramResp() *UserProgramResp {
	return &UserProgramResp{}
}

var UserProgramResp_StRetComm_DEFAULT *IuctRespBase

func (p *UserProgramResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return UserProgramResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

var UserProgramResp_StPro_DEFAULT *iuct_types.USER_PROGRAM

func (p *UserProgramResp) GetStPro() *iuct_types.USER_PROGRAM {
	if !p.IsSetStPro() {
		return UserProgramResp_StPro_DEFAULT
	}
	return p.StPro
}
func (p *UserProgramResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *UserProgramResp) IsSetStPro() bool {
	return p.StPro != nil
}

func (p *UserProgramResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetStPro bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetStPro = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetStPro {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StPro is not set"))
	}
	return nil
}

func (p *UserProgramResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *UserProgramResp) ReadField2(iprot thrift.TProtocol) error {
	p.StPro = &iuct_types.USER_PROGRAM{
		NPraiseStatus: -1,
	}
	if err := p.StPro.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StPro), err)
	}
	return nil
}

func (p *UserProgramResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserProgramResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserProgramResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *UserProgramResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stPro", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stPro: ", p), err)
	}
	if err := p.StPro.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StPro), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stPro: ", p), err)
	}
	return err
}

func (p *UserProgramResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserProgramResp(%+v)", *p)
}

// ************************************************
// 	请求批量用户节目数据结构
// 	vecPids			节目id列表
// 	vecSids			节目剧集id列表
// 	nUid			用户id
// 	nDeviceType		设备类型
// 	bFavs			获取是否收藏
// 	bPraise			获取是否点踩点赞
// 	bHistory		获取历史
// 	bUserScore		获取用户对节目的评分
// 	vecSp			节目提供商, 获取历史时必填
// 	ePeriod			获取周期 0 所有; 1 今天; 2 昨天
// *************************************************
//
// Attributes:
//  - VecPids
//  - VecSids
//  - NUid
//  - NDeviceType
//  - BFavs
//  - BPraise
//  - BHistory
//  - BUserScore
//  - VecSp
//  - EPeriod
type MultiUserProgramReq struct {
	VecPids     []int64  `thrift:"vecPids,1,required" db:"vecPids" json:"vecPids"`
	VecSids     []int64  `thrift:"vecSids,2,required" db:"vecSids" json:"vecSids"`
	NUid        int64    `thrift:"nUid,3,required" db:"nUid" json:"nUid"`
	NDeviceType *int32   `thrift:"nDeviceType,4" db:"nDeviceType" json:"nDeviceType,omitempty"`
	BFavs       *bool    `thrift:"bFavs,5" db:"bFavs" json:"bFavs,omitempty"`
	BPraise     *bool    `thrift:"bPraise,6" db:"bPraise" json:"bPraise,omitempty"`
	BHistory    *bool    `thrift:"bHistory,7" db:"bHistory" json:"bHistory,omitempty"`
	BUserScore  *bool    `thrift:"bUserScore,8" db:"bUserScore" json:"bUserScore,omitempty"`
	VecSp       []string `thrift:"vecSp,9" db:"vecSp" json:"vecSp,omitempty"`
	EPeriod     *int32   `thrift:"ePeriod,10" db:"ePeriod" json:"ePeriod,omitempty"`
}

func NewMultiUserProgramReq() *MultiUserProgramReq {
	return &MultiUserProgramReq{}
}

func (p *MultiUserProgramReq) GetVecPids() []int64 {
	return p.VecPids
}

func (p *MultiUserProgramReq) GetVecSids() []int64 {
	return p.VecSids
}

func (p *MultiUserProgramReq) GetNUid() int64 {
	return p.NUid
}

var MultiUserProgramReq_NDeviceType_DEFAULT int32

func (p *MultiUserProgramReq) GetNDeviceType() int32 {
	if !p.IsSetNDeviceType() {
		return MultiUserProgramReq_NDeviceType_DEFAULT
	}
	return *p.NDeviceType
}

var MultiUserProgramReq_BFavs_DEFAULT bool

func (p *MultiUserProgramReq) GetBFavs() bool {
	if !p.IsSetBFavs() {
		return MultiUserProgramReq_BFavs_DEFAULT
	}
	return *p.BFavs
}

var MultiUserProgramReq_BPraise_DEFAULT bool

func (p *MultiUserProgramReq) GetBPraise() bool {
	if !p.IsSetBPraise() {
		return MultiUserProgramReq_BPraise_DEFAULT
	}
	return *p.BPraise
}

var MultiUserProgramReq_BHistory_DEFAULT bool

func (p *MultiUserProgramReq) GetBHistory() bool {
	if !p.IsSetBHistory() {
		return MultiUserProgramReq_BHistory_DEFAULT
	}
	return *p.BHistory
}

var MultiUserProgramReq_BUserScore_DEFAULT bool

func (p *MultiUserProgramReq) GetBUserScore() bool {
	if !p.IsSetBUserScore() {
		return MultiUserProgramReq_BUserScore_DEFAULT
	}
	return *p.BUserScore
}

var MultiUserProgramReq_VecSp_DEFAULT []string

func (p *MultiUserProgramReq) GetVecSp() []string {
	return p.VecSp
}

var MultiUserProgramReq_EPeriod_DEFAULT int32

func (p *MultiUserProgramReq) GetEPeriod() int32 {
	if !p.IsSetEPeriod() {
		return MultiUserProgramReq_EPeriod_DEFAULT
	}
	return *p.EPeriod
}
func (p *MultiUserProgramReq) IsSetNDeviceType() bool {
	return p.NDeviceType != nil
}

func (p *MultiUserProgramReq) IsSetBFavs() bool {
	return p.BFavs != nil
}

func (p *MultiUserProgramReq) IsSetBPraise() bool {
	return p.BPraise != nil
}

func (p *MultiUserProgramReq) IsSetBHistory() bool {
	return p.BHistory != nil
}

func (p *MultiUserProgramReq) IsSetBUserScore() bool {
	return p.BUserScore != nil
}

func (p *MultiUserProgramReq) IsSetVecSp() bool {
	return p.VecSp != nil
}

func (p *MultiUserProgramReq) IsSetEPeriod() bool {
	return p.EPeriod != nil
}

func (p *MultiUserProgramReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetVecPids bool = false
	var issetVecSids bool = false
	var issetNUid bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetVecPids = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetVecSids = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetNUid = true
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetVecPids {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecPids is not set"))
	}
	if !issetVecSids {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecSids is not set"))
	}
	if !issetNUid {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NUid is not set"))
	}
	return nil
}

func (p *MultiUserProgramReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.VecPids = tSlice
	for i := 0; i < size; i++ {
		var _elem46 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem46 = v
		}
		p.VecPids = append(p.VecPids, _elem46)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiUserProgramReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.VecSids = tSlice
	for i := 0; i < size; i++ {
		var _elem47 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem47 = v
		}
		p.VecSids = append(p.VecSids, _elem47)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiUserProgramReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NUid = v
	}
	return nil
}

func (p *MultiUserProgramReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NDeviceType = &v
	}
	return nil
}

func (p *MultiUserProgramReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.BFavs = &v
	}
	return nil
}

func (p *MultiUserProgramReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.BPraise = &v
	}
	return nil
}

func (p *MultiUserProgramReq) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.BHistory = &v
	}
	return nil
}

func (p *MultiUserProgramReq) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.BUserScore = &v
	}
	return nil
}

func (p *MultiUserProgramReq) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.VecSp = tSlice
	for i := 0; i < size; i++ {
		var _elem48 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem48 = v
		}
		p.VecSp = append(p.VecSp, _elem48)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiUserProgramReq) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.EPeriod = &v
	}
	return nil
}

func (p *MultiUserProgramReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MultiUserProgramReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MultiUserProgramReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecPids", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vecPids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.VecPids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecPids {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vecPids: ", p), err)
	}
	return err
}

func (p *MultiUserProgramReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecSids", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vecSids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.VecSids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecSids {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vecSids: ", p), err)
	}
	return err
}

func (p *MultiUserProgramReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nUid", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nUid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NUid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nUid (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nUid: ", p), err)
	}
	return err
}

func (p *MultiUserProgramReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNDeviceType() {
		if err := oprot.WriteFieldBegin("nDeviceType", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nDeviceType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.NDeviceType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nDeviceType (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nDeviceType: ", p), err)
		}
	}
	return err
}

func (p *MultiUserProgramReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBFavs() {
		if err := oprot.WriteFieldBegin("bFavs", thrift.BOOL, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bFavs: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.BFavs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bFavs (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bFavs: ", p), err)
		}
	}
	return err
}

func (p *MultiUserProgramReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBPraise() {
		if err := oprot.WriteFieldBegin("bPraise", thrift.BOOL, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:bPraise: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.BPraise)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bPraise (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:bPraise: ", p), err)
		}
	}
	return err
}

func (p *MultiUserProgramReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetBHistory() {
		if err := oprot.WriteFieldBegin("bHistory", thrift.BOOL, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:bHistory: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.BHistory)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bHistory (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:bHistory: ", p), err)
		}
	}
	return err
}

func (p *MultiUserProgramReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetBUserScore() {
		if err := oprot.WriteFieldBegin("bUserScore", thrift.BOOL, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:bUserScore: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.BUserScore)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bUserScore (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:bUserScore: ", p), err)
		}
	}
	return err
}

func (p *MultiUserProgramReq) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetVecSp() {
		if err := oprot.WriteFieldBegin("vecSp", thrift.LIST, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:vecSp: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.VecSp)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.VecSp {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:vecSp: ", p), err)
		}
	}
	return err
}

func (p *MultiUserProgramReq) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetEPeriod() {
		if err := oprot.WriteFieldBegin("ePeriod", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:ePeriod: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.EPeriod)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ePeriod (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:ePeriod: ", p), err)
		}
	}
	return err
}

func (p *MultiUserProgramReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiUserProgramReq(%+v)", *p)
}

// ************************************************
// 	返回用户节目数据结构
// 	stRetComm			返回基本数据结构
// 	stDemand			节目综合数据
// 	stIsFavs			是否收藏&关注&追剧&预约
// 	nPraiseStatus		是否点踩点赞
// 	nLastHitsId			剧集中上次观看的频道
// 	nOffSet				剧集中上次观看频道的具体位置
// *************************************************
//
// Attributes:
//  - StRetComm
//  - VecPro
type MultiUserProgramResp struct {
	StRetComm *IuctRespBase              `thrift:"stRetComm,1,required" db:"stRetComm" json:"stRetComm"`
	VecPro    []*iuct_types.USER_PROGRAM `thrift:"vecPro,2,required" db:"vecPro" json:"vecPro"`
}

func NewMultiUserProgramResp() *MultiUserProgramResp {
	return &MultiUserProgramResp{}
}

var MultiUserProgramResp_StRetComm_DEFAULT *IuctRespBase

func (p *MultiUserProgramResp) GetStRetComm() *IuctRespBase {
	if !p.IsSetStRetComm() {
		return MultiUserProgramResp_StRetComm_DEFAULT
	}
	return p.StRetComm
}

func (p *MultiUserProgramResp) GetVecPro() []*iuct_types.USER_PROGRAM {
	return p.VecPro
}
func (p *MultiUserProgramResp) IsSetStRetComm() bool {
	return p.StRetComm != nil
}

func (p *MultiUserProgramResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStRetComm bool = false
	var issetVecPro bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStRetComm = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetVecPro = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStRetComm {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StRetComm is not set"))
	}
	if !issetVecPro {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecPro is not set"))
	}
	return nil
}

func (p *MultiUserProgramResp) ReadField1(iprot thrift.TProtocol) error {
	p.StRetComm = &IuctRespBase{}
	if err := p.StRetComm.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StRetComm), err)
	}
	return nil
}

func (p *MultiUserProgramResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*iuct_types.USER_PROGRAM, 0, size)
	p.VecPro = tSlice
	for i := 0; i < size; i++ {
		_elem49 := &iuct_types.USER_PROGRAM{
			NPraiseStatus: -1,
		}
		if err := _elem49.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem49), err)
		}
		p.VecPro = append(p.VecPro, _elem49)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiUserProgramResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MultiUserProgramResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MultiUserProgramResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stRetComm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stRetComm: ", p), err)
	}
	if err := p.StRetComm.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StRetComm), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stRetComm: ", p), err)
	}
	return err
}

func (p *MultiUserProgramResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vecPro", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vecPro: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VecPro)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VecPro {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vecPro: ", p), err)
	}
	return err
}

func (p *MultiUserProgramResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiUserProgramResp(%+v)", *p)
}

type IuctThriftService interface {
	Monitorqueryprocessstatus() (r int32, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoUserCenterCommRequest(req *UserCenterCommReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoAddUserHistoryRequest(req *iuct_types.USER_HISTORY, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoDelUserHistoryRequest(req *iuct_types.USER_HISTORY, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetUserHistoryRequest(req *HistoryReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *HistoryResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetUserHistoryListRequest(req *HistoryListReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *HistoryListResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetUserLastProgramBySeriesid(req *UserCenterReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *HistoryResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetUserProgramListBySeriesid(req *UserCenterReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *UserSeriesProHisListResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetUserSeriesHistory(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *UserSerirsHisListResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetUserWatchingChannelRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoAddUserFavoriteRequest(req *iuct_types.USER_FAVORITE, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoDelUserFavoriteRequest(req *iuct_types.USER_FAVORITE, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoAddMultipleUserFavoriteRequest(req *MultiFavoriteReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoDelMultipleUserFavoriteRequest(req *MultiFavoriteReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoCheckIsFavoriteRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoMultipleCheckIsFavoriteRequest(req *MultiIntReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiBoolResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoCheckIsFavsRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IsFavsResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoMultipleCheckIsFavsRequest(req *MultiIntReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiIsFavsResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetUserFavoriteListRequest(req *FavoriteListReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *FavoriteListResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoNotifyUserProgramUpdateRequest(req *ProgramUpdateReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoProgramEnterRequest(req *UserHitsReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoProgramExitRequest(req *UserHitsReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetProgramHitsRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoMultipleGetProgramHitsRequest(req *MultiHitsReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiHitsResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoCheckIsPraiseRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoMultipleCheckIsPraiseRequest(req *MultiIntReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiIntResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetPidPraiseRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoMultipleGetPidsPraiseRequest(req *MultiIntReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiPraiseResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetProgramDemandRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *DemandResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetMultipleProgramDemandRequest(req *MultipleDemandReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultipleDemandResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetUserSubscribeListRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *FavoriteListResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetUserColumnListRequest(req *UserColumnReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *UserColumnResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetUserOftenWatchChannelListRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiBigIntResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetUserInterestColumnAndSeriesRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiBigIntResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetUserInterestMediasRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiIntResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoAddUserOrderRequest(req *OrderReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoDelUserOrderRequest(req *OrderReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoCheckIsOrderRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoCheckMultipleIsOrderRequest(req *MultiIsOrderReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiIntResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetUserOrderListRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *OrderListResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoAddShareRequest(req *ShareAddReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoMultipleDelShareRequest(req *MultiStrReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetUserShareListRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *ShareListResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetProgramShareTimesRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoAddCommentRequest(req *iuct_types.USER_COMMENT_INFO, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetProgramCommentListRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *CommentListResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetCommentListByCommentidRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *CommentListResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoMultipleGetCommentsPraiseRequest(req *MultiStrReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiPraiseResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetRankList(req *RankListReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *RankListResp, err error)
	// Parameters:
	//  - NPid
	//  - OtRPCCtx
	RPCDoGetProgramRankInfo(nPid com_types.PRG_ID, ot_rpc_ctx *com_types.ZipkinHeader) (r *ProgramRankInfoResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetUserSearchHistoryRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *SearchHistoryListResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetUserAllSubject(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiBigIntResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetUserAllSubjectAndProgram(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *GuessSubjResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetUserSubjectProgram(req *UserCenterReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiBigIntResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetUserProgramInfoRequest(req *UserProgramReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *UserProgramResp, err error)
	// Parameters:
	//  - Req
	//  - OtRPCCtx
	RPCDoGetMultipleUserProgramInfoRequest(req *MultiUserProgramReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiUserProgramResp, err error)
}

type IuctThriftServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewIuctThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *IuctThriftServiceClient {
	return &IuctThriftServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewIuctThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *IuctThriftServiceClient {
	return &IuctThriftServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

func (p *IuctThriftServiceClient) Monitorqueryprocessstatus() (r int32, err error) {
	if err = p.sendMonitorqueryprocessstatus(); err != nil {
		return
	}
	return p.recvMonitorqueryprocessstatus()
}

func (p *IuctThriftServiceClient) sendMonitorqueryprocessstatus() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("monitorqueryprocessstatus", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceMonitorqueryprocessstatusArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvMonitorqueryprocessstatus() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "monitorqueryprocessstatus" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "monitorqueryprocessstatus failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "monitorqueryprocessstatus failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error50 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error51 error
		error51, err = error50.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error51
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "monitorqueryprocessstatus failed: invalid message type")
		return
	}
	result := IuctThriftServiceMonitorqueryprocessstatusResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoUserCenterCommRequest(req *UserCenterCommReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error) {
	if err = p.sendRPCDoUserCenterCommRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoUserCenterCommRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoUserCenterCommRequest(req *UserCenterCommReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_user_center_comm_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoUserCenterCommRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoUserCenterCommRequest() (value *IuctRespBase, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_user_center_comm_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_user_center_comm_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_user_center_comm_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error52 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error53 error
		error53, err = error52.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error53
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_user_center_comm_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoUserCenterCommRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoAddUserHistoryRequest(req *iuct_types.USER_HISTORY, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error) {
	if err = p.sendRPCDoAddUserHistoryRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoAddUserHistoryRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoAddUserHistoryRequest(req *iuct_types.USER_HISTORY, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_add_user_history_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoAddUserHistoryRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoAddUserHistoryRequest() (value *IuctRespBase, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_add_user_history_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_add_user_history_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_add_user_history_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error54 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error55 error
		error55, err = error54.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error55
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_add_user_history_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoAddUserHistoryRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoDelUserHistoryRequest(req *iuct_types.USER_HISTORY, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error) {
	if err = p.sendRPCDoDelUserHistoryRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoDelUserHistoryRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoDelUserHistoryRequest(req *iuct_types.USER_HISTORY, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_del_user_history_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoDelUserHistoryRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoDelUserHistoryRequest() (value *IuctRespBase, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_del_user_history_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_del_user_history_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_del_user_history_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error56 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error57 error
		error57, err = error56.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error57
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_del_user_history_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoDelUserHistoryRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetUserHistoryRequest(req *HistoryReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *HistoryResp, err error) {
	if err = p.sendRPCDoGetUserHistoryRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetUserHistoryRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoGetUserHistoryRequest(req *HistoryReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_user_history_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetUserHistoryRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetUserHistoryRequest() (value *HistoryResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_user_history_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_user_history_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_user_history_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error58 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error59 error
		error59, err = error58.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error59
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_user_history_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetUserHistoryRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetUserHistoryListRequest(req *HistoryListReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *HistoryListResp, err error) {
	if err = p.sendRPCDoGetUserHistoryListRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetUserHistoryListRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoGetUserHistoryListRequest(req *HistoryListReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_user_history_list_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetUserHistoryListRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetUserHistoryListRequest() (value *HistoryListResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_user_history_list_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_user_history_list_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_user_history_list_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error60 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error61 error
		error61, err = error60.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error61
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_user_history_list_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetUserHistoryListRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetUserLastProgramBySeriesid(req *UserCenterReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *HistoryResp, err error) {
	if err = p.sendRPCDoGetUserLastProgramBySeriesid(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetUserLastProgramBySeriesid()
}

func (p *IuctThriftServiceClient) sendRPCDoGetUserLastProgramBySeriesid(req *UserCenterReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_user_last_program_by_seriesid", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetUserLastProgramBySeriesidArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetUserLastProgramBySeriesid() (value *HistoryResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_user_last_program_by_seriesid" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_user_last_program_by_seriesid failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_user_last_program_by_seriesid failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error62 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error63 error
		error63, err = error62.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error63
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_user_last_program_by_seriesid failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetUserLastProgramBySeriesidResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetUserProgramListBySeriesid(req *UserCenterReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *UserSeriesProHisListResp, err error) {
	if err = p.sendRPCDoGetUserProgramListBySeriesid(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetUserProgramListBySeriesid()
}

func (p *IuctThriftServiceClient) sendRPCDoGetUserProgramListBySeriesid(req *UserCenterReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_user_program_list_by_seriesid", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetUserProgramListBySeriesidArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetUserProgramListBySeriesid() (value *UserSeriesProHisListResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_user_program_list_by_seriesid" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_user_program_list_by_seriesid failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_user_program_list_by_seriesid failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error64 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error65 error
		error65, err = error64.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error65
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_user_program_list_by_seriesid failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetUserProgramListBySeriesidResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetUserSeriesHistory(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *UserSerirsHisListResp, err error) {
	if err = p.sendRPCDoGetUserSeriesHistory(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetUserSeriesHistory()
}

func (p *IuctThriftServiceClient) sendRPCDoGetUserSeriesHistory(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_user_series_history", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetUserSeriesHistoryArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetUserSeriesHistory() (value *UserSerirsHisListResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_user_series_history" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_user_series_history failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_user_series_history failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error66 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error67 error
		error67, err = error66.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error67
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_user_series_history failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetUserSeriesHistoryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetUserWatchingChannelRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error) {
	if err = p.sendRPCDoGetUserWatchingChannelRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetUserWatchingChannelRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoGetUserWatchingChannelRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_user_watching_channel_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetUserWatchingChannelRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetUserWatchingChannelRequest() (value *IuctRespBase, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_user_watching_channel_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_user_watching_channel_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_user_watching_channel_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error68 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error69 error
		error69, err = error68.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error69
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_user_watching_channel_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetUserWatchingChannelRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoAddUserFavoriteRequest(req *iuct_types.USER_FAVORITE, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error) {
	if err = p.sendRPCDoAddUserFavoriteRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoAddUserFavoriteRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoAddUserFavoriteRequest(req *iuct_types.USER_FAVORITE, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_add_user_favorite_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoAddUserFavoriteRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoAddUserFavoriteRequest() (value *IuctRespBase, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_add_user_favorite_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_add_user_favorite_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_add_user_favorite_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error70 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error71 error
		error71, err = error70.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error71
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_add_user_favorite_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoAddUserFavoriteRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoDelUserFavoriteRequest(req *iuct_types.USER_FAVORITE, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error) {
	if err = p.sendRPCDoDelUserFavoriteRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoDelUserFavoriteRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoDelUserFavoriteRequest(req *iuct_types.USER_FAVORITE, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_del_user_favorite_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoDelUserFavoriteRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoDelUserFavoriteRequest() (value *IuctRespBase, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_del_user_favorite_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_del_user_favorite_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_del_user_favorite_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error72 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error73 error
		error73, err = error72.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error73
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_del_user_favorite_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoDelUserFavoriteRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoAddMultipleUserFavoriteRequest(req *MultiFavoriteReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error) {
	if err = p.sendRPCDoAddMultipleUserFavoriteRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoAddMultipleUserFavoriteRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoAddMultipleUserFavoriteRequest(req *MultiFavoriteReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_add_multiple_user_favorite_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoAddMultipleUserFavoriteRequest() (value *IuctRespBase, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_add_multiple_user_favorite_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_add_multiple_user_favorite_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_add_multiple_user_favorite_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error74 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error75 error
		error75, err = error74.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error75
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_add_multiple_user_favorite_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoDelMultipleUserFavoriteRequest(req *MultiFavoriteReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error) {
	if err = p.sendRPCDoDelMultipleUserFavoriteRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoDelMultipleUserFavoriteRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoDelMultipleUserFavoriteRequest(req *MultiFavoriteReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_del_multiple_user_favorite_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoDelMultipleUserFavoriteRequest() (value *IuctRespBase, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_del_multiple_user_favorite_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_del_multiple_user_favorite_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_del_multiple_user_favorite_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error76 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error77 error
		error77, err = error76.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error77
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_del_multiple_user_favorite_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoCheckIsFavoriteRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error) {
	if err = p.sendRPCDoCheckIsFavoriteRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoCheckIsFavoriteRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoCheckIsFavoriteRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_check_is_favorite_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoCheckIsFavoriteRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoCheckIsFavoriteRequest() (value *IuctRespBase, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_check_is_favorite_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_check_is_favorite_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_check_is_favorite_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error78 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error79 error
		error79, err = error78.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error79
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_check_is_favorite_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoCheckIsFavoriteRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoMultipleCheckIsFavoriteRequest(req *MultiIntReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiBoolResp, err error) {
	if err = p.sendRPCDoMultipleCheckIsFavoriteRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoMultipleCheckIsFavoriteRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoMultipleCheckIsFavoriteRequest(req *MultiIntReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_multiple_check_is_favorite_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoMultipleCheckIsFavoriteRequest() (value *MultiBoolResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_multiple_check_is_favorite_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_multiple_check_is_favorite_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_multiple_check_is_favorite_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error80 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error81 error
		error81, err = error80.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error81
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_multiple_check_is_favorite_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoCheckIsFavsRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IsFavsResp, err error) {
	if err = p.sendRPCDoCheckIsFavsRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoCheckIsFavsRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoCheckIsFavsRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_check_is_favs_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoCheckIsFavsRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoCheckIsFavsRequest() (value *IsFavsResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_check_is_favs_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_check_is_favs_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_check_is_favs_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error82 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error83 error
		error83, err = error82.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error83
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_check_is_favs_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoCheckIsFavsRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoMultipleCheckIsFavsRequest(req *MultiIntReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiIsFavsResp, err error) {
	if err = p.sendRPCDoMultipleCheckIsFavsRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoMultipleCheckIsFavsRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoMultipleCheckIsFavsRequest(req *MultiIntReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_multiple_check_is_favs_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoMultipleCheckIsFavsRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoMultipleCheckIsFavsRequest() (value *MultiIsFavsResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_multiple_check_is_favs_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_multiple_check_is_favs_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_multiple_check_is_favs_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error84 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error85 error
		error85, err = error84.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error85
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_multiple_check_is_favs_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoMultipleCheckIsFavsRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetUserFavoriteListRequest(req *FavoriteListReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *FavoriteListResp, err error) {
	if err = p.sendRPCDoGetUserFavoriteListRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetUserFavoriteListRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoGetUserFavoriteListRequest(req *FavoriteListReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_user_favorite_list_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetUserFavoriteListRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetUserFavoriteListRequest() (value *FavoriteListResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_user_favorite_list_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_user_favorite_list_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_user_favorite_list_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error86 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error87 error
		error87, err = error86.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error87
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_user_favorite_list_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetUserFavoriteListRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoNotifyUserProgramUpdateRequest(req *ProgramUpdateReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error) {
	if err = p.sendRPCDoNotifyUserProgramUpdateRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoNotifyUserProgramUpdateRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoNotifyUserProgramUpdateRequest(req *ProgramUpdateReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_notify_user_program_update_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoNotifyUserProgramUpdateRequest() (value *IuctRespBase, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_notify_user_program_update_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_notify_user_program_update_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_notify_user_program_update_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error88 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error89 error
		error89, err = error88.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error89
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_notify_user_program_update_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoProgramEnterRequest(req *UserHitsReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error) {
	if err = p.sendRPCDoProgramEnterRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoProgramEnterRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoProgramEnterRequest(req *UserHitsReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_program_enter_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoProgramEnterRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoProgramEnterRequest() (value *IuctRespBase, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_program_enter_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_program_enter_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_program_enter_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error90 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error91 error
		error91, err = error90.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error91
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_program_enter_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoProgramEnterRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoProgramExitRequest(req *UserHitsReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error) {
	if err = p.sendRPCDoProgramExitRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoProgramExitRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoProgramExitRequest(req *UserHitsReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_program_exit_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoProgramExitRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoProgramExitRequest() (value *IuctRespBase, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_program_exit_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_program_exit_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_program_exit_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error92 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error93 error
		error93, err = error92.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error93
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_program_exit_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoProgramExitRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetProgramHitsRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error) {
	if err = p.sendRPCDoGetProgramHitsRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetProgramHitsRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoGetProgramHitsRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_program_hits_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetProgramHitsRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetProgramHitsRequest() (value *IuctRespBase, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_program_hits_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_program_hits_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_program_hits_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error94 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error95 error
		error95, err = error94.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error95
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_program_hits_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetProgramHitsRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoMultipleGetProgramHitsRequest(req *MultiHitsReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiHitsResp, err error) {
	if err = p.sendRPCDoMultipleGetProgramHitsRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoMultipleGetProgramHitsRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoMultipleGetProgramHitsRequest(req *MultiHitsReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_multiple_get_program_hits_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoMultipleGetProgramHitsRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoMultipleGetProgramHitsRequest() (value *MultiHitsResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_multiple_get_program_hits_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_multiple_get_program_hits_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_multiple_get_program_hits_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error96 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error97 error
		error97, err = error96.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error97
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_multiple_get_program_hits_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoMultipleGetProgramHitsRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoCheckIsPraiseRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error) {
	if err = p.sendRPCDoCheckIsPraiseRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoCheckIsPraiseRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoCheckIsPraiseRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_check_is_praise_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoCheckIsPraiseRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoCheckIsPraiseRequest() (value *IuctRespBase, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_check_is_praise_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_check_is_praise_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_check_is_praise_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error98 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error99 error
		error99, err = error98.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error99
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_check_is_praise_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoCheckIsPraiseRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoMultipleCheckIsPraiseRequest(req *MultiIntReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiIntResp, err error) {
	if err = p.sendRPCDoMultipleCheckIsPraiseRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoMultipleCheckIsPraiseRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoMultipleCheckIsPraiseRequest(req *MultiIntReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_multiple_check_is_praise_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoMultipleCheckIsPraiseRequest() (value *MultiIntResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_multiple_check_is_praise_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_multiple_check_is_praise_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_multiple_check_is_praise_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error100 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error101 error
		error101, err = error100.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error101
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_multiple_check_is_praise_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetPidPraiseRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error) {
	if err = p.sendRPCDoGetPidPraiseRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetPidPraiseRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoGetPidPraiseRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_pid_praise_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetPidPraiseRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetPidPraiseRequest() (value *IuctRespBase, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_pid_praise_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_pid_praise_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_pid_praise_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error102 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error103 error
		error103, err = error102.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error103
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_pid_praise_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetPidPraiseRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoMultipleGetPidsPraiseRequest(req *MultiIntReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiPraiseResp, err error) {
	if err = p.sendRPCDoMultipleGetPidsPraiseRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoMultipleGetPidsPraiseRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoMultipleGetPidsPraiseRequest(req *MultiIntReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_multiple_get_pids_praise_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoMultipleGetPidsPraiseRequest() (value *MultiPraiseResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_multiple_get_pids_praise_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_multiple_get_pids_praise_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_multiple_get_pids_praise_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error104 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error105 error
		error105, err = error104.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error105
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_multiple_get_pids_praise_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetProgramDemandRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *DemandResp, err error) {
	if err = p.sendRPCDoGetProgramDemandRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetProgramDemandRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoGetProgramDemandRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_program_demand_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetProgramDemandRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetProgramDemandRequest() (value *DemandResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_program_demand_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_program_demand_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_program_demand_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error106 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error107 error
		error107, err = error106.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error107
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_program_demand_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetProgramDemandRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetMultipleProgramDemandRequest(req *MultipleDemandReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultipleDemandResp, err error) {
	if err = p.sendRPCDoGetMultipleProgramDemandRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetMultipleProgramDemandRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoGetMultipleProgramDemandRequest(req *MultipleDemandReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_multiple_program_demand_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetMultipleProgramDemandRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetMultipleProgramDemandRequest() (value *MultipleDemandResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_multiple_program_demand_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_multiple_program_demand_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_multiple_program_demand_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error108 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error109 error
		error109, err = error108.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error109
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_multiple_program_demand_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetMultipleProgramDemandRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetUserSubscribeListRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *FavoriteListResp, err error) {
	if err = p.sendRPCDoGetUserSubscribeListRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetUserSubscribeListRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoGetUserSubscribeListRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_user_subscribe_list_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetUserSubscribeListRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetUserSubscribeListRequest() (value *FavoriteListResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_user_subscribe_list_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_user_subscribe_list_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_user_subscribe_list_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error110 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error111 error
		error111, err = error110.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error111
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_user_subscribe_list_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetUserSubscribeListRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetUserColumnListRequest(req *UserColumnReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *UserColumnResp, err error) {
	if err = p.sendRPCDoGetUserColumnListRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetUserColumnListRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoGetUserColumnListRequest(req *UserColumnReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_user_column_list_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetUserColumnListRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetUserColumnListRequest() (value *UserColumnResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_user_column_list_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_user_column_list_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_user_column_list_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error112 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error113 error
		error113, err = error112.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error113
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_user_column_list_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetUserColumnListRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetUserOftenWatchChannelListRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiBigIntResp, err error) {
	if err = p.sendRPCDoGetUserOftenWatchChannelListRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetUserOftenWatchChannelListRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoGetUserOftenWatchChannelListRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_user_often_watch_channel_list_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetUserOftenWatchChannelListRequest() (value *MultiBigIntResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_user_often_watch_channel_list_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_user_often_watch_channel_list_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_user_often_watch_channel_list_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error114 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error115 error
		error115, err = error114.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error115
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_user_often_watch_channel_list_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetUserInterestColumnAndSeriesRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiBigIntResp, err error) {
	if err = p.sendRPCDoGetUserInterestColumnAndSeriesRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetUserInterestColumnAndSeriesRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoGetUserInterestColumnAndSeriesRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_user_interest_column_and_series_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetUserInterestColumnAndSeriesRequest() (value *MultiBigIntResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_user_interest_column_and_series_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_user_interest_column_and_series_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_user_interest_column_and_series_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error116 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error117 error
		error117, err = error116.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error117
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_user_interest_column_and_series_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetUserInterestMediasRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiIntResp, err error) {
	if err = p.sendRPCDoGetUserInterestMediasRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetUserInterestMediasRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoGetUserInterestMediasRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_user_interest_medias_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetUserInterestMediasRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetUserInterestMediasRequest() (value *MultiIntResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_user_interest_medias_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_user_interest_medias_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_user_interest_medias_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error118 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error119 error
		error119, err = error118.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error119
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_user_interest_medias_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetUserInterestMediasRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoAddUserOrderRequest(req *OrderReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error) {
	if err = p.sendRPCDoAddUserOrderRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoAddUserOrderRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoAddUserOrderRequest(req *OrderReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_add_user_order_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoAddUserOrderRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoAddUserOrderRequest() (value *IuctRespBase, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_add_user_order_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_add_user_order_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_add_user_order_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error120 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error121 error
		error121, err = error120.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error121
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_add_user_order_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoAddUserOrderRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoDelUserOrderRequest(req *OrderReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error) {
	if err = p.sendRPCDoDelUserOrderRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoDelUserOrderRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoDelUserOrderRequest(req *OrderReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_del_user_order_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoDelUserOrderRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoDelUserOrderRequest() (value *IuctRespBase, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_del_user_order_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_del_user_order_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_del_user_order_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error122 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error123 error
		error123, err = error122.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error123
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_del_user_order_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoDelUserOrderRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoCheckIsOrderRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error) {
	if err = p.sendRPCDoCheckIsOrderRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoCheckIsOrderRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoCheckIsOrderRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_check_is_order_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoCheckIsOrderRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoCheckIsOrderRequest() (value *IuctRespBase, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_check_is_order_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_check_is_order_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_check_is_order_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error124 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error125 error
		error125, err = error124.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error125
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_check_is_order_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoCheckIsOrderRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoCheckMultipleIsOrderRequest(req *MultiIsOrderReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiIntResp, err error) {
	if err = p.sendRPCDoCheckMultipleIsOrderRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoCheckMultipleIsOrderRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoCheckMultipleIsOrderRequest(req *MultiIsOrderReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_check_multiple_is_order_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoCheckMultipleIsOrderRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoCheckMultipleIsOrderRequest() (value *MultiIntResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_check_multiple_is_order_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_check_multiple_is_order_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_check_multiple_is_order_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error126 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error127 error
		error127, err = error126.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error127
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_check_multiple_is_order_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoCheckMultipleIsOrderRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetUserOrderListRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *OrderListResp, err error) {
	if err = p.sendRPCDoGetUserOrderListRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetUserOrderListRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoGetUserOrderListRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_user_order_list_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetUserOrderListRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetUserOrderListRequest() (value *OrderListResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_user_order_list_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_user_order_list_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_user_order_list_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error128 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error129 error
		error129, err = error128.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error129
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_user_order_list_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetUserOrderListRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoAddShareRequest(req *ShareAddReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error) {
	if err = p.sendRPCDoAddShareRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoAddShareRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoAddShareRequest(req *ShareAddReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_add_share_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoAddShareRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoAddShareRequest() (value *IuctRespBase, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_add_share_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_add_share_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_add_share_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error130 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error131 error
		error131, err = error130.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error131
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_add_share_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoAddShareRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoMultipleDelShareRequest(req *MultiStrReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error) {
	if err = p.sendRPCDoMultipleDelShareRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoMultipleDelShareRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoMultipleDelShareRequest(req *MultiStrReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_multiple_del_share_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoMultipleDelShareRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoMultipleDelShareRequest() (value *IuctRespBase, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_multiple_del_share_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_multiple_del_share_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_multiple_del_share_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error132 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error133 error
		error133, err = error132.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error133
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_multiple_del_share_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoMultipleDelShareRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetUserShareListRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *ShareListResp, err error) {
	if err = p.sendRPCDoGetUserShareListRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetUserShareListRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoGetUserShareListRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_user_share_list_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetUserShareListRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetUserShareListRequest() (value *ShareListResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_user_share_list_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_user_share_list_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_user_share_list_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error134 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error135 error
		error135, err = error134.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error135
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_user_share_list_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetUserShareListRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetProgramShareTimesRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error) {
	if err = p.sendRPCDoGetProgramShareTimesRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetProgramShareTimesRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoGetProgramShareTimesRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_program_share_times_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetProgramShareTimesRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetProgramShareTimesRequest() (value *IuctRespBase, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_program_share_times_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_program_share_times_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_program_share_times_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error136 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error137 error
		error137, err = error136.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error137
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_program_share_times_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetProgramShareTimesRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoAddCommentRequest(req *iuct_types.USER_COMMENT_INFO, ot_rpc_ctx *com_types.ZipkinHeader) (r *IuctRespBase, err error) {
	if err = p.sendRPCDoAddCommentRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoAddCommentRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoAddCommentRequest(req *iuct_types.USER_COMMENT_INFO, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_add_comment_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoAddCommentRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoAddCommentRequest() (value *IuctRespBase, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_add_comment_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_add_comment_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_add_comment_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error138 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error139 error
		error139, err = error138.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error139
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_add_comment_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoAddCommentRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetProgramCommentListRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *CommentListResp, err error) {
	if err = p.sendRPCDoGetProgramCommentListRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetProgramCommentListRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoGetProgramCommentListRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_program_comment_list_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetProgramCommentListRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetProgramCommentListRequest() (value *CommentListResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_program_comment_list_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_program_comment_list_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_program_comment_list_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error140 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error141 error
		error141, err = error140.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error141
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_program_comment_list_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetProgramCommentListRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetCommentListByCommentidRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *CommentListResp, err error) {
	if err = p.sendRPCDoGetCommentListByCommentidRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetCommentListByCommentidRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoGetCommentListByCommentidRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_comment_list_by_commentid_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetCommentListByCommentidRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetCommentListByCommentidRequest() (value *CommentListResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_comment_list_by_commentid_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_comment_list_by_commentid_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_comment_list_by_commentid_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error142 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error143 error
		error143, err = error142.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error143
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_comment_list_by_commentid_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetCommentListByCommentidRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoMultipleGetCommentsPraiseRequest(req *MultiStrReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiPraiseResp, err error) {
	if err = p.sendRPCDoMultipleGetCommentsPraiseRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoMultipleGetCommentsPraiseRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoMultipleGetCommentsPraiseRequest(req *MultiStrReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_multiple_get_comments_praise_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoMultipleGetCommentsPraiseRequest() (value *MultiPraiseResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_multiple_get_comments_praise_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_multiple_get_comments_praise_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_multiple_get_comments_praise_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error144 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error145 error
		error145, err = error144.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error145
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_multiple_get_comments_praise_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetRankList(req *RankListReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *RankListResp, err error) {
	if err = p.sendRPCDoGetRankList(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetRankList()
}

func (p *IuctThriftServiceClient) sendRPCDoGetRankList(req *RankListReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_rank_list", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetRankListArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetRankList() (value *RankListResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_rank_list" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_rank_list failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_rank_list failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error146 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error147 error
		error147, err = error146.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error147
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_rank_list failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetRankListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - NPid
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetProgramRankInfo(nPid com_types.PRG_ID, ot_rpc_ctx *com_types.ZipkinHeader) (r *ProgramRankInfoResp, err error) {
	if err = p.sendRPCDoGetProgramRankInfo(nPid, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetProgramRankInfo()
}

func (p *IuctThriftServiceClient) sendRPCDoGetProgramRankInfo(nPid com_types.PRG_ID, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_program_rank_info", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetProgramRankInfoArgs{
		NPid:     nPid,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetProgramRankInfo() (value *ProgramRankInfoResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_program_rank_info" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_program_rank_info failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_program_rank_info failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error148 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error149 error
		error149, err = error148.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error149
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_program_rank_info failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetProgramRankInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetUserSearchHistoryRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *SearchHistoryListResp, err error) {
	if err = p.sendRPCDoGetUserSearchHistoryRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetUserSearchHistoryRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoGetUserSearchHistoryRequest(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_user_search_history_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetUserSearchHistoryRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetUserSearchHistoryRequest() (value *SearchHistoryListResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_user_search_history_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_user_search_history_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_user_search_history_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error150 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error151 error
		error151, err = error150.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error151
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_user_search_history_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetUserSearchHistoryRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetUserAllSubject(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiBigIntResp, err error) {
	if err = p.sendRPCDoGetUserAllSubject(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetUserAllSubject()
}

func (p *IuctThriftServiceClient) sendRPCDoGetUserAllSubject(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_user_all_subject", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetUserAllSubjectArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetUserAllSubject() (value *MultiBigIntResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_user_all_subject" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_user_all_subject failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_user_all_subject failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error152 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error153 error
		error153, err = error152.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error153
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_user_all_subject failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetUserAllSubjectResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetUserAllSubjectAndProgram(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *GuessSubjResp, err error) {
	if err = p.sendRPCDoGetUserAllSubjectAndProgram(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetUserAllSubjectAndProgram()
}

func (p *IuctThriftServiceClient) sendRPCDoGetUserAllSubjectAndProgram(req *UserCenterUserReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_user_all_subject_and_program", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetUserAllSubjectAndProgramArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetUserAllSubjectAndProgram() (value *GuessSubjResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_user_all_subject_and_program" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_user_all_subject_and_program failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_user_all_subject_and_program failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error154 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error155 error
		error155, err = error154.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error155
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_user_all_subject_and_program failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetUserAllSubjectAndProgramResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetUserSubjectProgram(req *UserCenterReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiBigIntResp, err error) {
	if err = p.sendRPCDoGetUserSubjectProgram(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetUserSubjectProgram()
}

func (p *IuctThriftServiceClient) sendRPCDoGetUserSubjectProgram(req *UserCenterReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_user_subject_program", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetUserSubjectProgramArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetUserSubjectProgram() (value *MultiBigIntResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_user_subject_program" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_user_subject_program failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_user_subject_program failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error156 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error157 error
		error157, err = error156.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error157
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_user_subject_program failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetUserSubjectProgramResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetUserProgramInfoRequest(req *UserProgramReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *UserProgramResp, err error) {
	if err = p.sendRPCDoGetUserProgramInfoRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetUserProgramInfoRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoGetUserProgramInfoRequest(req *UserProgramReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_user_program_info_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetUserProgramInfoRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetUserProgramInfoRequest() (value *UserProgramResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_user_program_info_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_user_program_info_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_user_program_info_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error158 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error159 error
		error159, err = error158.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error159
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_user_program_info_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetUserProgramInfoRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - OtRPCCtx
func (p *IuctThriftServiceClient) RPCDoGetMultipleUserProgramInfoRequest(req *MultiUserProgramReq, ot_rpc_ctx *com_types.ZipkinHeader) (r *MultiUserProgramResp, err error) {
	if err = p.sendRPCDoGetMultipleUserProgramInfoRequest(req, ot_rpc_ctx); err != nil {
		return
	}
	return p.recvRPCDoGetMultipleUserProgramInfoRequest()
}

func (p *IuctThriftServiceClient) sendRPCDoGetMultipleUserProgramInfoRequest(req *MultiUserProgramReq, ot_rpc_ctx *com_types.ZipkinHeader) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpc_do_get_multiple_user_program_info_request", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestArgs{
		Req:      req,
		OtRPCCtx: ot_rpc_ctx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IuctThriftServiceClient) recvRPCDoGetMultipleUserProgramInfoRequest() (value *MultiUserProgramResp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpc_do_get_multiple_user_program_info_request" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rpc_do_get_multiple_user_program_info_request failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rpc_do_get_multiple_user_program_info_request failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error160 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error161 error
		error161, err = error160.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error161
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpc_do_get_multiple_user_program_info_request failed: invalid message type")
		return
	}
	result := IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type IuctThriftServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      IuctThriftService
}

func (p *IuctThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *IuctThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *IuctThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewIuctThriftServiceProcessor(handler IuctThriftService) *IuctThriftServiceProcessor {

	self162 := &IuctThriftServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self162.processorMap["monitorqueryprocessstatus"] = &iuctThriftServiceProcessorMonitorqueryprocessstatus{handler: handler}
	self162.processorMap["rpc_do_user_center_comm_request"] = &iuctThriftServiceProcessorRPCDoUserCenterCommRequest{handler: handler}
	self162.processorMap["rpc_do_add_user_history_request"] = &iuctThriftServiceProcessorRPCDoAddUserHistoryRequest{handler: handler}
	self162.processorMap["rpc_do_del_user_history_request"] = &iuctThriftServiceProcessorRPCDoDelUserHistoryRequest{handler: handler}
	self162.processorMap["rpc_do_get_user_history_request"] = &iuctThriftServiceProcessorRPCDoGetUserHistoryRequest{handler: handler}
	self162.processorMap["rpc_do_get_user_history_list_request"] = &iuctThriftServiceProcessorRPCDoGetUserHistoryListRequest{handler: handler}
	self162.processorMap["rpc_do_get_user_last_program_by_seriesid"] = &iuctThriftServiceProcessorRPCDoGetUserLastProgramBySeriesid{handler: handler}
	self162.processorMap["rpc_do_get_user_program_list_by_seriesid"] = &iuctThriftServiceProcessorRPCDoGetUserProgramListBySeriesid{handler: handler}
	self162.processorMap["rpc_do_get_user_series_history"] = &iuctThriftServiceProcessorRPCDoGetUserSeriesHistory{handler: handler}
	self162.processorMap["rpc_do_get_user_watching_channel_request"] = &iuctThriftServiceProcessorRPCDoGetUserWatchingChannelRequest{handler: handler}
	self162.processorMap["rpc_do_add_user_favorite_request"] = &iuctThriftServiceProcessorRPCDoAddUserFavoriteRequest{handler: handler}
	self162.processorMap["rpc_do_del_user_favorite_request"] = &iuctThriftServiceProcessorRPCDoDelUserFavoriteRequest{handler: handler}
	self162.processorMap["rpc_do_add_multiple_user_favorite_request"] = &iuctThriftServiceProcessorRPCDoAddMultipleUserFavoriteRequest{handler: handler}
	self162.processorMap["rpc_do_del_multiple_user_favorite_request"] = &iuctThriftServiceProcessorRPCDoDelMultipleUserFavoriteRequest{handler: handler}
	self162.processorMap["rpc_do_check_is_favorite_request"] = &iuctThriftServiceProcessorRPCDoCheckIsFavoriteRequest{handler: handler}
	self162.processorMap["rpc_do_multiple_check_is_favorite_request"] = &iuctThriftServiceProcessorRPCDoMultipleCheckIsFavoriteRequest{handler: handler}
	self162.processorMap["rpc_do_check_is_favs_request"] = &iuctThriftServiceProcessorRPCDoCheckIsFavsRequest{handler: handler}
	self162.processorMap["rpc_do_multiple_check_is_favs_request"] = &iuctThriftServiceProcessorRPCDoMultipleCheckIsFavsRequest{handler: handler}
	self162.processorMap["rpc_do_get_user_favorite_list_request"] = &iuctThriftServiceProcessorRPCDoGetUserFavoriteListRequest{handler: handler}
	self162.processorMap["rpc_do_notify_user_program_update_request"] = &iuctThriftServiceProcessorRPCDoNotifyUserProgramUpdateRequest{handler: handler}
	self162.processorMap["rpc_do_program_enter_request"] = &iuctThriftServiceProcessorRPCDoProgramEnterRequest{handler: handler}
	self162.processorMap["rpc_do_program_exit_request"] = &iuctThriftServiceProcessorRPCDoProgramExitRequest{handler: handler}
	self162.processorMap["rpc_do_get_program_hits_request"] = &iuctThriftServiceProcessorRPCDoGetProgramHitsRequest{handler: handler}
	self162.processorMap["rpc_do_multiple_get_program_hits_request"] = &iuctThriftServiceProcessorRPCDoMultipleGetProgramHitsRequest{handler: handler}
	self162.processorMap["rpc_do_check_is_praise_request"] = &iuctThriftServiceProcessorRPCDoCheckIsPraiseRequest{handler: handler}
	self162.processorMap["rpc_do_multiple_check_is_praise_request"] = &iuctThriftServiceProcessorRPCDoMultipleCheckIsPraiseRequest{handler: handler}
	self162.processorMap["rpc_do_get_pid_praise_request"] = &iuctThriftServiceProcessorRPCDoGetPidPraiseRequest{handler: handler}
	self162.processorMap["rpc_do_multiple_get_pids_praise_request"] = &iuctThriftServiceProcessorRPCDoMultipleGetPidsPraiseRequest{handler: handler}
	self162.processorMap["rpc_do_get_program_demand_request"] = &iuctThriftServiceProcessorRPCDoGetProgramDemandRequest{handler: handler}
	self162.processorMap["rpc_do_get_multiple_program_demand_request"] = &iuctThriftServiceProcessorRPCDoGetMultipleProgramDemandRequest{handler: handler}
	self162.processorMap["rpc_do_get_user_subscribe_list_request"] = &iuctThriftServiceProcessorRPCDoGetUserSubscribeListRequest{handler: handler}
	self162.processorMap["rpc_do_get_user_column_list_request"] = &iuctThriftServiceProcessorRPCDoGetUserColumnListRequest{handler: handler}
	self162.processorMap["rpc_do_get_user_often_watch_channel_list_request"] = &iuctThriftServiceProcessorRPCDoGetUserOftenWatchChannelListRequest{handler: handler}
	self162.processorMap["rpc_do_get_user_interest_column_and_series_request"] = &iuctThriftServiceProcessorRPCDoGetUserInterestColumnAndSeriesRequest{handler: handler}
	self162.processorMap["rpc_do_get_user_interest_medias_request"] = &iuctThriftServiceProcessorRPCDoGetUserInterestMediasRequest{handler: handler}
	self162.processorMap["rpc_do_add_user_order_request"] = &iuctThriftServiceProcessorRPCDoAddUserOrderRequest{handler: handler}
	self162.processorMap["rpc_do_del_user_order_request"] = &iuctThriftServiceProcessorRPCDoDelUserOrderRequest{handler: handler}
	self162.processorMap["rpc_do_check_is_order_request"] = &iuctThriftServiceProcessorRPCDoCheckIsOrderRequest{handler: handler}
	self162.processorMap["rpc_do_check_multiple_is_order_request"] = &iuctThriftServiceProcessorRPCDoCheckMultipleIsOrderRequest{handler: handler}
	self162.processorMap["rpc_do_get_user_order_list_request"] = &iuctThriftServiceProcessorRPCDoGetUserOrderListRequest{handler: handler}
	self162.processorMap["rpc_do_add_share_request"] = &iuctThriftServiceProcessorRPCDoAddShareRequest{handler: handler}
	self162.processorMap["rpc_do_multiple_del_share_request"] = &iuctThriftServiceProcessorRPCDoMultipleDelShareRequest{handler: handler}
	self162.processorMap["rpc_do_get_user_share_list_request"] = &iuctThriftServiceProcessorRPCDoGetUserShareListRequest{handler: handler}
	self162.processorMap["rpc_do_get_program_share_times_request"] = &iuctThriftServiceProcessorRPCDoGetProgramShareTimesRequest{handler: handler}
	self162.processorMap["rpc_do_add_comment_request"] = &iuctThriftServiceProcessorRPCDoAddCommentRequest{handler: handler}
	self162.processorMap["rpc_do_get_program_comment_list_request"] = &iuctThriftServiceProcessorRPCDoGetProgramCommentListRequest{handler: handler}
	self162.processorMap["rpc_do_get_comment_list_by_commentid_request"] = &iuctThriftServiceProcessorRPCDoGetCommentListByCommentidRequest{handler: handler}
	self162.processorMap["rpc_do_multiple_get_comments_praise_request"] = &iuctThriftServiceProcessorRPCDoMultipleGetCommentsPraiseRequest{handler: handler}
	self162.processorMap["rpc_do_get_rank_list"] = &iuctThriftServiceProcessorRPCDoGetRankList{handler: handler}
	self162.processorMap["rpc_do_get_program_rank_info"] = &iuctThriftServiceProcessorRPCDoGetProgramRankInfo{handler: handler}
	self162.processorMap["rpc_do_get_user_search_history_request"] = &iuctThriftServiceProcessorRPCDoGetUserSearchHistoryRequest{handler: handler}
	self162.processorMap["rpc_do_get_user_all_subject"] = &iuctThriftServiceProcessorRPCDoGetUserAllSubject{handler: handler}
	self162.processorMap["rpc_do_get_user_all_subject_and_program"] = &iuctThriftServiceProcessorRPCDoGetUserAllSubjectAndProgram{handler: handler}
	self162.processorMap["rpc_do_get_user_subject_program"] = &iuctThriftServiceProcessorRPCDoGetUserSubjectProgram{handler: handler}
	self162.processorMap["rpc_do_get_user_program_info_request"] = &iuctThriftServiceProcessorRPCDoGetUserProgramInfoRequest{handler: handler}
	self162.processorMap["rpc_do_get_multiple_user_program_info_request"] = &iuctThriftServiceProcessorRPCDoGetMultipleUserProgramInfoRequest{handler: handler}
	return self162
}

func (p *IuctThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x163 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x163.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x163

}

type iuctThriftServiceProcessorMonitorqueryprocessstatus struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorMonitorqueryprocessstatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceMonitorqueryprocessstatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("monitorqueryprocessstatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceMonitorqueryprocessstatusResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.Monitorqueryprocessstatus(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing monitorqueryprocessstatus: "+err2.Error())
		oprot.WriteMessageBegin("monitorqueryprocessstatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("monitorqueryprocessstatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoUserCenterCommRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoUserCenterCommRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoUserCenterCommRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_user_center_comm_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoUserCenterCommRequestResult{}
	var retval *IuctRespBase
	var err2 error
	if retval, err2 = p.handler.RPCDoUserCenterCommRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_user_center_comm_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_user_center_comm_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_user_center_comm_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoAddUserHistoryRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoAddUserHistoryRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoAddUserHistoryRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_add_user_history_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoAddUserHistoryRequestResult{}
	var retval *IuctRespBase
	var err2 error
	if retval, err2 = p.handler.RPCDoAddUserHistoryRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_add_user_history_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_add_user_history_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_add_user_history_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoDelUserHistoryRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoDelUserHistoryRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoDelUserHistoryRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_del_user_history_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoDelUserHistoryRequestResult{}
	var retval *IuctRespBase
	var err2 error
	if retval, err2 = p.handler.RPCDoDelUserHistoryRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_del_user_history_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_del_user_history_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_del_user_history_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetUserHistoryRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetUserHistoryRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetUserHistoryRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_history_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetUserHistoryRequestResult{}
	var retval *HistoryResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetUserHistoryRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_user_history_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_history_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_user_history_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetUserHistoryListRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetUserHistoryListRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetUserHistoryListRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_history_list_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetUserHistoryListRequestResult{}
	var retval *HistoryListResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetUserHistoryListRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_user_history_list_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_history_list_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_user_history_list_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetUserLastProgramBySeriesid struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetUserLastProgramBySeriesid) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetUserLastProgramBySeriesidArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_last_program_by_seriesid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetUserLastProgramBySeriesidResult{}
	var retval *HistoryResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetUserLastProgramBySeriesid(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_user_last_program_by_seriesid: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_last_program_by_seriesid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_user_last_program_by_seriesid", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetUserProgramListBySeriesid struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetUserProgramListBySeriesid) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetUserProgramListBySeriesidArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_program_list_by_seriesid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetUserProgramListBySeriesidResult{}
	var retval *UserSeriesProHisListResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetUserProgramListBySeriesid(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_user_program_list_by_seriesid: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_program_list_by_seriesid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_user_program_list_by_seriesid", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetUserSeriesHistory struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetUserSeriesHistory) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetUserSeriesHistoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_series_history", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetUserSeriesHistoryResult{}
	var retval *UserSerirsHisListResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetUserSeriesHistory(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_user_series_history: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_series_history", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_user_series_history", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetUserWatchingChannelRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetUserWatchingChannelRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetUserWatchingChannelRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_watching_channel_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetUserWatchingChannelRequestResult{}
	var retval *IuctRespBase
	var err2 error
	if retval, err2 = p.handler.RPCDoGetUserWatchingChannelRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_user_watching_channel_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_watching_channel_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_user_watching_channel_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoAddUserFavoriteRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoAddUserFavoriteRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoAddUserFavoriteRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_add_user_favorite_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoAddUserFavoriteRequestResult{}
	var retval *IuctRespBase
	var err2 error
	if retval, err2 = p.handler.RPCDoAddUserFavoriteRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_add_user_favorite_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_add_user_favorite_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_add_user_favorite_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoDelUserFavoriteRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoDelUserFavoriteRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoDelUserFavoriteRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_del_user_favorite_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoDelUserFavoriteRequestResult{}
	var retval *IuctRespBase
	var err2 error
	if retval, err2 = p.handler.RPCDoDelUserFavoriteRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_del_user_favorite_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_del_user_favorite_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_del_user_favorite_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoAddMultipleUserFavoriteRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoAddMultipleUserFavoriteRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_add_multiple_user_favorite_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestResult{}
	var retval *IuctRespBase
	var err2 error
	if retval, err2 = p.handler.RPCDoAddMultipleUserFavoriteRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_add_multiple_user_favorite_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_add_multiple_user_favorite_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_add_multiple_user_favorite_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoDelMultipleUserFavoriteRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoDelMultipleUserFavoriteRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_del_multiple_user_favorite_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestResult{}
	var retval *IuctRespBase
	var err2 error
	if retval, err2 = p.handler.RPCDoDelMultipleUserFavoriteRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_del_multiple_user_favorite_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_del_multiple_user_favorite_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_del_multiple_user_favorite_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoCheckIsFavoriteRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoCheckIsFavoriteRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoCheckIsFavoriteRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_check_is_favorite_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoCheckIsFavoriteRequestResult{}
	var retval *IuctRespBase
	var err2 error
	if retval, err2 = p.handler.RPCDoCheckIsFavoriteRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_check_is_favorite_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_check_is_favorite_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_check_is_favorite_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoMultipleCheckIsFavoriteRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoMultipleCheckIsFavoriteRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_multiple_check_is_favorite_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestResult{}
	var retval *MultiBoolResp
	var err2 error
	if retval, err2 = p.handler.RPCDoMultipleCheckIsFavoriteRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_multiple_check_is_favorite_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_multiple_check_is_favorite_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_multiple_check_is_favorite_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoCheckIsFavsRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoCheckIsFavsRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoCheckIsFavsRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_check_is_favs_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoCheckIsFavsRequestResult{}
	var retval *IsFavsResp
	var err2 error
	if retval, err2 = p.handler.RPCDoCheckIsFavsRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_check_is_favs_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_check_is_favs_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_check_is_favs_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoMultipleCheckIsFavsRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoMultipleCheckIsFavsRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoMultipleCheckIsFavsRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_multiple_check_is_favs_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoMultipleCheckIsFavsRequestResult{}
	var retval *MultiIsFavsResp
	var err2 error
	if retval, err2 = p.handler.RPCDoMultipleCheckIsFavsRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_multiple_check_is_favs_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_multiple_check_is_favs_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_multiple_check_is_favs_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetUserFavoriteListRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetUserFavoriteListRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetUserFavoriteListRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_favorite_list_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetUserFavoriteListRequestResult{}
	var retval *FavoriteListResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetUserFavoriteListRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_user_favorite_list_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_favorite_list_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_user_favorite_list_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoNotifyUserProgramUpdateRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoNotifyUserProgramUpdateRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_notify_user_program_update_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestResult{}
	var retval *IuctRespBase
	var err2 error
	if retval, err2 = p.handler.RPCDoNotifyUserProgramUpdateRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_notify_user_program_update_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_notify_user_program_update_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_notify_user_program_update_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoProgramEnterRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoProgramEnterRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoProgramEnterRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_program_enter_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoProgramEnterRequestResult{}
	var retval *IuctRespBase
	var err2 error
	if retval, err2 = p.handler.RPCDoProgramEnterRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_program_enter_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_program_enter_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_program_enter_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoProgramExitRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoProgramExitRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoProgramExitRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_program_exit_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoProgramExitRequestResult{}
	var retval *IuctRespBase
	var err2 error
	if retval, err2 = p.handler.RPCDoProgramExitRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_program_exit_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_program_exit_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_program_exit_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetProgramHitsRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetProgramHitsRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetProgramHitsRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_program_hits_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetProgramHitsRequestResult{}
	var retval *IuctRespBase
	var err2 error
	if retval, err2 = p.handler.RPCDoGetProgramHitsRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_program_hits_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_program_hits_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_program_hits_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoMultipleGetProgramHitsRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoMultipleGetProgramHitsRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoMultipleGetProgramHitsRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_multiple_get_program_hits_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoMultipleGetProgramHitsRequestResult{}
	var retval *MultiHitsResp
	var err2 error
	if retval, err2 = p.handler.RPCDoMultipleGetProgramHitsRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_multiple_get_program_hits_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_multiple_get_program_hits_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_multiple_get_program_hits_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoCheckIsPraiseRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoCheckIsPraiseRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoCheckIsPraiseRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_check_is_praise_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoCheckIsPraiseRequestResult{}
	var retval *IuctRespBase
	var err2 error
	if retval, err2 = p.handler.RPCDoCheckIsPraiseRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_check_is_praise_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_check_is_praise_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_check_is_praise_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoMultipleCheckIsPraiseRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoMultipleCheckIsPraiseRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_multiple_check_is_praise_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestResult{}
	var retval *MultiIntResp
	var err2 error
	if retval, err2 = p.handler.RPCDoMultipleCheckIsPraiseRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_multiple_check_is_praise_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_multiple_check_is_praise_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_multiple_check_is_praise_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetPidPraiseRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetPidPraiseRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetPidPraiseRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_pid_praise_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetPidPraiseRequestResult{}
	var retval *IuctRespBase
	var err2 error
	if retval, err2 = p.handler.RPCDoGetPidPraiseRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_pid_praise_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_pid_praise_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_pid_praise_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoMultipleGetPidsPraiseRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoMultipleGetPidsPraiseRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_multiple_get_pids_praise_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestResult{}
	var retval *MultiPraiseResp
	var err2 error
	if retval, err2 = p.handler.RPCDoMultipleGetPidsPraiseRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_multiple_get_pids_praise_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_multiple_get_pids_praise_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_multiple_get_pids_praise_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetProgramDemandRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetProgramDemandRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetProgramDemandRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_program_demand_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetProgramDemandRequestResult{}
	var retval *DemandResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetProgramDemandRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_program_demand_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_program_demand_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_program_demand_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetMultipleProgramDemandRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetMultipleProgramDemandRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetMultipleProgramDemandRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_multiple_program_demand_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetMultipleProgramDemandRequestResult{}
	var retval *MultipleDemandResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetMultipleProgramDemandRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_multiple_program_demand_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_multiple_program_demand_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_multiple_program_demand_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetUserSubscribeListRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetUserSubscribeListRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetUserSubscribeListRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_subscribe_list_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetUserSubscribeListRequestResult{}
	var retval *FavoriteListResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetUserSubscribeListRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_user_subscribe_list_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_subscribe_list_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_user_subscribe_list_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetUserColumnListRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetUserColumnListRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetUserColumnListRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_column_list_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetUserColumnListRequestResult{}
	var retval *UserColumnResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetUserColumnListRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_user_column_list_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_column_list_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_user_column_list_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetUserOftenWatchChannelListRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetUserOftenWatchChannelListRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_often_watch_channel_list_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestResult{}
	var retval *MultiBigIntResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetUserOftenWatchChannelListRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_user_often_watch_channel_list_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_often_watch_channel_list_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_user_often_watch_channel_list_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetUserInterestColumnAndSeriesRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetUserInterestColumnAndSeriesRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_interest_column_and_series_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestResult{}
	var retval *MultiBigIntResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetUserInterestColumnAndSeriesRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_user_interest_column_and_series_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_interest_column_and_series_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_user_interest_column_and_series_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetUserInterestMediasRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetUserInterestMediasRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetUserInterestMediasRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_interest_medias_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetUserInterestMediasRequestResult{}
	var retval *MultiIntResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetUserInterestMediasRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_user_interest_medias_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_interest_medias_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_user_interest_medias_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoAddUserOrderRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoAddUserOrderRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoAddUserOrderRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_add_user_order_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoAddUserOrderRequestResult{}
	var retval *IuctRespBase
	var err2 error
	if retval, err2 = p.handler.RPCDoAddUserOrderRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_add_user_order_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_add_user_order_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_add_user_order_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoDelUserOrderRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoDelUserOrderRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoDelUserOrderRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_del_user_order_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoDelUserOrderRequestResult{}
	var retval *IuctRespBase
	var err2 error
	if retval, err2 = p.handler.RPCDoDelUserOrderRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_del_user_order_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_del_user_order_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_del_user_order_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoCheckIsOrderRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoCheckIsOrderRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoCheckIsOrderRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_check_is_order_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoCheckIsOrderRequestResult{}
	var retval *IuctRespBase
	var err2 error
	if retval, err2 = p.handler.RPCDoCheckIsOrderRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_check_is_order_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_check_is_order_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_check_is_order_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoCheckMultipleIsOrderRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoCheckMultipleIsOrderRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoCheckMultipleIsOrderRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_check_multiple_is_order_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoCheckMultipleIsOrderRequestResult{}
	var retval *MultiIntResp
	var err2 error
	if retval, err2 = p.handler.RPCDoCheckMultipleIsOrderRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_check_multiple_is_order_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_check_multiple_is_order_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_check_multiple_is_order_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetUserOrderListRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetUserOrderListRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetUserOrderListRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_order_list_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetUserOrderListRequestResult{}
	var retval *OrderListResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetUserOrderListRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_user_order_list_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_order_list_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_user_order_list_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoAddShareRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoAddShareRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoAddShareRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_add_share_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoAddShareRequestResult{}
	var retval *IuctRespBase
	var err2 error
	if retval, err2 = p.handler.RPCDoAddShareRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_add_share_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_add_share_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_add_share_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoMultipleDelShareRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoMultipleDelShareRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoMultipleDelShareRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_multiple_del_share_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoMultipleDelShareRequestResult{}
	var retval *IuctRespBase
	var err2 error
	if retval, err2 = p.handler.RPCDoMultipleDelShareRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_multiple_del_share_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_multiple_del_share_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_multiple_del_share_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetUserShareListRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetUserShareListRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetUserShareListRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_share_list_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetUserShareListRequestResult{}
	var retval *ShareListResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetUserShareListRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_user_share_list_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_share_list_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_user_share_list_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetProgramShareTimesRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetProgramShareTimesRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetProgramShareTimesRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_program_share_times_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetProgramShareTimesRequestResult{}
	var retval *IuctRespBase
	var err2 error
	if retval, err2 = p.handler.RPCDoGetProgramShareTimesRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_program_share_times_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_program_share_times_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_program_share_times_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoAddCommentRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoAddCommentRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoAddCommentRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_add_comment_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoAddCommentRequestResult{}
	var retval *IuctRespBase
	var err2 error
	if retval, err2 = p.handler.RPCDoAddCommentRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_add_comment_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_add_comment_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_add_comment_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetProgramCommentListRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetProgramCommentListRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetProgramCommentListRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_program_comment_list_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetProgramCommentListRequestResult{}
	var retval *CommentListResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetProgramCommentListRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_program_comment_list_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_program_comment_list_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_program_comment_list_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetCommentListByCommentidRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetCommentListByCommentidRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetCommentListByCommentidRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_comment_list_by_commentid_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetCommentListByCommentidRequestResult{}
	var retval *CommentListResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetCommentListByCommentidRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_comment_list_by_commentid_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_comment_list_by_commentid_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_comment_list_by_commentid_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoMultipleGetCommentsPraiseRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoMultipleGetCommentsPraiseRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_multiple_get_comments_praise_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestResult{}
	var retval *MultiPraiseResp
	var err2 error
	if retval, err2 = p.handler.RPCDoMultipleGetCommentsPraiseRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_multiple_get_comments_praise_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_multiple_get_comments_praise_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_multiple_get_comments_praise_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetRankList struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetRankList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetRankListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_rank_list", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetRankListResult{}
	var retval *RankListResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetRankList(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_rank_list: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_rank_list", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_rank_list", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetProgramRankInfo struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetProgramRankInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetProgramRankInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_program_rank_info", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetProgramRankInfoResult{}
	var retval *ProgramRankInfoResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetProgramRankInfo(args.NPid, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_program_rank_info: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_program_rank_info", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_program_rank_info", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetUserSearchHistoryRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetUserSearchHistoryRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetUserSearchHistoryRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_search_history_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetUserSearchHistoryRequestResult{}
	var retval *SearchHistoryListResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetUserSearchHistoryRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_user_search_history_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_search_history_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_user_search_history_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetUserAllSubject struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetUserAllSubject) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetUserAllSubjectArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_all_subject", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetUserAllSubjectResult{}
	var retval *MultiBigIntResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetUserAllSubject(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_user_all_subject: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_all_subject", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_user_all_subject", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetUserAllSubjectAndProgram struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetUserAllSubjectAndProgram) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetUserAllSubjectAndProgramArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_all_subject_and_program", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetUserAllSubjectAndProgramResult{}
	var retval *GuessSubjResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetUserAllSubjectAndProgram(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_user_all_subject_and_program: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_all_subject_and_program", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_user_all_subject_and_program", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetUserSubjectProgram struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetUserSubjectProgram) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetUserSubjectProgramArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_subject_program", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetUserSubjectProgramResult{}
	var retval *MultiBigIntResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetUserSubjectProgram(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_user_subject_program: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_subject_program", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_user_subject_program", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetUserProgramInfoRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetUserProgramInfoRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetUserProgramInfoRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_program_info_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetUserProgramInfoRequestResult{}
	var retval *UserProgramResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetUserProgramInfoRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_user_program_info_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_user_program_info_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_user_program_info_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iuctThriftServiceProcessorRPCDoGetMultipleUserProgramInfoRequest struct {
	handler IuctThriftService
}

func (p *iuctThriftServiceProcessorRPCDoGetMultipleUserProgramInfoRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rpc_do_get_multiple_user_program_info_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestResult{}
	var retval *MultiUserProgramResp
	var err2 error
	if retval, err2 = p.handler.RPCDoGetMultipleUserProgramInfoRequest(args.Req, args.OtRPCCtx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpc_do_get_multiple_user_program_info_request: "+err2.Error())
		oprot.WriteMessageBegin("rpc_do_get_multiple_user_program_info_request", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rpc_do_get_multiple_user_program_info_request", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type IuctThriftServiceMonitorqueryprocessstatusArgs struct {
}

func NewIuctThriftServiceMonitorqueryprocessstatusArgs() *IuctThriftServiceMonitorqueryprocessstatusArgs {
	return &IuctThriftServiceMonitorqueryprocessstatusArgs{}
}

func (p *IuctThriftServiceMonitorqueryprocessstatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceMonitorqueryprocessstatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("monitorqueryprocessstatus_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceMonitorqueryprocessstatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceMonitorqueryprocessstatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceMonitorqueryprocessstatusResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceMonitorqueryprocessstatusResult() *IuctThriftServiceMonitorqueryprocessstatusResult {
	return &IuctThriftServiceMonitorqueryprocessstatusResult{}
}

var IuctThriftServiceMonitorqueryprocessstatusResult_Success_DEFAULT int32

func (p *IuctThriftServiceMonitorqueryprocessstatusResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return IuctThriftServiceMonitorqueryprocessstatusResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *IuctThriftServiceMonitorqueryprocessstatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceMonitorqueryprocessstatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceMonitorqueryprocessstatusResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *IuctThriftServiceMonitorqueryprocessstatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("monitorqueryprocessstatus_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceMonitorqueryprocessstatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceMonitorqueryprocessstatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceMonitorqueryprocessstatusResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoUserCenterCommRequestArgs struct {
	Req      *UserCenterCommReq      `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoUserCenterCommRequestArgs() *IuctThriftServiceRPCDoUserCenterCommRequestArgs {
	return &IuctThriftServiceRPCDoUserCenterCommRequestArgs{}
}

var IuctThriftServiceRPCDoUserCenterCommRequestArgs_Req_DEFAULT *UserCenterCommReq

func (p *IuctThriftServiceRPCDoUserCenterCommRequestArgs) GetReq() *UserCenterCommReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoUserCenterCommRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoUserCenterCommRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoUserCenterCommRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoUserCenterCommRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoUserCenterCommRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoUserCenterCommRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoUserCenterCommRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoUserCenterCommRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterCommReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoUserCenterCommRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoUserCenterCommRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_user_center_comm_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoUserCenterCommRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoUserCenterCommRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoUserCenterCommRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoUserCenterCommRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoUserCenterCommRequestResult struct {
	Success *IuctRespBase `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoUserCenterCommRequestResult() *IuctThriftServiceRPCDoUserCenterCommRequestResult {
	return &IuctThriftServiceRPCDoUserCenterCommRequestResult{}
}

var IuctThriftServiceRPCDoUserCenterCommRequestResult_Success_DEFAULT *IuctRespBase

func (p *IuctThriftServiceRPCDoUserCenterCommRequestResult) GetSuccess() *IuctRespBase {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoUserCenterCommRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoUserCenterCommRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoUserCenterCommRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoUserCenterCommRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IuctRespBase{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoUserCenterCommRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_user_center_comm_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoUserCenterCommRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoUserCenterCommRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoUserCenterCommRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoAddUserHistoryRequestArgs struct {
	Req      *iuct_types.USER_HISTORY `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader  `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoAddUserHistoryRequestArgs() *IuctThriftServiceRPCDoAddUserHistoryRequestArgs {
	return &IuctThriftServiceRPCDoAddUserHistoryRequestArgs{}
}

var IuctThriftServiceRPCDoAddUserHistoryRequestArgs_Req_DEFAULT *iuct_types.USER_HISTORY

func (p *IuctThriftServiceRPCDoAddUserHistoryRequestArgs) GetReq() *iuct_types.USER_HISTORY {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoAddUserHistoryRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoAddUserHistoryRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoAddUserHistoryRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoAddUserHistoryRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoAddUserHistoryRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoAddUserHistoryRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoAddUserHistoryRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddUserHistoryRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &iuct_types.USER_HISTORY{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddUserHistoryRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddUserHistoryRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_add_user_history_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddUserHistoryRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoAddUserHistoryRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoAddUserHistoryRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoAddUserHistoryRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoAddUserHistoryRequestResult struct {
	Success *IuctRespBase `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoAddUserHistoryRequestResult() *IuctThriftServiceRPCDoAddUserHistoryRequestResult {
	return &IuctThriftServiceRPCDoAddUserHistoryRequestResult{}
}

var IuctThriftServiceRPCDoAddUserHistoryRequestResult_Success_DEFAULT *IuctRespBase

func (p *IuctThriftServiceRPCDoAddUserHistoryRequestResult) GetSuccess() *IuctRespBase {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoAddUserHistoryRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoAddUserHistoryRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoAddUserHistoryRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddUserHistoryRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IuctRespBase{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddUserHistoryRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_add_user_history_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddUserHistoryRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoAddUserHistoryRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoAddUserHistoryRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoDelUserHistoryRequestArgs struct {
	Req      *iuct_types.USER_HISTORY `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader  `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoDelUserHistoryRequestArgs() *IuctThriftServiceRPCDoDelUserHistoryRequestArgs {
	return &IuctThriftServiceRPCDoDelUserHistoryRequestArgs{}
}

var IuctThriftServiceRPCDoDelUserHistoryRequestArgs_Req_DEFAULT *iuct_types.USER_HISTORY

func (p *IuctThriftServiceRPCDoDelUserHistoryRequestArgs) GetReq() *iuct_types.USER_HISTORY {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoDelUserHistoryRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoDelUserHistoryRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoDelUserHistoryRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoDelUserHistoryRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoDelUserHistoryRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoDelUserHistoryRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoDelUserHistoryRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelUserHistoryRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &iuct_types.USER_HISTORY{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelUserHistoryRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelUserHistoryRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_del_user_history_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelUserHistoryRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoDelUserHistoryRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoDelUserHistoryRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoDelUserHistoryRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoDelUserHistoryRequestResult struct {
	Success *IuctRespBase `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoDelUserHistoryRequestResult() *IuctThriftServiceRPCDoDelUserHistoryRequestResult {
	return &IuctThriftServiceRPCDoDelUserHistoryRequestResult{}
}

var IuctThriftServiceRPCDoDelUserHistoryRequestResult_Success_DEFAULT *IuctRespBase

func (p *IuctThriftServiceRPCDoDelUserHistoryRequestResult) GetSuccess() *IuctRespBase {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoDelUserHistoryRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoDelUserHistoryRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoDelUserHistoryRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelUserHistoryRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IuctRespBase{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelUserHistoryRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_del_user_history_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelUserHistoryRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoDelUserHistoryRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoDelUserHistoryRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetUserHistoryRequestArgs struct {
	Req      *HistoryReq             `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetUserHistoryRequestArgs() *IuctThriftServiceRPCDoGetUserHistoryRequestArgs {
	return &IuctThriftServiceRPCDoGetUserHistoryRequestArgs{}
}

var IuctThriftServiceRPCDoGetUserHistoryRequestArgs_Req_DEFAULT *HistoryReq

func (p *IuctThriftServiceRPCDoGetUserHistoryRequestArgs) GetReq() *HistoryReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetUserHistoryRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetUserHistoryRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetUserHistoryRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetUserHistoryRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetUserHistoryRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetUserHistoryRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetUserHistoryRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserHistoryRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &HistoryReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserHistoryRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserHistoryRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_history_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserHistoryRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserHistoryRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserHistoryRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserHistoryRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetUserHistoryRequestResult struct {
	Success *HistoryResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetUserHistoryRequestResult() *IuctThriftServiceRPCDoGetUserHistoryRequestResult {
	return &IuctThriftServiceRPCDoGetUserHistoryRequestResult{}
}

var IuctThriftServiceRPCDoGetUserHistoryRequestResult_Success_DEFAULT *HistoryResp

func (p *IuctThriftServiceRPCDoGetUserHistoryRequestResult) GetSuccess() *HistoryResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetUserHistoryRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetUserHistoryRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetUserHistoryRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserHistoryRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &HistoryResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserHistoryRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_history_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserHistoryRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserHistoryRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserHistoryRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetUserHistoryListRequestArgs struct {
	Req      *HistoryListReq         `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetUserHistoryListRequestArgs() *IuctThriftServiceRPCDoGetUserHistoryListRequestArgs {
	return &IuctThriftServiceRPCDoGetUserHistoryListRequestArgs{}
}

var IuctThriftServiceRPCDoGetUserHistoryListRequestArgs_Req_DEFAULT *HistoryListReq

func (p *IuctThriftServiceRPCDoGetUserHistoryListRequestArgs) GetReq() *HistoryListReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetUserHistoryListRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetUserHistoryListRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetUserHistoryListRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetUserHistoryListRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetUserHistoryListRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetUserHistoryListRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetUserHistoryListRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserHistoryListRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &HistoryListReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserHistoryListRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserHistoryListRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_history_list_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserHistoryListRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserHistoryListRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserHistoryListRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserHistoryListRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetUserHistoryListRequestResult struct {
	Success *HistoryListResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetUserHistoryListRequestResult() *IuctThriftServiceRPCDoGetUserHistoryListRequestResult {
	return &IuctThriftServiceRPCDoGetUserHistoryListRequestResult{}
}

var IuctThriftServiceRPCDoGetUserHistoryListRequestResult_Success_DEFAULT *HistoryListResp

func (p *IuctThriftServiceRPCDoGetUserHistoryListRequestResult) GetSuccess() *HistoryListResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetUserHistoryListRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetUserHistoryListRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetUserHistoryListRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserHistoryListRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &HistoryListResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserHistoryListRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_history_list_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserHistoryListRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserHistoryListRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserHistoryListRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetUserLastProgramBySeriesidArgs struct {
	Req      *UserCenterReq          `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetUserLastProgramBySeriesidArgs() *IuctThriftServiceRPCDoGetUserLastProgramBySeriesidArgs {
	return &IuctThriftServiceRPCDoGetUserLastProgramBySeriesidArgs{}
}

var IuctThriftServiceRPCDoGetUserLastProgramBySeriesidArgs_Req_DEFAULT *UserCenterReq

func (p *IuctThriftServiceRPCDoGetUserLastProgramBySeriesidArgs) GetReq() *UserCenterReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetUserLastProgramBySeriesidArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetUserLastProgramBySeriesidArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetUserLastProgramBySeriesidArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetUserLastProgramBySeriesidArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetUserLastProgramBySeriesidArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetUserLastProgramBySeriesidArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetUserLastProgramBySeriesidArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserLastProgramBySeriesidArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserLastProgramBySeriesidArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserLastProgramBySeriesidArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_last_program_by_seriesid_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserLastProgramBySeriesidArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserLastProgramBySeriesidArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserLastProgramBySeriesidArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserLastProgramBySeriesidArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetUserLastProgramBySeriesidResult struct {
	Success *HistoryResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetUserLastProgramBySeriesidResult() *IuctThriftServiceRPCDoGetUserLastProgramBySeriesidResult {
	return &IuctThriftServiceRPCDoGetUserLastProgramBySeriesidResult{}
}

var IuctThriftServiceRPCDoGetUserLastProgramBySeriesidResult_Success_DEFAULT *HistoryResp

func (p *IuctThriftServiceRPCDoGetUserLastProgramBySeriesidResult) GetSuccess() *HistoryResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetUserLastProgramBySeriesidResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetUserLastProgramBySeriesidResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetUserLastProgramBySeriesidResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserLastProgramBySeriesidResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &HistoryResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserLastProgramBySeriesidResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_last_program_by_seriesid_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserLastProgramBySeriesidResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserLastProgramBySeriesidResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserLastProgramBySeriesidResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetUserProgramListBySeriesidArgs struct {
	Req      *UserCenterReq          `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetUserProgramListBySeriesidArgs() *IuctThriftServiceRPCDoGetUserProgramListBySeriesidArgs {
	return &IuctThriftServiceRPCDoGetUserProgramListBySeriesidArgs{}
}

var IuctThriftServiceRPCDoGetUserProgramListBySeriesidArgs_Req_DEFAULT *UserCenterReq

func (p *IuctThriftServiceRPCDoGetUserProgramListBySeriesidArgs) GetReq() *UserCenterReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetUserProgramListBySeriesidArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetUserProgramListBySeriesidArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetUserProgramListBySeriesidArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetUserProgramListBySeriesidArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetUserProgramListBySeriesidArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetUserProgramListBySeriesidArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetUserProgramListBySeriesidArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserProgramListBySeriesidArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserProgramListBySeriesidArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserProgramListBySeriesidArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_program_list_by_seriesid_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserProgramListBySeriesidArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserProgramListBySeriesidArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserProgramListBySeriesidArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserProgramListBySeriesidArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetUserProgramListBySeriesidResult struct {
	Success *UserSeriesProHisListResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetUserProgramListBySeriesidResult() *IuctThriftServiceRPCDoGetUserProgramListBySeriesidResult {
	return &IuctThriftServiceRPCDoGetUserProgramListBySeriesidResult{}
}

var IuctThriftServiceRPCDoGetUserProgramListBySeriesidResult_Success_DEFAULT *UserSeriesProHisListResp

func (p *IuctThriftServiceRPCDoGetUserProgramListBySeriesidResult) GetSuccess() *UserSeriesProHisListResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetUserProgramListBySeriesidResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetUserProgramListBySeriesidResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetUserProgramListBySeriesidResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserProgramListBySeriesidResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UserSeriesProHisListResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserProgramListBySeriesidResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_program_list_by_seriesid_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserProgramListBySeriesidResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserProgramListBySeriesidResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserProgramListBySeriesidResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetUserSeriesHistoryArgs struct {
	Req      *UserCenterUserReq      `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetUserSeriesHistoryArgs() *IuctThriftServiceRPCDoGetUserSeriesHistoryArgs {
	return &IuctThriftServiceRPCDoGetUserSeriesHistoryArgs{}
}

var IuctThriftServiceRPCDoGetUserSeriesHistoryArgs_Req_DEFAULT *UserCenterUserReq

func (p *IuctThriftServiceRPCDoGetUserSeriesHistoryArgs) GetReq() *UserCenterUserReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetUserSeriesHistoryArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetUserSeriesHistoryArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetUserSeriesHistoryArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetUserSeriesHistoryArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetUserSeriesHistoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetUserSeriesHistoryArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetUserSeriesHistoryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSeriesHistoryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSeriesHistoryArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSeriesHistoryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_series_history_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSeriesHistoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserSeriesHistoryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserSeriesHistoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserSeriesHistoryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetUserSeriesHistoryResult struct {
	Success *UserSerirsHisListResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetUserSeriesHistoryResult() *IuctThriftServiceRPCDoGetUserSeriesHistoryResult {
	return &IuctThriftServiceRPCDoGetUserSeriesHistoryResult{}
}

var IuctThriftServiceRPCDoGetUserSeriesHistoryResult_Success_DEFAULT *UserSerirsHisListResp

func (p *IuctThriftServiceRPCDoGetUserSeriesHistoryResult) GetSuccess() *UserSerirsHisListResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetUserSeriesHistoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetUserSeriesHistoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetUserSeriesHistoryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSeriesHistoryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UserSerirsHisListResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSeriesHistoryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_series_history_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSeriesHistoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserSeriesHistoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserSeriesHistoryResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetUserWatchingChannelRequestArgs struct {
	Req      *UserCenterUserReq      `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetUserWatchingChannelRequestArgs() *IuctThriftServiceRPCDoGetUserWatchingChannelRequestArgs {
	return &IuctThriftServiceRPCDoGetUserWatchingChannelRequestArgs{}
}

var IuctThriftServiceRPCDoGetUserWatchingChannelRequestArgs_Req_DEFAULT *UserCenterUserReq

func (p *IuctThriftServiceRPCDoGetUserWatchingChannelRequestArgs) GetReq() *UserCenterUserReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetUserWatchingChannelRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetUserWatchingChannelRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetUserWatchingChannelRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetUserWatchingChannelRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetUserWatchingChannelRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetUserWatchingChannelRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetUserWatchingChannelRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserWatchingChannelRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserWatchingChannelRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserWatchingChannelRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_watching_channel_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserWatchingChannelRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserWatchingChannelRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserWatchingChannelRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserWatchingChannelRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetUserWatchingChannelRequestResult struct {
	Success *IuctRespBase `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetUserWatchingChannelRequestResult() *IuctThriftServiceRPCDoGetUserWatchingChannelRequestResult {
	return &IuctThriftServiceRPCDoGetUserWatchingChannelRequestResult{}
}

var IuctThriftServiceRPCDoGetUserWatchingChannelRequestResult_Success_DEFAULT *IuctRespBase

func (p *IuctThriftServiceRPCDoGetUserWatchingChannelRequestResult) GetSuccess() *IuctRespBase {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetUserWatchingChannelRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetUserWatchingChannelRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetUserWatchingChannelRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserWatchingChannelRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IuctRespBase{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserWatchingChannelRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_watching_channel_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserWatchingChannelRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserWatchingChannelRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserWatchingChannelRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoAddUserFavoriteRequestArgs struct {
	Req      *iuct_types.USER_FAVORITE `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader   `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoAddUserFavoriteRequestArgs() *IuctThriftServiceRPCDoAddUserFavoriteRequestArgs {
	return &IuctThriftServiceRPCDoAddUserFavoriteRequestArgs{}
}

var IuctThriftServiceRPCDoAddUserFavoriteRequestArgs_Req_DEFAULT *iuct_types.USER_FAVORITE

func (p *IuctThriftServiceRPCDoAddUserFavoriteRequestArgs) GetReq() *iuct_types.USER_FAVORITE {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoAddUserFavoriteRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoAddUserFavoriteRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoAddUserFavoriteRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoAddUserFavoriteRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoAddUserFavoriteRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoAddUserFavoriteRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoAddUserFavoriteRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddUserFavoriteRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &iuct_types.USER_FAVORITE{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddUserFavoriteRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddUserFavoriteRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_add_user_favorite_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddUserFavoriteRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoAddUserFavoriteRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoAddUserFavoriteRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoAddUserFavoriteRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoAddUserFavoriteRequestResult struct {
	Success *IuctRespBase `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoAddUserFavoriteRequestResult() *IuctThriftServiceRPCDoAddUserFavoriteRequestResult {
	return &IuctThriftServiceRPCDoAddUserFavoriteRequestResult{}
}

var IuctThriftServiceRPCDoAddUserFavoriteRequestResult_Success_DEFAULT *IuctRespBase

func (p *IuctThriftServiceRPCDoAddUserFavoriteRequestResult) GetSuccess() *IuctRespBase {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoAddUserFavoriteRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoAddUserFavoriteRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoAddUserFavoriteRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddUserFavoriteRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IuctRespBase{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddUserFavoriteRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_add_user_favorite_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddUserFavoriteRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoAddUserFavoriteRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoAddUserFavoriteRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoDelUserFavoriteRequestArgs struct {
	Req      *iuct_types.USER_FAVORITE `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader   `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoDelUserFavoriteRequestArgs() *IuctThriftServiceRPCDoDelUserFavoriteRequestArgs {
	return &IuctThriftServiceRPCDoDelUserFavoriteRequestArgs{}
}

var IuctThriftServiceRPCDoDelUserFavoriteRequestArgs_Req_DEFAULT *iuct_types.USER_FAVORITE

func (p *IuctThriftServiceRPCDoDelUserFavoriteRequestArgs) GetReq() *iuct_types.USER_FAVORITE {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoDelUserFavoriteRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoDelUserFavoriteRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoDelUserFavoriteRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoDelUserFavoriteRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoDelUserFavoriteRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoDelUserFavoriteRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoDelUserFavoriteRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelUserFavoriteRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &iuct_types.USER_FAVORITE{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelUserFavoriteRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelUserFavoriteRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_del_user_favorite_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelUserFavoriteRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoDelUserFavoriteRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoDelUserFavoriteRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoDelUserFavoriteRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoDelUserFavoriteRequestResult struct {
	Success *IuctRespBase `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoDelUserFavoriteRequestResult() *IuctThriftServiceRPCDoDelUserFavoriteRequestResult {
	return &IuctThriftServiceRPCDoDelUserFavoriteRequestResult{}
}

var IuctThriftServiceRPCDoDelUserFavoriteRequestResult_Success_DEFAULT *IuctRespBase

func (p *IuctThriftServiceRPCDoDelUserFavoriteRequestResult) GetSuccess() *IuctRespBase {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoDelUserFavoriteRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoDelUserFavoriteRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoDelUserFavoriteRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelUserFavoriteRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IuctRespBase{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelUserFavoriteRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_del_user_favorite_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelUserFavoriteRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoDelUserFavoriteRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoDelUserFavoriteRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestArgs struct {
	Req      *MultiFavoriteReq       `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoAddMultipleUserFavoriteRequestArgs() *IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestArgs {
	return &IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestArgs{}
}

var IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestArgs_Req_DEFAULT *MultiFavoriteReq

func (p *IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestArgs) GetReq() *MultiFavoriteReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &MultiFavoriteReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_add_multiple_user_favorite_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestResult struct {
	Success *IuctRespBase `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoAddMultipleUserFavoriteRequestResult() *IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestResult {
	return &IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestResult{}
}

var IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestResult_Success_DEFAULT *IuctRespBase

func (p *IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestResult) GetSuccess() *IuctRespBase {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IuctRespBase{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_add_multiple_user_favorite_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoAddMultipleUserFavoriteRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestArgs struct {
	Req      *MultiFavoriteReq       `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoDelMultipleUserFavoriteRequestArgs() *IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestArgs {
	return &IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestArgs{}
}

var IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestArgs_Req_DEFAULT *MultiFavoriteReq

func (p *IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestArgs) GetReq() *MultiFavoriteReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &MultiFavoriteReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_del_multiple_user_favorite_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestResult struct {
	Success *IuctRespBase `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoDelMultipleUserFavoriteRequestResult() *IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestResult {
	return &IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestResult{}
}

var IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestResult_Success_DEFAULT *IuctRespBase

func (p *IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestResult) GetSuccess() *IuctRespBase {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IuctRespBase{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_del_multiple_user_favorite_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoDelMultipleUserFavoriteRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoCheckIsFavoriteRequestArgs struct {
	Req      *UserCenterUserReq      `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoCheckIsFavoriteRequestArgs() *IuctThriftServiceRPCDoCheckIsFavoriteRequestArgs {
	return &IuctThriftServiceRPCDoCheckIsFavoriteRequestArgs{}
}

var IuctThriftServiceRPCDoCheckIsFavoriteRequestArgs_Req_DEFAULT *UserCenterUserReq

func (p *IuctThriftServiceRPCDoCheckIsFavoriteRequestArgs) GetReq() *UserCenterUserReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoCheckIsFavoriteRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoCheckIsFavoriteRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoCheckIsFavoriteRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoCheckIsFavoriteRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoCheckIsFavoriteRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoCheckIsFavoriteRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoCheckIsFavoriteRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsFavoriteRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsFavoriteRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsFavoriteRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_check_is_favorite_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsFavoriteRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoCheckIsFavoriteRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoCheckIsFavoriteRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoCheckIsFavoriteRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoCheckIsFavoriteRequestResult struct {
	Success *IuctRespBase `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoCheckIsFavoriteRequestResult() *IuctThriftServiceRPCDoCheckIsFavoriteRequestResult {
	return &IuctThriftServiceRPCDoCheckIsFavoriteRequestResult{}
}

var IuctThriftServiceRPCDoCheckIsFavoriteRequestResult_Success_DEFAULT *IuctRespBase

func (p *IuctThriftServiceRPCDoCheckIsFavoriteRequestResult) GetSuccess() *IuctRespBase {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoCheckIsFavoriteRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoCheckIsFavoriteRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoCheckIsFavoriteRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsFavoriteRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IuctRespBase{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsFavoriteRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_check_is_favorite_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsFavoriteRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoCheckIsFavoriteRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoCheckIsFavoriteRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestArgs struct {
	Req      *MultiIntReq            `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestArgs() *IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestArgs {
	return &IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestArgs{}
}

var IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestArgs_Req_DEFAULT *MultiIntReq

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestArgs) GetReq() *MultiIntReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &MultiIntReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_multiple_check_is_favorite_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestResult struct {
	Success *MultiBoolResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestResult() *IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestResult {
	return &IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestResult{}
}

var IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestResult_Success_DEFAULT *MultiBoolResp

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestResult) GetSuccess() *MultiBoolResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MultiBoolResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_multiple_check_is_favorite_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoMultipleCheckIsFavoriteRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoCheckIsFavsRequestArgs struct {
	Req      *UserCenterUserReq      `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoCheckIsFavsRequestArgs() *IuctThriftServiceRPCDoCheckIsFavsRequestArgs {
	return &IuctThriftServiceRPCDoCheckIsFavsRequestArgs{}
}

var IuctThriftServiceRPCDoCheckIsFavsRequestArgs_Req_DEFAULT *UserCenterUserReq

func (p *IuctThriftServiceRPCDoCheckIsFavsRequestArgs) GetReq() *UserCenterUserReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoCheckIsFavsRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoCheckIsFavsRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoCheckIsFavsRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoCheckIsFavsRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoCheckIsFavsRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoCheckIsFavsRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoCheckIsFavsRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsFavsRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsFavsRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsFavsRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_check_is_favs_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsFavsRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoCheckIsFavsRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoCheckIsFavsRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoCheckIsFavsRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoCheckIsFavsRequestResult struct {
	Success *IsFavsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoCheckIsFavsRequestResult() *IuctThriftServiceRPCDoCheckIsFavsRequestResult {
	return &IuctThriftServiceRPCDoCheckIsFavsRequestResult{}
}

var IuctThriftServiceRPCDoCheckIsFavsRequestResult_Success_DEFAULT *IsFavsResp

func (p *IuctThriftServiceRPCDoCheckIsFavsRequestResult) GetSuccess() *IsFavsResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoCheckIsFavsRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoCheckIsFavsRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoCheckIsFavsRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsFavsRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IsFavsResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsFavsRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_check_is_favs_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsFavsRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoCheckIsFavsRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoCheckIsFavsRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoMultipleCheckIsFavsRequestArgs struct {
	Req      *MultiIntReq            `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoMultipleCheckIsFavsRequestArgs() *IuctThriftServiceRPCDoMultipleCheckIsFavsRequestArgs {
	return &IuctThriftServiceRPCDoMultipleCheckIsFavsRequestArgs{}
}

var IuctThriftServiceRPCDoMultipleCheckIsFavsRequestArgs_Req_DEFAULT *MultiIntReq

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavsRequestArgs) GetReq() *MultiIntReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoMultipleCheckIsFavsRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoMultipleCheckIsFavsRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavsRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoMultipleCheckIsFavsRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoMultipleCheckIsFavsRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavsRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavsRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavsRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &MultiIntReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavsRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavsRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_multiple_check_is_favs_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavsRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavsRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavsRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoMultipleCheckIsFavsRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoMultipleCheckIsFavsRequestResult struct {
	Success *MultiIsFavsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoMultipleCheckIsFavsRequestResult() *IuctThriftServiceRPCDoMultipleCheckIsFavsRequestResult {
	return &IuctThriftServiceRPCDoMultipleCheckIsFavsRequestResult{}
}

var IuctThriftServiceRPCDoMultipleCheckIsFavsRequestResult_Success_DEFAULT *MultiIsFavsResp

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavsRequestResult) GetSuccess() *MultiIsFavsResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoMultipleCheckIsFavsRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoMultipleCheckIsFavsRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavsRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavsRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MultiIsFavsResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavsRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_multiple_check_is_favs_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavsRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsFavsRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoMultipleCheckIsFavsRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetUserFavoriteListRequestArgs struct {
	Req      *FavoriteListReq        `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetUserFavoriteListRequestArgs() *IuctThriftServiceRPCDoGetUserFavoriteListRequestArgs {
	return &IuctThriftServiceRPCDoGetUserFavoriteListRequestArgs{}
}

var IuctThriftServiceRPCDoGetUserFavoriteListRequestArgs_Req_DEFAULT *FavoriteListReq

func (p *IuctThriftServiceRPCDoGetUserFavoriteListRequestArgs) GetReq() *FavoriteListReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetUserFavoriteListRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetUserFavoriteListRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetUserFavoriteListRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetUserFavoriteListRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetUserFavoriteListRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetUserFavoriteListRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetUserFavoriteListRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserFavoriteListRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &FavoriteListReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserFavoriteListRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserFavoriteListRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_favorite_list_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserFavoriteListRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserFavoriteListRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserFavoriteListRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserFavoriteListRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetUserFavoriteListRequestResult struct {
	Success *FavoriteListResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetUserFavoriteListRequestResult() *IuctThriftServiceRPCDoGetUserFavoriteListRequestResult {
	return &IuctThriftServiceRPCDoGetUserFavoriteListRequestResult{}
}

var IuctThriftServiceRPCDoGetUserFavoriteListRequestResult_Success_DEFAULT *FavoriteListResp

func (p *IuctThriftServiceRPCDoGetUserFavoriteListRequestResult) GetSuccess() *FavoriteListResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetUserFavoriteListRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetUserFavoriteListRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetUserFavoriteListRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserFavoriteListRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &FavoriteListResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserFavoriteListRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_favorite_list_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserFavoriteListRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserFavoriteListRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserFavoriteListRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestArgs struct {
	Req      *ProgramUpdateReq       `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoNotifyUserProgramUpdateRequestArgs() *IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestArgs {
	return &IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestArgs{}
}

var IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestArgs_Req_DEFAULT *ProgramUpdateReq

func (p *IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestArgs) GetReq() *ProgramUpdateReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &ProgramUpdateReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_notify_user_program_update_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestResult struct {
	Success *IuctRespBase `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoNotifyUserProgramUpdateRequestResult() *IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestResult {
	return &IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestResult{}
}

var IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestResult_Success_DEFAULT *IuctRespBase

func (p *IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestResult) GetSuccess() *IuctRespBase {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IuctRespBase{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_notify_user_program_update_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoNotifyUserProgramUpdateRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoProgramEnterRequestArgs struct {
	Req      *UserHitsReq            `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoProgramEnterRequestArgs() *IuctThriftServiceRPCDoProgramEnterRequestArgs {
	return &IuctThriftServiceRPCDoProgramEnterRequestArgs{}
}

var IuctThriftServiceRPCDoProgramEnterRequestArgs_Req_DEFAULT *UserHitsReq

func (p *IuctThriftServiceRPCDoProgramEnterRequestArgs) GetReq() *UserHitsReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoProgramEnterRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoProgramEnterRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoProgramEnterRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoProgramEnterRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoProgramEnterRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoProgramEnterRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoProgramEnterRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoProgramEnterRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserHitsReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoProgramEnterRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoProgramEnterRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_program_enter_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoProgramEnterRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoProgramEnterRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoProgramEnterRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoProgramEnterRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoProgramEnterRequestResult struct {
	Success *IuctRespBase `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoProgramEnterRequestResult() *IuctThriftServiceRPCDoProgramEnterRequestResult {
	return &IuctThriftServiceRPCDoProgramEnterRequestResult{}
}

var IuctThriftServiceRPCDoProgramEnterRequestResult_Success_DEFAULT *IuctRespBase

func (p *IuctThriftServiceRPCDoProgramEnterRequestResult) GetSuccess() *IuctRespBase {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoProgramEnterRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoProgramEnterRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoProgramEnterRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoProgramEnterRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IuctRespBase{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoProgramEnterRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_program_enter_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoProgramEnterRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoProgramEnterRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoProgramEnterRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoProgramExitRequestArgs struct {
	Req      *UserHitsReq            `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoProgramExitRequestArgs() *IuctThriftServiceRPCDoProgramExitRequestArgs {
	return &IuctThriftServiceRPCDoProgramExitRequestArgs{}
}

var IuctThriftServiceRPCDoProgramExitRequestArgs_Req_DEFAULT *UserHitsReq

func (p *IuctThriftServiceRPCDoProgramExitRequestArgs) GetReq() *UserHitsReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoProgramExitRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoProgramExitRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoProgramExitRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoProgramExitRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoProgramExitRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoProgramExitRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoProgramExitRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoProgramExitRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserHitsReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoProgramExitRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoProgramExitRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_program_exit_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoProgramExitRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoProgramExitRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoProgramExitRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoProgramExitRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoProgramExitRequestResult struct {
	Success *IuctRespBase `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoProgramExitRequestResult() *IuctThriftServiceRPCDoProgramExitRequestResult {
	return &IuctThriftServiceRPCDoProgramExitRequestResult{}
}

var IuctThriftServiceRPCDoProgramExitRequestResult_Success_DEFAULT *IuctRespBase

func (p *IuctThriftServiceRPCDoProgramExitRequestResult) GetSuccess() *IuctRespBase {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoProgramExitRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoProgramExitRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoProgramExitRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoProgramExitRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IuctRespBase{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoProgramExitRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_program_exit_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoProgramExitRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoProgramExitRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoProgramExitRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetProgramHitsRequestArgs struct {
	Req      *UserCenterUserReq      `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetProgramHitsRequestArgs() *IuctThriftServiceRPCDoGetProgramHitsRequestArgs {
	return &IuctThriftServiceRPCDoGetProgramHitsRequestArgs{}
}

var IuctThriftServiceRPCDoGetProgramHitsRequestArgs_Req_DEFAULT *UserCenterUserReq

func (p *IuctThriftServiceRPCDoGetProgramHitsRequestArgs) GetReq() *UserCenterUserReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetProgramHitsRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetProgramHitsRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetProgramHitsRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetProgramHitsRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetProgramHitsRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetProgramHitsRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetProgramHitsRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramHitsRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramHitsRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramHitsRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_program_hits_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramHitsRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetProgramHitsRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetProgramHitsRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetProgramHitsRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetProgramHitsRequestResult struct {
	Success *IuctRespBase `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetProgramHitsRequestResult() *IuctThriftServiceRPCDoGetProgramHitsRequestResult {
	return &IuctThriftServiceRPCDoGetProgramHitsRequestResult{}
}

var IuctThriftServiceRPCDoGetProgramHitsRequestResult_Success_DEFAULT *IuctRespBase

func (p *IuctThriftServiceRPCDoGetProgramHitsRequestResult) GetSuccess() *IuctRespBase {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetProgramHitsRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetProgramHitsRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetProgramHitsRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramHitsRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IuctRespBase{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramHitsRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_program_hits_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramHitsRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetProgramHitsRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetProgramHitsRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoMultipleGetProgramHitsRequestArgs struct {
	Req      *MultiHitsReq           `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoMultipleGetProgramHitsRequestArgs() *IuctThriftServiceRPCDoMultipleGetProgramHitsRequestArgs {
	return &IuctThriftServiceRPCDoMultipleGetProgramHitsRequestArgs{}
}

var IuctThriftServiceRPCDoMultipleGetProgramHitsRequestArgs_Req_DEFAULT *MultiHitsReq

func (p *IuctThriftServiceRPCDoMultipleGetProgramHitsRequestArgs) GetReq() *MultiHitsReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoMultipleGetProgramHitsRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoMultipleGetProgramHitsRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoMultipleGetProgramHitsRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoMultipleGetProgramHitsRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoMultipleGetProgramHitsRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoMultipleGetProgramHitsRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoMultipleGetProgramHitsRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleGetProgramHitsRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &MultiHitsReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleGetProgramHitsRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleGetProgramHitsRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_multiple_get_program_hits_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleGetProgramHitsRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoMultipleGetProgramHitsRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoMultipleGetProgramHitsRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoMultipleGetProgramHitsRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoMultipleGetProgramHitsRequestResult struct {
	Success *MultiHitsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoMultipleGetProgramHitsRequestResult() *IuctThriftServiceRPCDoMultipleGetProgramHitsRequestResult {
	return &IuctThriftServiceRPCDoMultipleGetProgramHitsRequestResult{}
}

var IuctThriftServiceRPCDoMultipleGetProgramHitsRequestResult_Success_DEFAULT *MultiHitsResp

func (p *IuctThriftServiceRPCDoMultipleGetProgramHitsRequestResult) GetSuccess() *MultiHitsResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoMultipleGetProgramHitsRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoMultipleGetProgramHitsRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoMultipleGetProgramHitsRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleGetProgramHitsRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MultiHitsResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleGetProgramHitsRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_multiple_get_program_hits_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleGetProgramHitsRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoMultipleGetProgramHitsRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoMultipleGetProgramHitsRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoCheckIsPraiseRequestArgs struct {
	Req      *UserCenterUserReq      `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoCheckIsPraiseRequestArgs() *IuctThriftServiceRPCDoCheckIsPraiseRequestArgs {
	return &IuctThriftServiceRPCDoCheckIsPraiseRequestArgs{}
}

var IuctThriftServiceRPCDoCheckIsPraiseRequestArgs_Req_DEFAULT *UserCenterUserReq

func (p *IuctThriftServiceRPCDoCheckIsPraiseRequestArgs) GetReq() *UserCenterUserReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoCheckIsPraiseRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoCheckIsPraiseRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoCheckIsPraiseRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoCheckIsPraiseRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoCheckIsPraiseRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoCheckIsPraiseRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoCheckIsPraiseRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsPraiseRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsPraiseRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsPraiseRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_check_is_praise_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsPraiseRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoCheckIsPraiseRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoCheckIsPraiseRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoCheckIsPraiseRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoCheckIsPraiseRequestResult struct {
	Success *IuctRespBase `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoCheckIsPraiseRequestResult() *IuctThriftServiceRPCDoCheckIsPraiseRequestResult {
	return &IuctThriftServiceRPCDoCheckIsPraiseRequestResult{}
}

var IuctThriftServiceRPCDoCheckIsPraiseRequestResult_Success_DEFAULT *IuctRespBase

func (p *IuctThriftServiceRPCDoCheckIsPraiseRequestResult) GetSuccess() *IuctRespBase {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoCheckIsPraiseRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoCheckIsPraiseRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoCheckIsPraiseRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsPraiseRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IuctRespBase{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsPraiseRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_check_is_praise_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsPraiseRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoCheckIsPraiseRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoCheckIsPraiseRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestArgs struct {
	Req      *MultiIntReq            `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoMultipleCheckIsPraiseRequestArgs() *IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestArgs {
	return &IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestArgs{}
}

var IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestArgs_Req_DEFAULT *MultiIntReq

func (p *IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestArgs) GetReq() *MultiIntReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &MultiIntReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_multiple_check_is_praise_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestResult struct {
	Success *MultiIntResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoMultipleCheckIsPraiseRequestResult() *IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestResult {
	return &IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestResult{}
}

var IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestResult_Success_DEFAULT *MultiIntResp

func (p *IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestResult) GetSuccess() *MultiIntResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MultiIntResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_multiple_check_is_praise_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoMultipleCheckIsPraiseRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetPidPraiseRequestArgs struct {
	Req      *UserCenterUserReq      `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetPidPraiseRequestArgs() *IuctThriftServiceRPCDoGetPidPraiseRequestArgs {
	return &IuctThriftServiceRPCDoGetPidPraiseRequestArgs{}
}

var IuctThriftServiceRPCDoGetPidPraiseRequestArgs_Req_DEFAULT *UserCenterUserReq

func (p *IuctThriftServiceRPCDoGetPidPraiseRequestArgs) GetReq() *UserCenterUserReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetPidPraiseRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetPidPraiseRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetPidPraiseRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetPidPraiseRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetPidPraiseRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetPidPraiseRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetPidPraiseRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetPidPraiseRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetPidPraiseRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetPidPraiseRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_pid_praise_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetPidPraiseRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetPidPraiseRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetPidPraiseRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetPidPraiseRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetPidPraiseRequestResult struct {
	Success *IuctRespBase `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetPidPraiseRequestResult() *IuctThriftServiceRPCDoGetPidPraiseRequestResult {
	return &IuctThriftServiceRPCDoGetPidPraiseRequestResult{}
}

var IuctThriftServiceRPCDoGetPidPraiseRequestResult_Success_DEFAULT *IuctRespBase

func (p *IuctThriftServiceRPCDoGetPidPraiseRequestResult) GetSuccess() *IuctRespBase {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetPidPraiseRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetPidPraiseRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetPidPraiseRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetPidPraiseRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IuctRespBase{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetPidPraiseRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_pid_praise_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetPidPraiseRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetPidPraiseRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetPidPraiseRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestArgs struct {
	Req      *MultiIntReq            `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoMultipleGetPidsPraiseRequestArgs() *IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestArgs {
	return &IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestArgs{}
}

var IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestArgs_Req_DEFAULT *MultiIntReq

func (p *IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestArgs) GetReq() *MultiIntReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &MultiIntReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_multiple_get_pids_praise_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestResult struct {
	Success *MultiPraiseResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoMultipleGetPidsPraiseRequestResult() *IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestResult {
	return &IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestResult{}
}

var IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestResult_Success_DEFAULT *MultiPraiseResp

func (p *IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestResult) GetSuccess() *MultiPraiseResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MultiPraiseResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_multiple_get_pids_praise_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoMultipleGetPidsPraiseRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetProgramDemandRequestArgs struct {
	Req      *UserCenterUserReq      `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetProgramDemandRequestArgs() *IuctThriftServiceRPCDoGetProgramDemandRequestArgs {
	return &IuctThriftServiceRPCDoGetProgramDemandRequestArgs{}
}

var IuctThriftServiceRPCDoGetProgramDemandRequestArgs_Req_DEFAULT *UserCenterUserReq

func (p *IuctThriftServiceRPCDoGetProgramDemandRequestArgs) GetReq() *UserCenterUserReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetProgramDemandRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetProgramDemandRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetProgramDemandRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetProgramDemandRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetProgramDemandRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetProgramDemandRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetProgramDemandRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramDemandRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramDemandRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramDemandRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_program_demand_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramDemandRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetProgramDemandRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetProgramDemandRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetProgramDemandRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetProgramDemandRequestResult struct {
	Success *DemandResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetProgramDemandRequestResult() *IuctThriftServiceRPCDoGetProgramDemandRequestResult {
	return &IuctThriftServiceRPCDoGetProgramDemandRequestResult{}
}

var IuctThriftServiceRPCDoGetProgramDemandRequestResult_Success_DEFAULT *DemandResp

func (p *IuctThriftServiceRPCDoGetProgramDemandRequestResult) GetSuccess() *DemandResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetProgramDemandRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetProgramDemandRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetProgramDemandRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramDemandRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &DemandResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramDemandRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_program_demand_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramDemandRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetProgramDemandRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetProgramDemandRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetMultipleProgramDemandRequestArgs struct {
	Req      *MultipleDemandReq      `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetMultipleProgramDemandRequestArgs() *IuctThriftServiceRPCDoGetMultipleProgramDemandRequestArgs {
	return &IuctThriftServiceRPCDoGetMultipleProgramDemandRequestArgs{}
}

var IuctThriftServiceRPCDoGetMultipleProgramDemandRequestArgs_Req_DEFAULT *MultipleDemandReq

func (p *IuctThriftServiceRPCDoGetMultipleProgramDemandRequestArgs) GetReq() *MultipleDemandReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetMultipleProgramDemandRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetMultipleProgramDemandRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetMultipleProgramDemandRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetMultipleProgramDemandRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetMultipleProgramDemandRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetMultipleProgramDemandRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetMultipleProgramDemandRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetMultipleProgramDemandRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &MultipleDemandReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetMultipleProgramDemandRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetMultipleProgramDemandRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_multiple_program_demand_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetMultipleProgramDemandRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetMultipleProgramDemandRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetMultipleProgramDemandRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetMultipleProgramDemandRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetMultipleProgramDemandRequestResult struct {
	Success *MultipleDemandResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetMultipleProgramDemandRequestResult() *IuctThriftServiceRPCDoGetMultipleProgramDemandRequestResult {
	return &IuctThriftServiceRPCDoGetMultipleProgramDemandRequestResult{}
}

var IuctThriftServiceRPCDoGetMultipleProgramDemandRequestResult_Success_DEFAULT *MultipleDemandResp

func (p *IuctThriftServiceRPCDoGetMultipleProgramDemandRequestResult) GetSuccess() *MultipleDemandResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetMultipleProgramDemandRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetMultipleProgramDemandRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetMultipleProgramDemandRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetMultipleProgramDemandRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MultipleDemandResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetMultipleProgramDemandRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_multiple_program_demand_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetMultipleProgramDemandRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetMultipleProgramDemandRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetMultipleProgramDemandRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetUserSubscribeListRequestArgs struct {
	Req      *UserCenterUserReq      `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetUserSubscribeListRequestArgs() *IuctThriftServiceRPCDoGetUserSubscribeListRequestArgs {
	return &IuctThriftServiceRPCDoGetUserSubscribeListRequestArgs{}
}

var IuctThriftServiceRPCDoGetUserSubscribeListRequestArgs_Req_DEFAULT *UserCenterUserReq

func (p *IuctThriftServiceRPCDoGetUserSubscribeListRequestArgs) GetReq() *UserCenterUserReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetUserSubscribeListRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetUserSubscribeListRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetUserSubscribeListRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetUserSubscribeListRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetUserSubscribeListRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetUserSubscribeListRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetUserSubscribeListRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSubscribeListRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSubscribeListRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSubscribeListRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_subscribe_list_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSubscribeListRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserSubscribeListRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserSubscribeListRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserSubscribeListRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetUserSubscribeListRequestResult struct {
	Success *FavoriteListResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetUserSubscribeListRequestResult() *IuctThriftServiceRPCDoGetUserSubscribeListRequestResult {
	return &IuctThriftServiceRPCDoGetUserSubscribeListRequestResult{}
}

var IuctThriftServiceRPCDoGetUserSubscribeListRequestResult_Success_DEFAULT *FavoriteListResp

func (p *IuctThriftServiceRPCDoGetUserSubscribeListRequestResult) GetSuccess() *FavoriteListResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetUserSubscribeListRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetUserSubscribeListRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetUserSubscribeListRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSubscribeListRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &FavoriteListResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSubscribeListRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_subscribe_list_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSubscribeListRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserSubscribeListRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserSubscribeListRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetUserColumnListRequestArgs struct {
	Req      *UserColumnReq          `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetUserColumnListRequestArgs() *IuctThriftServiceRPCDoGetUserColumnListRequestArgs {
	return &IuctThriftServiceRPCDoGetUserColumnListRequestArgs{}
}

var IuctThriftServiceRPCDoGetUserColumnListRequestArgs_Req_DEFAULT *UserColumnReq

func (p *IuctThriftServiceRPCDoGetUserColumnListRequestArgs) GetReq() *UserColumnReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetUserColumnListRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetUserColumnListRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetUserColumnListRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetUserColumnListRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetUserColumnListRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetUserColumnListRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetUserColumnListRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserColumnListRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserColumnReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserColumnListRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserColumnListRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_column_list_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserColumnListRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserColumnListRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserColumnListRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserColumnListRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetUserColumnListRequestResult struct {
	Success *UserColumnResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetUserColumnListRequestResult() *IuctThriftServiceRPCDoGetUserColumnListRequestResult {
	return &IuctThriftServiceRPCDoGetUserColumnListRequestResult{}
}

var IuctThriftServiceRPCDoGetUserColumnListRequestResult_Success_DEFAULT *UserColumnResp

func (p *IuctThriftServiceRPCDoGetUserColumnListRequestResult) GetSuccess() *UserColumnResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetUserColumnListRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetUserColumnListRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetUserColumnListRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserColumnListRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UserColumnResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserColumnListRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_column_list_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserColumnListRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserColumnListRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserColumnListRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestArgs struct {
	Req      *UserCenterUserReq      `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestArgs() *IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestArgs {
	return &IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestArgs{}
}

var IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestArgs_Req_DEFAULT *UserCenterUserReq

func (p *IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestArgs) GetReq() *UserCenterUserReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_often_watch_channel_list_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestResult struct {
	Success *MultiBigIntResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestResult() *IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestResult {
	return &IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestResult{}
}

var IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestResult_Success_DEFAULT *MultiBigIntResp

func (p *IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestResult) GetSuccess() *MultiBigIntResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MultiBigIntResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_often_watch_channel_list_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserOftenWatchChannelListRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestArgs struct {
	Req      *UserCenterUserReq      `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestArgs() *IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestArgs {
	return &IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestArgs{}
}

var IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestArgs_Req_DEFAULT *UserCenterUserReq

func (p *IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestArgs) GetReq() *UserCenterUserReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_interest_column_and_series_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestResult struct {
	Success *MultiBigIntResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestResult() *IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestResult {
	return &IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestResult{}
}

var IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestResult_Success_DEFAULT *MultiBigIntResp

func (p *IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestResult) GetSuccess() *MultiBigIntResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MultiBigIntResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_interest_column_and_series_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserInterestColumnAndSeriesRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetUserInterestMediasRequestArgs struct {
	Req      *UserCenterUserReq      `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetUserInterestMediasRequestArgs() *IuctThriftServiceRPCDoGetUserInterestMediasRequestArgs {
	return &IuctThriftServiceRPCDoGetUserInterestMediasRequestArgs{}
}

var IuctThriftServiceRPCDoGetUserInterestMediasRequestArgs_Req_DEFAULT *UserCenterUserReq

func (p *IuctThriftServiceRPCDoGetUserInterestMediasRequestArgs) GetReq() *UserCenterUserReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetUserInterestMediasRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetUserInterestMediasRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetUserInterestMediasRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetUserInterestMediasRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetUserInterestMediasRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetUserInterestMediasRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetUserInterestMediasRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserInterestMediasRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserInterestMediasRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserInterestMediasRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_interest_medias_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserInterestMediasRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserInterestMediasRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserInterestMediasRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserInterestMediasRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetUserInterestMediasRequestResult struct {
	Success *MultiIntResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetUserInterestMediasRequestResult() *IuctThriftServiceRPCDoGetUserInterestMediasRequestResult {
	return &IuctThriftServiceRPCDoGetUserInterestMediasRequestResult{}
}

var IuctThriftServiceRPCDoGetUserInterestMediasRequestResult_Success_DEFAULT *MultiIntResp

func (p *IuctThriftServiceRPCDoGetUserInterestMediasRequestResult) GetSuccess() *MultiIntResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetUserInterestMediasRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetUserInterestMediasRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetUserInterestMediasRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserInterestMediasRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MultiIntResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserInterestMediasRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_interest_medias_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserInterestMediasRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserInterestMediasRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserInterestMediasRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoAddUserOrderRequestArgs struct {
	Req      *OrderReq               `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoAddUserOrderRequestArgs() *IuctThriftServiceRPCDoAddUserOrderRequestArgs {
	return &IuctThriftServiceRPCDoAddUserOrderRequestArgs{}
}

var IuctThriftServiceRPCDoAddUserOrderRequestArgs_Req_DEFAULT *OrderReq

func (p *IuctThriftServiceRPCDoAddUserOrderRequestArgs) GetReq() *OrderReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoAddUserOrderRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoAddUserOrderRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoAddUserOrderRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoAddUserOrderRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoAddUserOrderRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoAddUserOrderRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoAddUserOrderRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddUserOrderRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &OrderReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddUserOrderRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddUserOrderRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_add_user_order_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddUserOrderRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoAddUserOrderRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoAddUserOrderRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoAddUserOrderRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoAddUserOrderRequestResult struct {
	Success *IuctRespBase `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoAddUserOrderRequestResult() *IuctThriftServiceRPCDoAddUserOrderRequestResult {
	return &IuctThriftServiceRPCDoAddUserOrderRequestResult{}
}

var IuctThriftServiceRPCDoAddUserOrderRequestResult_Success_DEFAULT *IuctRespBase

func (p *IuctThriftServiceRPCDoAddUserOrderRequestResult) GetSuccess() *IuctRespBase {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoAddUserOrderRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoAddUserOrderRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoAddUserOrderRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddUserOrderRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IuctRespBase{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddUserOrderRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_add_user_order_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddUserOrderRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoAddUserOrderRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoAddUserOrderRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoDelUserOrderRequestArgs struct {
	Req      *OrderReq               `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoDelUserOrderRequestArgs() *IuctThriftServiceRPCDoDelUserOrderRequestArgs {
	return &IuctThriftServiceRPCDoDelUserOrderRequestArgs{}
}

var IuctThriftServiceRPCDoDelUserOrderRequestArgs_Req_DEFAULT *OrderReq

func (p *IuctThriftServiceRPCDoDelUserOrderRequestArgs) GetReq() *OrderReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoDelUserOrderRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoDelUserOrderRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoDelUserOrderRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoDelUserOrderRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoDelUserOrderRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoDelUserOrderRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoDelUserOrderRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelUserOrderRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &OrderReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelUserOrderRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelUserOrderRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_del_user_order_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelUserOrderRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoDelUserOrderRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoDelUserOrderRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoDelUserOrderRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoDelUserOrderRequestResult struct {
	Success *IuctRespBase `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoDelUserOrderRequestResult() *IuctThriftServiceRPCDoDelUserOrderRequestResult {
	return &IuctThriftServiceRPCDoDelUserOrderRequestResult{}
}

var IuctThriftServiceRPCDoDelUserOrderRequestResult_Success_DEFAULT *IuctRespBase

func (p *IuctThriftServiceRPCDoDelUserOrderRequestResult) GetSuccess() *IuctRespBase {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoDelUserOrderRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoDelUserOrderRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoDelUserOrderRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelUserOrderRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IuctRespBase{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelUserOrderRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_del_user_order_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoDelUserOrderRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoDelUserOrderRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoDelUserOrderRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoCheckIsOrderRequestArgs struct {
	Req      *UserCenterUserReq      `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoCheckIsOrderRequestArgs() *IuctThriftServiceRPCDoCheckIsOrderRequestArgs {
	return &IuctThriftServiceRPCDoCheckIsOrderRequestArgs{}
}

var IuctThriftServiceRPCDoCheckIsOrderRequestArgs_Req_DEFAULT *UserCenterUserReq

func (p *IuctThriftServiceRPCDoCheckIsOrderRequestArgs) GetReq() *UserCenterUserReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoCheckIsOrderRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoCheckIsOrderRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoCheckIsOrderRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoCheckIsOrderRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoCheckIsOrderRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoCheckIsOrderRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoCheckIsOrderRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsOrderRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsOrderRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsOrderRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_check_is_order_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsOrderRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoCheckIsOrderRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoCheckIsOrderRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoCheckIsOrderRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoCheckIsOrderRequestResult struct {
	Success *IuctRespBase `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoCheckIsOrderRequestResult() *IuctThriftServiceRPCDoCheckIsOrderRequestResult {
	return &IuctThriftServiceRPCDoCheckIsOrderRequestResult{}
}

var IuctThriftServiceRPCDoCheckIsOrderRequestResult_Success_DEFAULT *IuctRespBase

func (p *IuctThriftServiceRPCDoCheckIsOrderRequestResult) GetSuccess() *IuctRespBase {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoCheckIsOrderRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoCheckIsOrderRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoCheckIsOrderRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsOrderRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IuctRespBase{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsOrderRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_check_is_order_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckIsOrderRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoCheckIsOrderRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoCheckIsOrderRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoCheckMultipleIsOrderRequestArgs struct {
	Req      *MultiIsOrderReq        `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoCheckMultipleIsOrderRequestArgs() *IuctThriftServiceRPCDoCheckMultipleIsOrderRequestArgs {
	return &IuctThriftServiceRPCDoCheckMultipleIsOrderRequestArgs{}
}

var IuctThriftServiceRPCDoCheckMultipleIsOrderRequestArgs_Req_DEFAULT *MultiIsOrderReq

func (p *IuctThriftServiceRPCDoCheckMultipleIsOrderRequestArgs) GetReq() *MultiIsOrderReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoCheckMultipleIsOrderRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoCheckMultipleIsOrderRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoCheckMultipleIsOrderRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoCheckMultipleIsOrderRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoCheckMultipleIsOrderRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoCheckMultipleIsOrderRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoCheckMultipleIsOrderRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckMultipleIsOrderRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &MultiIsOrderReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckMultipleIsOrderRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckMultipleIsOrderRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_check_multiple_is_order_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckMultipleIsOrderRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoCheckMultipleIsOrderRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoCheckMultipleIsOrderRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoCheckMultipleIsOrderRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoCheckMultipleIsOrderRequestResult struct {
	Success *MultiIntResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoCheckMultipleIsOrderRequestResult() *IuctThriftServiceRPCDoCheckMultipleIsOrderRequestResult {
	return &IuctThriftServiceRPCDoCheckMultipleIsOrderRequestResult{}
}

var IuctThriftServiceRPCDoCheckMultipleIsOrderRequestResult_Success_DEFAULT *MultiIntResp

func (p *IuctThriftServiceRPCDoCheckMultipleIsOrderRequestResult) GetSuccess() *MultiIntResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoCheckMultipleIsOrderRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoCheckMultipleIsOrderRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoCheckMultipleIsOrderRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckMultipleIsOrderRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MultiIntResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckMultipleIsOrderRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_check_multiple_is_order_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoCheckMultipleIsOrderRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoCheckMultipleIsOrderRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoCheckMultipleIsOrderRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetUserOrderListRequestArgs struct {
	Req      *UserCenterUserReq      `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetUserOrderListRequestArgs() *IuctThriftServiceRPCDoGetUserOrderListRequestArgs {
	return &IuctThriftServiceRPCDoGetUserOrderListRequestArgs{}
}

var IuctThriftServiceRPCDoGetUserOrderListRequestArgs_Req_DEFAULT *UserCenterUserReq

func (p *IuctThriftServiceRPCDoGetUserOrderListRequestArgs) GetReq() *UserCenterUserReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetUserOrderListRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetUserOrderListRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetUserOrderListRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetUserOrderListRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetUserOrderListRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetUserOrderListRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetUserOrderListRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserOrderListRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserOrderListRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserOrderListRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_order_list_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserOrderListRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserOrderListRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserOrderListRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserOrderListRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetUserOrderListRequestResult struct {
	Success *OrderListResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetUserOrderListRequestResult() *IuctThriftServiceRPCDoGetUserOrderListRequestResult {
	return &IuctThriftServiceRPCDoGetUserOrderListRequestResult{}
}

var IuctThriftServiceRPCDoGetUserOrderListRequestResult_Success_DEFAULT *OrderListResp

func (p *IuctThriftServiceRPCDoGetUserOrderListRequestResult) GetSuccess() *OrderListResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetUserOrderListRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetUserOrderListRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetUserOrderListRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserOrderListRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &OrderListResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserOrderListRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_order_list_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserOrderListRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserOrderListRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserOrderListRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoAddShareRequestArgs struct {
	Req      *ShareAddReq            `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoAddShareRequestArgs() *IuctThriftServiceRPCDoAddShareRequestArgs {
	return &IuctThriftServiceRPCDoAddShareRequestArgs{}
}

var IuctThriftServiceRPCDoAddShareRequestArgs_Req_DEFAULT *ShareAddReq

func (p *IuctThriftServiceRPCDoAddShareRequestArgs) GetReq() *ShareAddReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoAddShareRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoAddShareRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoAddShareRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoAddShareRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoAddShareRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoAddShareRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoAddShareRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddShareRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &ShareAddReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddShareRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddShareRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_add_share_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddShareRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoAddShareRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoAddShareRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoAddShareRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoAddShareRequestResult struct {
	Success *IuctRespBase `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoAddShareRequestResult() *IuctThriftServiceRPCDoAddShareRequestResult {
	return &IuctThriftServiceRPCDoAddShareRequestResult{}
}

var IuctThriftServiceRPCDoAddShareRequestResult_Success_DEFAULT *IuctRespBase

func (p *IuctThriftServiceRPCDoAddShareRequestResult) GetSuccess() *IuctRespBase {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoAddShareRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoAddShareRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoAddShareRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddShareRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IuctRespBase{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddShareRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_add_share_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddShareRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoAddShareRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoAddShareRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoMultipleDelShareRequestArgs struct {
	Req      *MultiStrReq            `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoMultipleDelShareRequestArgs() *IuctThriftServiceRPCDoMultipleDelShareRequestArgs {
	return &IuctThriftServiceRPCDoMultipleDelShareRequestArgs{}
}

var IuctThriftServiceRPCDoMultipleDelShareRequestArgs_Req_DEFAULT *MultiStrReq

func (p *IuctThriftServiceRPCDoMultipleDelShareRequestArgs) GetReq() *MultiStrReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoMultipleDelShareRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoMultipleDelShareRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoMultipleDelShareRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoMultipleDelShareRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoMultipleDelShareRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoMultipleDelShareRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoMultipleDelShareRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleDelShareRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &MultiStrReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleDelShareRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleDelShareRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_multiple_del_share_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleDelShareRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoMultipleDelShareRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoMultipleDelShareRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoMultipleDelShareRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoMultipleDelShareRequestResult struct {
	Success *IuctRespBase `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoMultipleDelShareRequestResult() *IuctThriftServiceRPCDoMultipleDelShareRequestResult {
	return &IuctThriftServiceRPCDoMultipleDelShareRequestResult{}
}

var IuctThriftServiceRPCDoMultipleDelShareRequestResult_Success_DEFAULT *IuctRespBase

func (p *IuctThriftServiceRPCDoMultipleDelShareRequestResult) GetSuccess() *IuctRespBase {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoMultipleDelShareRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoMultipleDelShareRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoMultipleDelShareRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleDelShareRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IuctRespBase{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleDelShareRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_multiple_del_share_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleDelShareRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoMultipleDelShareRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoMultipleDelShareRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetUserShareListRequestArgs struct {
	Req      *UserCenterUserReq      `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetUserShareListRequestArgs() *IuctThriftServiceRPCDoGetUserShareListRequestArgs {
	return &IuctThriftServiceRPCDoGetUserShareListRequestArgs{}
}

var IuctThriftServiceRPCDoGetUserShareListRequestArgs_Req_DEFAULT *UserCenterUserReq

func (p *IuctThriftServiceRPCDoGetUserShareListRequestArgs) GetReq() *UserCenterUserReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetUserShareListRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetUserShareListRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetUserShareListRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetUserShareListRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetUserShareListRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetUserShareListRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetUserShareListRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserShareListRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserShareListRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserShareListRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_share_list_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserShareListRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserShareListRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserShareListRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserShareListRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetUserShareListRequestResult struct {
	Success *ShareListResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetUserShareListRequestResult() *IuctThriftServiceRPCDoGetUserShareListRequestResult {
	return &IuctThriftServiceRPCDoGetUserShareListRequestResult{}
}

var IuctThriftServiceRPCDoGetUserShareListRequestResult_Success_DEFAULT *ShareListResp

func (p *IuctThriftServiceRPCDoGetUserShareListRequestResult) GetSuccess() *ShareListResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetUserShareListRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetUserShareListRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetUserShareListRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserShareListRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ShareListResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserShareListRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_share_list_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserShareListRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserShareListRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserShareListRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetProgramShareTimesRequestArgs struct {
	Req      *UserCenterUserReq      `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetProgramShareTimesRequestArgs() *IuctThriftServiceRPCDoGetProgramShareTimesRequestArgs {
	return &IuctThriftServiceRPCDoGetProgramShareTimesRequestArgs{}
}

var IuctThriftServiceRPCDoGetProgramShareTimesRequestArgs_Req_DEFAULT *UserCenterUserReq

func (p *IuctThriftServiceRPCDoGetProgramShareTimesRequestArgs) GetReq() *UserCenterUserReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetProgramShareTimesRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetProgramShareTimesRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetProgramShareTimesRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetProgramShareTimesRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetProgramShareTimesRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetProgramShareTimesRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetProgramShareTimesRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramShareTimesRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramShareTimesRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramShareTimesRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_program_share_times_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramShareTimesRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetProgramShareTimesRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetProgramShareTimesRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetProgramShareTimesRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetProgramShareTimesRequestResult struct {
	Success *IuctRespBase `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetProgramShareTimesRequestResult() *IuctThriftServiceRPCDoGetProgramShareTimesRequestResult {
	return &IuctThriftServiceRPCDoGetProgramShareTimesRequestResult{}
}

var IuctThriftServiceRPCDoGetProgramShareTimesRequestResult_Success_DEFAULT *IuctRespBase

func (p *IuctThriftServiceRPCDoGetProgramShareTimesRequestResult) GetSuccess() *IuctRespBase {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetProgramShareTimesRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetProgramShareTimesRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetProgramShareTimesRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramShareTimesRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IuctRespBase{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramShareTimesRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_program_share_times_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramShareTimesRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetProgramShareTimesRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetProgramShareTimesRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoAddCommentRequestArgs struct {
	Req      *iuct_types.USER_COMMENT_INFO `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader       `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoAddCommentRequestArgs() *IuctThriftServiceRPCDoAddCommentRequestArgs {
	return &IuctThriftServiceRPCDoAddCommentRequestArgs{}
}

var IuctThriftServiceRPCDoAddCommentRequestArgs_Req_DEFAULT *iuct_types.USER_COMMENT_INFO

func (p *IuctThriftServiceRPCDoAddCommentRequestArgs) GetReq() *iuct_types.USER_COMMENT_INFO {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoAddCommentRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoAddCommentRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoAddCommentRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoAddCommentRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoAddCommentRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoAddCommentRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoAddCommentRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddCommentRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &iuct_types.USER_COMMENT_INFO{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddCommentRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddCommentRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_add_comment_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddCommentRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoAddCommentRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoAddCommentRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoAddCommentRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoAddCommentRequestResult struct {
	Success *IuctRespBase `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoAddCommentRequestResult() *IuctThriftServiceRPCDoAddCommentRequestResult {
	return &IuctThriftServiceRPCDoAddCommentRequestResult{}
}

var IuctThriftServiceRPCDoAddCommentRequestResult_Success_DEFAULT *IuctRespBase

func (p *IuctThriftServiceRPCDoAddCommentRequestResult) GetSuccess() *IuctRespBase {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoAddCommentRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoAddCommentRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoAddCommentRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddCommentRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IuctRespBase{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddCommentRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_add_comment_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoAddCommentRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoAddCommentRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoAddCommentRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetProgramCommentListRequestArgs struct {
	Req      *UserCenterUserReq      `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetProgramCommentListRequestArgs() *IuctThriftServiceRPCDoGetProgramCommentListRequestArgs {
	return &IuctThriftServiceRPCDoGetProgramCommentListRequestArgs{}
}

var IuctThriftServiceRPCDoGetProgramCommentListRequestArgs_Req_DEFAULT *UserCenterUserReq

func (p *IuctThriftServiceRPCDoGetProgramCommentListRequestArgs) GetReq() *UserCenterUserReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetProgramCommentListRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetProgramCommentListRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetProgramCommentListRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetProgramCommentListRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetProgramCommentListRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetProgramCommentListRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetProgramCommentListRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramCommentListRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramCommentListRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramCommentListRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_program_comment_list_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramCommentListRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetProgramCommentListRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetProgramCommentListRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetProgramCommentListRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetProgramCommentListRequestResult struct {
	Success *CommentListResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetProgramCommentListRequestResult() *IuctThriftServiceRPCDoGetProgramCommentListRequestResult {
	return &IuctThriftServiceRPCDoGetProgramCommentListRequestResult{}
}

var IuctThriftServiceRPCDoGetProgramCommentListRequestResult_Success_DEFAULT *CommentListResp

func (p *IuctThriftServiceRPCDoGetProgramCommentListRequestResult) GetSuccess() *CommentListResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetProgramCommentListRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetProgramCommentListRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetProgramCommentListRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramCommentListRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &CommentListResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramCommentListRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_program_comment_list_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramCommentListRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetProgramCommentListRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetProgramCommentListRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetCommentListByCommentidRequestArgs struct {
	Req      *UserCenterUserReq      `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetCommentListByCommentidRequestArgs() *IuctThriftServiceRPCDoGetCommentListByCommentidRequestArgs {
	return &IuctThriftServiceRPCDoGetCommentListByCommentidRequestArgs{}
}

var IuctThriftServiceRPCDoGetCommentListByCommentidRequestArgs_Req_DEFAULT *UserCenterUserReq

func (p *IuctThriftServiceRPCDoGetCommentListByCommentidRequestArgs) GetReq() *UserCenterUserReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetCommentListByCommentidRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetCommentListByCommentidRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetCommentListByCommentidRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetCommentListByCommentidRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetCommentListByCommentidRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetCommentListByCommentidRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetCommentListByCommentidRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetCommentListByCommentidRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetCommentListByCommentidRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetCommentListByCommentidRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_comment_list_by_commentid_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetCommentListByCommentidRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetCommentListByCommentidRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetCommentListByCommentidRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetCommentListByCommentidRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetCommentListByCommentidRequestResult struct {
	Success *CommentListResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetCommentListByCommentidRequestResult() *IuctThriftServiceRPCDoGetCommentListByCommentidRequestResult {
	return &IuctThriftServiceRPCDoGetCommentListByCommentidRequestResult{}
}

var IuctThriftServiceRPCDoGetCommentListByCommentidRequestResult_Success_DEFAULT *CommentListResp

func (p *IuctThriftServiceRPCDoGetCommentListByCommentidRequestResult) GetSuccess() *CommentListResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetCommentListByCommentidRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetCommentListByCommentidRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetCommentListByCommentidRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetCommentListByCommentidRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &CommentListResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetCommentListByCommentidRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_comment_list_by_commentid_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetCommentListByCommentidRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetCommentListByCommentidRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetCommentListByCommentidRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestArgs struct {
	Req      *MultiStrReq            `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestArgs() *IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestArgs {
	return &IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestArgs{}
}

var IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestArgs_Req_DEFAULT *MultiStrReq

func (p *IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestArgs) GetReq() *MultiStrReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &MultiStrReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_multiple_get_comments_praise_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestResult struct {
	Success *MultiPraiseResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestResult() *IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestResult {
	return &IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestResult{}
}

var IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestResult_Success_DEFAULT *MultiPraiseResp

func (p *IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestResult) GetSuccess() *MultiPraiseResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MultiPraiseResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_multiple_get_comments_praise_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoMultipleGetCommentsPraiseRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetRankListArgs struct {
	Req      *RankListReq            `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetRankListArgs() *IuctThriftServiceRPCDoGetRankListArgs {
	return &IuctThriftServiceRPCDoGetRankListArgs{}
}

var IuctThriftServiceRPCDoGetRankListArgs_Req_DEFAULT *RankListReq

func (p *IuctThriftServiceRPCDoGetRankListArgs) GetReq() *RankListReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetRankListArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetRankListArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetRankListArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetRankListArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetRankListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetRankListArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetRankListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetRankListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &RankListReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetRankListArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetRankListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_rank_list_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetRankListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetRankListArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetRankListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetRankListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetRankListResult struct {
	Success *RankListResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetRankListResult() *IuctThriftServiceRPCDoGetRankListResult {
	return &IuctThriftServiceRPCDoGetRankListResult{}
}

var IuctThriftServiceRPCDoGetRankListResult_Success_DEFAULT *RankListResp

func (p *IuctThriftServiceRPCDoGetRankListResult) GetSuccess() *RankListResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetRankListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetRankListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetRankListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetRankListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &RankListResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetRankListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_rank_list_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetRankListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetRankListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetRankListResult(%+v)", *p)
}

// Attributes:
//  - NPid
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetProgramRankInfoArgs struct {
	NPid     com_types.PRG_ID        `thrift:"nPid,1" db:"nPid" json:"nPid"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetProgramRankInfoArgs() *IuctThriftServiceRPCDoGetProgramRankInfoArgs {
	return &IuctThriftServiceRPCDoGetProgramRankInfoArgs{}
}

func (p *IuctThriftServiceRPCDoGetProgramRankInfoArgs) GetNPid() com_types.PRG_ID {
	return p.NPid
}

var IuctThriftServiceRPCDoGetProgramRankInfoArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetProgramRankInfoArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetProgramRankInfoArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetProgramRankInfoArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetProgramRankInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramRankInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := com_types.PRG_ID(v)
		p.NPid = temp
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramRankInfoArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramRankInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_program_rank_info_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramRankInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nPid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nPid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NPid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nPid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nPid: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetProgramRankInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetProgramRankInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetProgramRankInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetProgramRankInfoResult struct {
	Success *ProgramRankInfoResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetProgramRankInfoResult() *IuctThriftServiceRPCDoGetProgramRankInfoResult {
	return &IuctThriftServiceRPCDoGetProgramRankInfoResult{}
}

var IuctThriftServiceRPCDoGetProgramRankInfoResult_Success_DEFAULT *ProgramRankInfoResp

func (p *IuctThriftServiceRPCDoGetProgramRankInfoResult) GetSuccess() *ProgramRankInfoResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetProgramRankInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetProgramRankInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetProgramRankInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramRankInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ProgramRankInfoResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramRankInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_program_rank_info_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetProgramRankInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetProgramRankInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetProgramRankInfoResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetUserSearchHistoryRequestArgs struct {
	Req      *UserCenterUserReq      `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetUserSearchHistoryRequestArgs() *IuctThriftServiceRPCDoGetUserSearchHistoryRequestArgs {
	return &IuctThriftServiceRPCDoGetUserSearchHistoryRequestArgs{}
}

var IuctThriftServiceRPCDoGetUserSearchHistoryRequestArgs_Req_DEFAULT *UserCenterUserReq

func (p *IuctThriftServiceRPCDoGetUserSearchHistoryRequestArgs) GetReq() *UserCenterUserReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetUserSearchHistoryRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetUserSearchHistoryRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetUserSearchHistoryRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetUserSearchHistoryRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetUserSearchHistoryRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetUserSearchHistoryRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetUserSearchHistoryRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSearchHistoryRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSearchHistoryRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSearchHistoryRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_search_history_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSearchHistoryRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserSearchHistoryRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserSearchHistoryRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserSearchHistoryRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetUserSearchHistoryRequestResult struct {
	Success *SearchHistoryListResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetUserSearchHistoryRequestResult() *IuctThriftServiceRPCDoGetUserSearchHistoryRequestResult {
	return &IuctThriftServiceRPCDoGetUserSearchHistoryRequestResult{}
}

var IuctThriftServiceRPCDoGetUserSearchHistoryRequestResult_Success_DEFAULT *SearchHistoryListResp

func (p *IuctThriftServiceRPCDoGetUserSearchHistoryRequestResult) GetSuccess() *SearchHistoryListResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetUserSearchHistoryRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetUserSearchHistoryRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetUserSearchHistoryRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSearchHistoryRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &SearchHistoryListResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSearchHistoryRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_search_history_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSearchHistoryRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserSearchHistoryRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserSearchHistoryRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetUserAllSubjectArgs struct {
	Req      *UserCenterUserReq      `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetUserAllSubjectArgs() *IuctThriftServiceRPCDoGetUserAllSubjectArgs {
	return &IuctThriftServiceRPCDoGetUserAllSubjectArgs{}
}

var IuctThriftServiceRPCDoGetUserAllSubjectArgs_Req_DEFAULT *UserCenterUserReq

func (p *IuctThriftServiceRPCDoGetUserAllSubjectArgs) GetReq() *UserCenterUserReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetUserAllSubjectArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetUserAllSubjectArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetUserAllSubjectArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetUserAllSubjectArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetUserAllSubjectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_all_subject_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserAllSubjectArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetUserAllSubjectResult struct {
	Success *MultiBigIntResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetUserAllSubjectResult() *IuctThriftServiceRPCDoGetUserAllSubjectResult {
	return &IuctThriftServiceRPCDoGetUserAllSubjectResult{}
}

var IuctThriftServiceRPCDoGetUserAllSubjectResult_Success_DEFAULT *MultiBigIntResp

func (p *IuctThriftServiceRPCDoGetUserAllSubjectResult) GetSuccess() *MultiBigIntResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetUserAllSubjectResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetUserAllSubjectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MultiBigIntResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_all_subject_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserAllSubjectResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetUserAllSubjectAndProgramArgs struct {
	Req      *UserCenterUserReq      `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetUserAllSubjectAndProgramArgs() *IuctThriftServiceRPCDoGetUserAllSubjectAndProgramArgs {
	return &IuctThriftServiceRPCDoGetUserAllSubjectAndProgramArgs{}
}

var IuctThriftServiceRPCDoGetUserAllSubjectAndProgramArgs_Req_DEFAULT *UserCenterUserReq

func (p *IuctThriftServiceRPCDoGetUserAllSubjectAndProgramArgs) GetReq() *UserCenterUserReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetUserAllSubjectAndProgramArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetUserAllSubjectAndProgramArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetUserAllSubjectAndProgramArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetUserAllSubjectAndProgramArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetUserAllSubjectAndProgramArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectAndProgramArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectAndProgramArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectAndProgramArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectAndProgramArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectAndProgramArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_all_subject_and_program_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectAndProgramArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectAndProgramArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectAndProgramArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserAllSubjectAndProgramArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetUserAllSubjectAndProgramResult struct {
	Success *GuessSubjResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetUserAllSubjectAndProgramResult() *IuctThriftServiceRPCDoGetUserAllSubjectAndProgramResult {
	return &IuctThriftServiceRPCDoGetUserAllSubjectAndProgramResult{}
}

var IuctThriftServiceRPCDoGetUserAllSubjectAndProgramResult_Success_DEFAULT *GuessSubjResp

func (p *IuctThriftServiceRPCDoGetUserAllSubjectAndProgramResult) GetSuccess() *GuessSubjResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetUserAllSubjectAndProgramResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetUserAllSubjectAndProgramResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectAndProgramResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectAndProgramResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GuessSubjResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectAndProgramResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_all_subject_and_program_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectAndProgramResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserAllSubjectAndProgramResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserAllSubjectAndProgramResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetUserSubjectProgramArgs struct {
	Req      *UserCenterReq          `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetUserSubjectProgramArgs() *IuctThriftServiceRPCDoGetUserSubjectProgramArgs {
	return &IuctThriftServiceRPCDoGetUserSubjectProgramArgs{}
}

var IuctThriftServiceRPCDoGetUserSubjectProgramArgs_Req_DEFAULT *UserCenterReq

func (p *IuctThriftServiceRPCDoGetUserSubjectProgramArgs) GetReq() *UserCenterReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetUserSubjectProgramArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetUserSubjectProgramArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetUserSubjectProgramArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetUserSubjectProgramArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetUserSubjectProgramArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetUserSubjectProgramArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetUserSubjectProgramArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSubjectProgramArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserCenterReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSubjectProgramArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSubjectProgramArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_subject_program_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSubjectProgramArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserSubjectProgramArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserSubjectProgramArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserSubjectProgramArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetUserSubjectProgramResult struct {
	Success *MultiBigIntResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetUserSubjectProgramResult() *IuctThriftServiceRPCDoGetUserSubjectProgramResult {
	return &IuctThriftServiceRPCDoGetUserSubjectProgramResult{}
}

var IuctThriftServiceRPCDoGetUserSubjectProgramResult_Success_DEFAULT *MultiBigIntResp

func (p *IuctThriftServiceRPCDoGetUserSubjectProgramResult) GetSuccess() *MultiBigIntResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetUserSubjectProgramResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetUserSubjectProgramResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetUserSubjectProgramResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSubjectProgramResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MultiBigIntResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSubjectProgramResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_subject_program_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserSubjectProgramResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserSubjectProgramResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserSubjectProgramResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetUserProgramInfoRequestArgs struct {
	Req      *UserProgramReq         `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetUserProgramInfoRequestArgs() *IuctThriftServiceRPCDoGetUserProgramInfoRequestArgs {
	return &IuctThriftServiceRPCDoGetUserProgramInfoRequestArgs{}
}

var IuctThriftServiceRPCDoGetUserProgramInfoRequestArgs_Req_DEFAULT *UserProgramReq

func (p *IuctThriftServiceRPCDoGetUserProgramInfoRequestArgs) GetReq() *UserProgramReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetUserProgramInfoRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetUserProgramInfoRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetUserProgramInfoRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetUserProgramInfoRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetUserProgramInfoRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetUserProgramInfoRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetUserProgramInfoRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserProgramInfoRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserProgramReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserProgramInfoRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserProgramInfoRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_program_info_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserProgramInfoRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserProgramInfoRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserProgramInfoRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserProgramInfoRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetUserProgramInfoRequestResult struct {
	Success *UserProgramResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetUserProgramInfoRequestResult() *IuctThriftServiceRPCDoGetUserProgramInfoRequestResult {
	return &IuctThriftServiceRPCDoGetUserProgramInfoRequestResult{}
}

var IuctThriftServiceRPCDoGetUserProgramInfoRequestResult_Success_DEFAULT *UserProgramResp

func (p *IuctThriftServiceRPCDoGetUserProgramInfoRequestResult) GetSuccess() *UserProgramResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetUserProgramInfoRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetUserProgramInfoRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetUserProgramInfoRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserProgramInfoRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UserProgramResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserProgramInfoRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_user_program_info_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetUserProgramInfoRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetUserProgramInfoRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetUserProgramInfoRequestResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - OtRPCCtx
type IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestArgs struct {
	Req      *MultiUserProgramReq    `thrift:"req,1" db:"req" json:"req"`
	OtRPCCtx *com_types.ZipkinHeader `thrift:"ot_rpc_ctx,2" db:"ot_rpc_ctx" json:"ot_rpc_ctx"`
}

func NewIuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestArgs() *IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestArgs {
	return &IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestArgs{}
}

var IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestArgs_Req_DEFAULT *MultiUserProgramReq

func (p *IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestArgs) GetReq() *MultiUserProgramReq {
	if !p.IsSetReq() {
		return IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestArgs_Req_DEFAULT
	}
	return p.Req
}

var IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestArgs_OtRPCCtx_DEFAULT *com_types.ZipkinHeader

func (p *IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestArgs) GetOtRPCCtx() *com_types.ZipkinHeader {
	if !p.IsSetOtRPCCtx() {
		return IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestArgs_OtRPCCtx_DEFAULT
	}
	return p.OtRPCCtx
}
func (p *IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestArgs) IsSetOtRPCCtx() bool {
	return p.OtRPCCtx != nil
}

func (p *IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &MultiUserProgramReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestArgs) ReadField2(iprot thrift.TProtocol) error {
	p.OtRPCCtx = &com_types.ZipkinHeader{
		X_B3_Sampled: true,
	}
	if err := p.OtRPCCtx.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OtRPCCtx), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_multiple_user_program_info_request_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ot_rpc_ctx", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ot_rpc_ctx: ", p), err)
	}
	if err := p.OtRPCCtx.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OtRPCCtx), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ot_rpc_ctx: ", p), err)
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestResult struct {
	Success *MultiUserProgramResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestResult() *IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestResult {
	return &IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestResult{}
}

var IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestResult_Success_DEFAULT *MultiUserProgramResp

func (p *IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestResult) GetSuccess() *MultiUserProgramResp {
	if !p.IsSetSuccess() {
		return IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MultiUserProgramResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rpc_do_get_multiple_user_program_info_request_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IuctThriftServiceRPCDoGetMultipleUserProgramInfoRequestResult(%+v)", *p)
}


