// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
	"com_types"
	"iuct_types"
        "iuct_service"
)

var _ = com_types.GoUnusedProtection__
var _ = iuct_types.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  i32 monitorqueryprocessstatus()")
  fmt.Fprintln(os.Stderr, "  IuctRespBase rpc_do_user_center_comm_request(UserCenterCommReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  IuctRespBase rpc_do_add_user_history_request(USER_HISTORY req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  IuctRespBase rpc_do_del_user_history_request(USER_HISTORY req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  HistoryResp rpc_do_get_user_history_request(HistoryReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  HistoryListResp rpc_do_get_user_history_list_request(HistoryListReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  HistoryResp rpc_do_get_user_last_program_by_seriesid(UserCenterReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  UserSeriesProHisListResp rpc_do_get_user_program_list_by_seriesid(UserCenterReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  UserSerirsHisListResp rpc_do_get_user_series_history(UserCenterUserReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  IuctRespBase rpc_do_get_user_watching_channel_request(UserCenterUserReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  IuctRespBase rpc_do_add_user_favorite_request(USER_FAVORITE req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  IuctRespBase rpc_do_del_user_favorite_request(USER_FAVORITE req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  IuctRespBase rpc_do_add_multiple_user_favorite_request(MultiFavoriteReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  IuctRespBase rpc_do_del_multiple_user_favorite_request(MultiFavoriteReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  IuctRespBase rpc_do_check_is_favorite_request(UserCenterUserReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  MultiBoolResp rpc_do_multiple_check_is_favorite_request(MultiIntReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  IsFavsResp rpc_do_check_is_favs_request(UserCenterUserReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  MultiIsFavsResp rpc_do_multiple_check_is_favs_request(MultiIntReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  FavoriteListResp rpc_do_get_user_favorite_list_request(FavoriteListReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  IuctRespBase rpc_do_notify_user_program_update_request(ProgramUpdateReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  IuctRespBase rpc_do_program_enter_request(UserHitsReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  IuctRespBase rpc_do_program_exit_request(UserHitsReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  IuctRespBase rpc_do_get_program_hits_request(UserCenterUserReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  MultiHitsResp rpc_do_multiple_get_program_hits_request(MultiHitsReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  IuctRespBase rpc_do_check_is_praise_request(UserCenterUserReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  MultiIntResp rpc_do_multiple_check_is_praise_request(MultiIntReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  IuctRespBase rpc_do_get_pid_praise_request(UserCenterUserReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  MultiPraiseResp rpc_do_multiple_get_pids_praise_request(MultiIntReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  DemandResp rpc_do_get_program_demand_request(UserCenterUserReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  MultipleDemandResp rpc_do_get_multiple_program_demand_request(MultipleDemandReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  FavoriteListResp rpc_do_get_user_subscribe_list_request(UserCenterUserReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  UserColumnResp rpc_do_get_user_column_list_request(UserColumnReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  MultiBigIntResp rpc_do_get_user_often_watch_channel_list_request(UserCenterUserReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  MultiBigIntResp rpc_do_get_user_interest_column_and_series_request(UserCenterUserReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  MultiIntResp rpc_do_get_user_interest_medias_request(UserCenterUserReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  IuctRespBase rpc_do_add_user_order_request(OrderReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  IuctRespBase rpc_do_del_user_order_request(OrderReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  IuctRespBase rpc_do_check_is_order_request(UserCenterUserReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  MultiIntResp rpc_do_check_multiple_is_order_request(MultiIsOrderReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  OrderListResp rpc_do_get_user_order_list_request(UserCenterUserReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  IuctRespBase rpc_do_add_share_request(ShareAddReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  IuctRespBase rpc_do_multiple_del_share_request(MultiStrReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  ShareListResp rpc_do_get_user_share_list_request(UserCenterUserReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  IuctRespBase rpc_do_get_program_share_times_request(UserCenterUserReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  IuctRespBase rpc_do_add_comment_request(USER_COMMENT_INFO req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  CommentListResp rpc_do_get_program_comment_list_request(UserCenterUserReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  CommentListResp rpc_do_get_comment_list_by_commentid_request(UserCenterUserReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  MultiPraiseResp rpc_do_multiple_get_comments_praise_request(MultiStrReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  RankListResp rpc_do_get_rank_list(RankListReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  ProgramRankInfoResp rpc_do_get_program_rank_info(PRG_ID nPid, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  SearchHistoryListResp rpc_do_get_user_search_history_request(UserCenterUserReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  MultiBigIntResp rpc_do_get_user_all_subject(UserCenterUserReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  GuessSubjResp rpc_do_get_user_all_subject_and_program(UserCenterUserReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  MultiBigIntResp rpc_do_get_user_subject_program(UserCenterReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  UserProgramResp rpc_do_get_user_program_info_request(UserProgramReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr, "  MultiUserProgramResp rpc_do_get_multiple_user_program_info_request(MultiUserProgramReq req, ZipkinHeader ot_rpc_ctx)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := iuct_service.NewIuctThriftServiceClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "monitorqueryprocessstatus":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Monitorqueryprocessstatus requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Monitorqueryprocessstatus())
    fmt.Print("\n")
    break
  case "rpc_do_user_center_comm_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoUserCenterCommRequest requires 2 args")
      flag.Usage()
    }
    arg164 := flag.Arg(1)
    mbTrans165 := thrift.NewTMemoryBufferLen(len(arg164))
    defer mbTrans165.Close()
    _, err166 := mbTrans165.WriteString(arg164)
    if err166 != nil {
      Usage()
      return
    }
    factory167 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt168 := factory167.GetProtocol(mbTrans165)
    argvalue0 := iuct_service.NewUserCenterCommReq()
    err169 := argvalue0.Read(jsProt168)
    if err169 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg170 := flag.Arg(2)
    mbTrans171 := thrift.NewTMemoryBufferLen(len(arg170))
    defer mbTrans171.Close()
    _, err172 := mbTrans171.WriteString(arg170)
    if err172 != nil {
      Usage()
      return
    }
    factory173 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt174 := factory173.GetProtocol(mbTrans171)
    argvalue1 := com_types.NewZipkinHeader()
    err175 := argvalue1.Read(jsProt174)
    if err175 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoUserCenterCommRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_add_user_history_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoAddUserHistoryRequest requires 2 args")
      flag.Usage()
    }
    arg176 := flag.Arg(1)
    mbTrans177 := thrift.NewTMemoryBufferLen(len(arg176))
    defer mbTrans177.Close()
    _, err178 := mbTrans177.WriteString(arg176)
    if err178 != nil {
      Usage()
      return
    }
    factory179 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt180 := factory179.GetProtocol(mbTrans177)
    argvalue0 := iuct_types.NewUSER_HISTORY()
    err181 := argvalue0.Read(jsProt180)
    if err181 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg182 := flag.Arg(2)
    mbTrans183 := thrift.NewTMemoryBufferLen(len(arg182))
    defer mbTrans183.Close()
    _, err184 := mbTrans183.WriteString(arg182)
    if err184 != nil {
      Usage()
      return
    }
    factory185 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt186 := factory185.GetProtocol(mbTrans183)
    argvalue1 := com_types.NewZipkinHeader()
    err187 := argvalue1.Read(jsProt186)
    if err187 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoAddUserHistoryRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_del_user_history_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoDelUserHistoryRequest requires 2 args")
      flag.Usage()
    }
    arg188 := flag.Arg(1)
    mbTrans189 := thrift.NewTMemoryBufferLen(len(arg188))
    defer mbTrans189.Close()
    _, err190 := mbTrans189.WriteString(arg188)
    if err190 != nil {
      Usage()
      return
    }
    factory191 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt192 := factory191.GetProtocol(mbTrans189)
    argvalue0 := iuct_types.NewUSER_HISTORY()
    err193 := argvalue0.Read(jsProt192)
    if err193 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg194 := flag.Arg(2)
    mbTrans195 := thrift.NewTMemoryBufferLen(len(arg194))
    defer mbTrans195.Close()
    _, err196 := mbTrans195.WriteString(arg194)
    if err196 != nil {
      Usage()
      return
    }
    factory197 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt198 := factory197.GetProtocol(mbTrans195)
    argvalue1 := com_types.NewZipkinHeader()
    err199 := argvalue1.Read(jsProt198)
    if err199 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoDelUserHistoryRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_user_history_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetUserHistoryRequest requires 2 args")
      flag.Usage()
    }
    arg200 := flag.Arg(1)
    mbTrans201 := thrift.NewTMemoryBufferLen(len(arg200))
    defer mbTrans201.Close()
    _, err202 := mbTrans201.WriteString(arg200)
    if err202 != nil {
      Usage()
      return
    }
    factory203 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt204 := factory203.GetProtocol(mbTrans201)
    argvalue0 := iuct_service.NewHistoryReq()
    err205 := argvalue0.Read(jsProt204)
    if err205 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg206 := flag.Arg(2)
    mbTrans207 := thrift.NewTMemoryBufferLen(len(arg206))
    defer mbTrans207.Close()
    _, err208 := mbTrans207.WriteString(arg206)
    if err208 != nil {
      Usage()
      return
    }
    factory209 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt210 := factory209.GetProtocol(mbTrans207)
    argvalue1 := com_types.NewZipkinHeader()
    err211 := argvalue1.Read(jsProt210)
    if err211 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetUserHistoryRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_user_history_list_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetUserHistoryListRequest requires 2 args")
      flag.Usage()
    }
    arg212 := flag.Arg(1)
    mbTrans213 := thrift.NewTMemoryBufferLen(len(arg212))
    defer mbTrans213.Close()
    _, err214 := mbTrans213.WriteString(arg212)
    if err214 != nil {
      Usage()
      return
    }
    factory215 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt216 := factory215.GetProtocol(mbTrans213)
    argvalue0 := iuct_service.NewHistoryListReq()
    err217 := argvalue0.Read(jsProt216)
    if err217 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg218 := flag.Arg(2)
    mbTrans219 := thrift.NewTMemoryBufferLen(len(arg218))
    defer mbTrans219.Close()
    _, err220 := mbTrans219.WriteString(arg218)
    if err220 != nil {
      Usage()
      return
    }
    factory221 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt222 := factory221.GetProtocol(mbTrans219)
    argvalue1 := com_types.NewZipkinHeader()
    err223 := argvalue1.Read(jsProt222)
    if err223 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetUserHistoryListRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_user_last_program_by_seriesid":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetUserLastProgramBySeriesid requires 2 args")
      flag.Usage()
    }
    arg224 := flag.Arg(1)
    mbTrans225 := thrift.NewTMemoryBufferLen(len(arg224))
    defer mbTrans225.Close()
    _, err226 := mbTrans225.WriteString(arg224)
    if err226 != nil {
      Usage()
      return
    }
    factory227 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt228 := factory227.GetProtocol(mbTrans225)
    argvalue0 := iuct_service.NewUserCenterReq()
    err229 := argvalue0.Read(jsProt228)
    if err229 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg230 := flag.Arg(2)
    mbTrans231 := thrift.NewTMemoryBufferLen(len(arg230))
    defer mbTrans231.Close()
    _, err232 := mbTrans231.WriteString(arg230)
    if err232 != nil {
      Usage()
      return
    }
    factory233 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt234 := factory233.GetProtocol(mbTrans231)
    argvalue1 := com_types.NewZipkinHeader()
    err235 := argvalue1.Read(jsProt234)
    if err235 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetUserLastProgramBySeriesid(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_user_program_list_by_seriesid":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetUserProgramListBySeriesid requires 2 args")
      flag.Usage()
    }
    arg236 := flag.Arg(1)
    mbTrans237 := thrift.NewTMemoryBufferLen(len(arg236))
    defer mbTrans237.Close()
    _, err238 := mbTrans237.WriteString(arg236)
    if err238 != nil {
      Usage()
      return
    }
    factory239 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt240 := factory239.GetProtocol(mbTrans237)
    argvalue0 := iuct_service.NewUserCenterReq()
    err241 := argvalue0.Read(jsProt240)
    if err241 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg242 := flag.Arg(2)
    mbTrans243 := thrift.NewTMemoryBufferLen(len(arg242))
    defer mbTrans243.Close()
    _, err244 := mbTrans243.WriteString(arg242)
    if err244 != nil {
      Usage()
      return
    }
    factory245 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt246 := factory245.GetProtocol(mbTrans243)
    argvalue1 := com_types.NewZipkinHeader()
    err247 := argvalue1.Read(jsProt246)
    if err247 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetUserProgramListBySeriesid(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_user_series_history":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetUserSeriesHistory requires 2 args")
      flag.Usage()
    }
    arg248 := flag.Arg(1)
    mbTrans249 := thrift.NewTMemoryBufferLen(len(arg248))
    defer mbTrans249.Close()
    _, err250 := mbTrans249.WriteString(arg248)
    if err250 != nil {
      Usage()
      return
    }
    factory251 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt252 := factory251.GetProtocol(mbTrans249)
    argvalue0 := iuct_service.NewUserCenterUserReq()
    err253 := argvalue0.Read(jsProt252)
    if err253 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg254 := flag.Arg(2)
    mbTrans255 := thrift.NewTMemoryBufferLen(len(arg254))
    defer mbTrans255.Close()
    _, err256 := mbTrans255.WriteString(arg254)
    if err256 != nil {
      Usage()
      return
    }
    factory257 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt258 := factory257.GetProtocol(mbTrans255)
    argvalue1 := com_types.NewZipkinHeader()
    err259 := argvalue1.Read(jsProt258)
    if err259 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetUserSeriesHistory(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_user_watching_channel_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetUserWatchingChannelRequest requires 2 args")
      flag.Usage()
    }
    arg260 := flag.Arg(1)
    mbTrans261 := thrift.NewTMemoryBufferLen(len(arg260))
    defer mbTrans261.Close()
    _, err262 := mbTrans261.WriteString(arg260)
    if err262 != nil {
      Usage()
      return
    }
    factory263 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt264 := factory263.GetProtocol(mbTrans261)
    argvalue0 := iuct_service.NewUserCenterUserReq()
    err265 := argvalue0.Read(jsProt264)
    if err265 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg266 := flag.Arg(2)
    mbTrans267 := thrift.NewTMemoryBufferLen(len(arg266))
    defer mbTrans267.Close()
    _, err268 := mbTrans267.WriteString(arg266)
    if err268 != nil {
      Usage()
      return
    }
    factory269 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt270 := factory269.GetProtocol(mbTrans267)
    argvalue1 := com_types.NewZipkinHeader()
    err271 := argvalue1.Read(jsProt270)
    if err271 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetUserWatchingChannelRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_add_user_favorite_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoAddUserFavoriteRequest requires 2 args")
      flag.Usage()
    }
    arg272 := flag.Arg(1)
    mbTrans273 := thrift.NewTMemoryBufferLen(len(arg272))
    defer mbTrans273.Close()
    _, err274 := mbTrans273.WriteString(arg272)
    if err274 != nil {
      Usage()
      return
    }
    factory275 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt276 := factory275.GetProtocol(mbTrans273)
    argvalue0 := iuct_types.NewUSER_FAVORITE()
    err277 := argvalue0.Read(jsProt276)
    if err277 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg278 := flag.Arg(2)
    mbTrans279 := thrift.NewTMemoryBufferLen(len(arg278))
    defer mbTrans279.Close()
    _, err280 := mbTrans279.WriteString(arg278)
    if err280 != nil {
      Usage()
      return
    }
    factory281 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt282 := factory281.GetProtocol(mbTrans279)
    argvalue1 := com_types.NewZipkinHeader()
    err283 := argvalue1.Read(jsProt282)
    if err283 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoAddUserFavoriteRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_del_user_favorite_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoDelUserFavoriteRequest requires 2 args")
      flag.Usage()
    }
    arg284 := flag.Arg(1)
    mbTrans285 := thrift.NewTMemoryBufferLen(len(arg284))
    defer mbTrans285.Close()
    _, err286 := mbTrans285.WriteString(arg284)
    if err286 != nil {
      Usage()
      return
    }
    factory287 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt288 := factory287.GetProtocol(mbTrans285)
    argvalue0 := iuct_types.NewUSER_FAVORITE()
    err289 := argvalue0.Read(jsProt288)
    if err289 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg290 := flag.Arg(2)
    mbTrans291 := thrift.NewTMemoryBufferLen(len(arg290))
    defer mbTrans291.Close()
    _, err292 := mbTrans291.WriteString(arg290)
    if err292 != nil {
      Usage()
      return
    }
    factory293 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt294 := factory293.GetProtocol(mbTrans291)
    argvalue1 := com_types.NewZipkinHeader()
    err295 := argvalue1.Read(jsProt294)
    if err295 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoDelUserFavoriteRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_add_multiple_user_favorite_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoAddMultipleUserFavoriteRequest requires 2 args")
      flag.Usage()
    }
    arg296 := flag.Arg(1)
    mbTrans297 := thrift.NewTMemoryBufferLen(len(arg296))
    defer mbTrans297.Close()
    _, err298 := mbTrans297.WriteString(arg296)
    if err298 != nil {
      Usage()
      return
    }
    factory299 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt300 := factory299.GetProtocol(mbTrans297)
    argvalue0 := iuct_service.NewMultiFavoriteReq()
    err301 := argvalue0.Read(jsProt300)
    if err301 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg302 := flag.Arg(2)
    mbTrans303 := thrift.NewTMemoryBufferLen(len(arg302))
    defer mbTrans303.Close()
    _, err304 := mbTrans303.WriteString(arg302)
    if err304 != nil {
      Usage()
      return
    }
    factory305 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt306 := factory305.GetProtocol(mbTrans303)
    argvalue1 := com_types.NewZipkinHeader()
    err307 := argvalue1.Read(jsProt306)
    if err307 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoAddMultipleUserFavoriteRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_del_multiple_user_favorite_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoDelMultipleUserFavoriteRequest requires 2 args")
      flag.Usage()
    }
    arg308 := flag.Arg(1)
    mbTrans309 := thrift.NewTMemoryBufferLen(len(arg308))
    defer mbTrans309.Close()
    _, err310 := mbTrans309.WriteString(arg308)
    if err310 != nil {
      Usage()
      return
    }
    factory311 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt312 := factory311.GetProtocol(mbTrans309)
    argvalue0 := iuct_service.NewMultiFavoriteReq()
    err313 := argvalue0.Read(jsProt312)
    if err313 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg314 := flag.Arg(2)
    mbTrans315 := thrift.NewTMemoryBufferLen(len(arg314))
    defer mbTrans315.Close()
    _, err316 := mbTrans315.WriteString(arg314)
    if err316 != nil {
      Usage()
      return
    }
    factory317 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt318 := factory317.GetProtocol(mbTrans315)
    argvalue1 := com_types.NewZipkinHeader()
    err319 := argvalue1.Read(jsProt318)
    if err319 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoDelMultipleUserFavoriteRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_check_is_favorite_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoCheckIsFavoriteRequest requires 2 args")
      flag.Usage()
    }
    arg320 := flag.Arg(1)
    mbTrans321 := thrift.NewTMemoryBufferLen(len(arg320))
    defer mbTrans321.Close()
    _, err322 := mbTrans321.WriteString(arg320)
    if err322 != nil {
      Usage()
      return
    }
    factory323 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt324 := factory323.GetProtocol(mbTrans321)
    argvalue0 := iuct_service.NewUserCenterUserReq()
    err325 := argvalue0.Read(jsProt324)
    if err325 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg326 := flag.Arg(2)
    mbTrans327 := thrift.NewTMemoryBufferLen(len(arg326))
    defer mbTrans327.Close()
    _, err328 := mbTrans327.WriteString(arg326)
    if err328 != nil {
      Usage()
      return
    }
    factory329 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt330 := factory329.GetProtocol(mbTrans327)
    argvalue1 := com_types.NewZipkinHeader()
    err331 := argvalue1.Read(jsProt330)
    if err331 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoCheckIsFavoriteRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_multiple_check_is_favorite_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoMultipleCheckIsFavoriteRequest requires 2 args")
      flag.Usage()
    }
    arg332 := flag.Arg(1)
    mbTrans333 := thrift.NewTMemoryBufferLen(len(arg332))
    defer mbTrans333.Close()
    _, err334 := mbTrans333.WriteString(arg332)
    if err334 != nil {
      Usage()
      return
    }
    factory335 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt336 := factory335.GetProtocol(mbTrans333)
    argvalue0 := iuct_service.NewMultiIntReq()
    err337 := argvalue0.Read(jsProt336)
    if err337 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg338 := flag.Arg(2)
    mbTrans339 := thrift.NewTMemoryBufferLen(len(arg338))
    defer mbTrans339.Close()
    _, err340 := mbTrans339.WriteString(arg338)
    if err340 != nil {
      Usage()
      return
    }
    factory341 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt342 := factory341.GetProtocol(mbTrans339)
    argvalue1 := com_types.NewZipkinHeader()
    err343 := argvalue1.Read(jsProt342)
    if err343 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoMultipleCheckIsFavoriteRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_check_is_favs_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoCheckIsFavsRequest requires 2 args")
      flag.Usage()
    }
    arg344 := flag.Arg(1)
    mbTrans345 := thrift.NewTMemoryBufferLen(len(arg344))
    defer mbTrans345.Close()
    _, err346 := mbTrans345.WriteString(arg344)
    if err346 != nil {
      Usage()
      return
    }
    factory347 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt348 := factory347.GetProtocol(mbTrans345)
    argvalue0 := iuct_service.NewUserCenterUserReq()
    err349 := argvalue0.Read(jsProt348)
    if err349 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg350 := flag.Arg(2)
    mbTrans351 := thrift.NewTMemoryBufferLen(len(arg350))
    defer mbTrans351.Close()
    _, err352 := mbTrans351.WriteString(arg350)
    if err352 != nil {
      Usage()
      return
    }
    factory353 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt354 := factory353.GetProtocol(mbTrans351)
    argvalue1 := com_types.NewZipkinHeader()
    err355 := argvalue1.Read(jsProt354)
    if err355 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoCheckIsFavsRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_multiple_check_is_favs_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoMultipleCheckIsFavsRequest requires 2 args")
      flag.Usage()
    }
    arg356 := flag.Arg(1)
    mbTrans357 := thrift.NewTMemoryBufferLen(len(arg356))
    defer mbTrans357.Close()
    _, err358 := mbTrans357.WriteString(arg356)
    if err358 != nil {
      Usage()
      return
    }
    factory359 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt360 := factory359.GetProtocol(mbTrans357)
    argvalue0 := iuct_service.NewMultiIntReq()
    err361 := argvalue0.Read(jsProt360)
    if err361 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg362 := flag.Arg(2)
    mbTrans363 := thrift.NewTMemoryBufferLen(len(arg362))
    defer mbTrans363.Close()
    _, err364 := mbTrans363.WriteString(arg362)
    if err364 != nil {
      Usage()
      return
    }
    factory365 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt366 := factory365.GetProtocol(mbTrans363)
    argvalue1 := com_types.NewZipkinHeader()
    err367 := argvalue1.Read(jsProt366)
    if err367 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoMultipleCheckIsFavsRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_user_favorite_list_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetUserFavoriteListRequest requires 2 args")
      flag.Usage()
    }
    arg368 := flag.Arg(1)
    mbTrans369 := thrift.NewTMemoryBufferLen(len(arg368))
    defer mbTrans369.Close()
    _, err370 := mbTrans369.WriteString(arg368)
    if err370 != nil {
      Usage()
      return
    }
    factory371 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt372 := factory371.GetProtocol(mbTrans369)
    argvalue0 := iuct_service.NewFavoriteListReq()
    err373 := argvalue0.Read(jsProt372)
    if err373 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg374 := flag.Arg(2)
    mbTrans375 := thrift.NewTMemoryBufferLen(len(arg374))
    defer mbTrans375.Close()
    _, err376 := mbTrans375.WriteString(arg374)
    if err376 != nil {
      Usage()
      return
    }
    factory377 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt378 := factory377.GetProtocol(mbTrans375)
    argvalue1 := com_types.NewZipkinHeader()
    err379 := argvalue1.Read(jsProt378)
    if err379 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetUserFavoriteListRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_notify_user_program_update_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoNotifyUserProgramUpdateRequest requires 2 args")
      flag.Usage()
    }
    arg380 := flag.Arg(1)
    mbTrans381 := thrift.NewTMemoryBufferLen(len(arg380))
    defer mbTrans381.Close()
    _, err382 := mbTrans381.WriteString(arg380)
    if err382 != nil {
      Usage()
      return
    }
    factory383 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt384 := factory383.GetProtocol(mbTrans381)
    argvalue0 := iuct_service.NewProgramUpdateReq()
    err385 := argvalue0.Read(jsProt384)
    if err385 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg386 := flag.Arg(2)
    mbTrans387 := thrift.NewTMemoryBufferLen(len(arg386))
    defer mbTrans387.Close()
    _, err388 := mbTrans387.WriteString(arg386)
    if err388 != nil {
      Usage()
      return
    }
    factory389 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt390 := factory389.GetProtocol(mbTrans387)
    argvalue1 := com_types.NewZipkinHeader()
    err391 := argvalue1.Read(jsProt390)
    if err391 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoNotifyUserProgramUpdateRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_program_enter_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoProgramEnterRequest requires 2 args")
      flag.Usage()
    }
    arg392 := flag.Arg(1)
    mbTrans393 := thrift.NewTMemoryBufferLen(len(arg392))
    defer mbTrans393.Close()
    _, err394 := mbTrans393.WriteString(arg392)
    if err394 != nil {
      Usage()
      return
    }
    factory395 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt396 := factory395.GetProtocol(mbTrans393)
    argvalue0 := iuct_service.NewUserHitsReq()
    err397 := argvalue0.Read(jsProt396)
    if err397 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg398 := flag.Arg(2)
    mbTrans399 := thrift.NewTMemoryBufferLen(len(arg398))
    defer mbTrans399.Close()
    _, err400 := mbTrans399.WriteString(arg398)
    if err400 != nil {
      Usage()
      return
    }
    factory401 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt402 := factory401.GetProtocol(mbTrans399)
    argvalue1 := com_types.NewZipkinHeader()
    err403 := argvalue1.Read(jsProt402)
    if err403 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoProgramEnterRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_program_exit_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoProgramExitRequest requires 2 args")
      flag.Usage()
    }
    arg404 := flag.Arg(1)
    mbTrans405 := thrift.NewTMemoryBufferLen(len(arg404))
    defer mbTrans405.Close()
    _, err406 := mbTrans405.WriteString(arg404)
    if err406 != nil {
      Usage()
      return
    }
    factory407 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt408 := factory407.GetProtocol(mbTrans405)
    argvalue0 := iuct_service.NewUserHitsReq()
    err409 := argvalue0.Read(jsProt408)
    if err409 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg410 := flag.Arg(2)
    mbTrans411 := thrift.NewTMemoryBufferLen(len(arg410))
    defer mbTrans411.Close()
    _, err412 := mbTrans411.WriteString(arg410)
    if err412 != nil {
      Usage()
      return
    }
    factory413 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt414 := factory413.GetProtocol(mbTrans411)
    argvalue1 := com_types.NewZipkinHeader()
    err415 := argvalue1.Read(jsProt414)
    if err415 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoProgramExitRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_program_hits_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetProgramHitsRequest requires 2 args")
      flag.Usage()
    }
    arg416 := flag.Arg(1)
    mbTrans417 := thrift.NewTMemoryBufferLen(len(arg416))
    defer mbTrans417.Close()
    _, err418 := mbTrans417.WriteString(arg416)
    if err418 != nil {
      Usage()
      return
    }
    factory419 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt420 := factory419.GetProtocol(mbTrans417)
    argvalue0 := iuct_service.NewUserCenterUserReq()
    err421 := argvalue0.Read(jsProt420)
    if err421 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg422 := flag.Arg(2)
    mbTrans423 := thrift.NewTMemoryBufferLen(len(arg422))
    defer mbTrans423.Close()
    _, err424 := mbTrans423.WriteString(arg422)
    if err424 != nil {
      Usage()
      return
    }
    factory425 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt426 := factory425.GetProtocol(mbTrans423)
    argvalue1 := com_types.NewZipkinHeader()
    err427 := argvalue1.Read(jsProt426)
    if err427 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetProgramHitsRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_multiple_get_program_hits_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoMultipleGetProgramHitsRequest requires 2 args")
      flag.Usage()
    }
    arg428 := flag.Arg(1)
    mbTrans429 := thrift.NewTMemoryBufferLen(len(arg428))
    defer mbTrans429.Close()
    _, err430 := mbTrans429.WriteString(arg428)
    if err430 != nil {
      Usage()
      return
    }
    factory431 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt432 := factory431.GetProtocol(mbTrans429)
    argvalue0 := iuct_service.NewMultiHitsReq()
    err433 := argvalue0.Read(jsProt432)
    if err433 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg434 := flag.Arg(2)
    mbTrans435 := thrift.NewTMemoryBufferLen(len(arg434))
    defer mbTrans435.Close()
    _, err436 := mbTrans435.WriteString(arg434)
    if err436 != nil {
      Usage()
      return
    }
    factory437 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt438 := factory437.GetProtocol(mbTrans435)
    argvalue1 := com_types.NewZipkinHeader()
    err439 := argvalue1.Read(jsProt438)
    if err439 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoMultipleGetProgramHitsRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_check_is_praise_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoCheckIsPraiseRequest requires 2 args")
      flag.Usage()
    }
    arg440 := flag.Arg(1)
    mbTrans441 := thrift.NewTMemoryBufferLen(len(arg440))
    defer mbTrans441.Close()
    _, err442 := mbTrans441.WriteString(arg440)
    if err442 != nil {
      Usage()
      return
    }
    factory443 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt444 := factory443.GetProtocol(mbTrans441)
    argvalue0 := iuct_service.NewUserCenterUserReq()
    err445 := argvalue0.Read(jsProt444)
    if err445 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg446 := flag.Arg(2)
    mbTrans447 := thrift.NewTMemoryBufferLen(len(arg446))
    defer mbTrans447.Close()
    _, err448 := mbTrans447.WriteString(arg446)
    if err448 != nil {
      Usage()
      return
    }
    factory449 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt450 := factory449.GetProtocol(mbTrans447)
    argvalue1 := com_types.NewZipkinHeader()
    err451 := argvalue1.Read(jsProt450)
    if err451 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoCheckIsPraiseRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_multiple_check_is_praise_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoMultipleCheckIsPraiseRequest requires 2 args")
      flag.Usage()
    }
    arg452 := flag.Arg(1)
    mbTrans453 := thrift.NewTMemoryBufferLen(len(arg452))
    defer mbTrans453.Close()
    _, err454 := mbTrans453.WriteString(arg452)
    if err454 != nil {
      Usage()
      return
    }
    factory455 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt456 := factory455.GetProtocol(mbTrans453)
    argvalue0 := iuct_service.NewMultiIntReq()
    err457 := argvalue0.Read(jsProt456)
    if err457 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg458 := flag.Arg(2)
    mbTrans459 := thrift.NewTMemoryBufferLen(len(arg458))
    defer mbTrans459.Close()
    _, err460 := mbTrans459.WriteString(arg458)
    if err460 != nil {
      Usage()
      return
    }
    factory461 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt462 := factory461.GetProtocol(mbTrans459)
    argvalue1 := com_types.NewZipkinHeader()
    err463 := argvalue1.Read(jsProt462)
    if err463 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoMultipleCheckIsPraiseRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_pid_praise_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetPidPraiseRequest requires 2 args")
      flag.Usage()
    }
    arg464 := flag.Arg(1)
    mbTrans465 := thrift.NewTMemoryBufferLen(len(arg464))
    defer mbTrans465.Close()
    _, err466 := mbTrans465.WriteString(arg464)
    if err466 != nil {
      Usage()
      return
    }
    factory467 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt468 := factory467.GetProtocol(mbTrans465)
    argvalue0 := iuct_service.NewUserCenterUserReq()
    err469 := argvalue0.Read(jsProt468)
    if err469 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg470 := flag.Arg(2)
    mbTrans471 := thrift.NewTMemoryBufferLen(len(arg470))
    defer mbTrans471.Close()
    _, err472 := mbTrans471.WriteString(arg470)
    if err472 != nil {
      Usage()
      return
    }
    factory473 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt474 := factory473.GetProtocol(mbTrans471)
    argvalue1 := com_types.NewZipkinHeader()
    err475 := argvalue1.Read(jsProt474)
    if err475 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetPidPraiseRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_multiple_get_pids_praise_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoMultipleGetPidsPraiseRequest requires 2 args")
      flag.Usage()
    }
    arg476 := flag.Arg(1)
    mbTrans477 := thrift.NewTMemoryBufferLen(len(arg476))
    defer mbTrans477.Close()
    _, err478 := mbTrans477.WriteString(arg476)
    if err478 != nil {
      Usage()
      return
    }
    factory479 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt480 := factory479.GetProtocol(mbTrans477)
    argvalue0 := iuct_service.NewMultiIntReq()
    err481 := argvalue0.Read(jsProt480)
    if err481 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg482 := flag.Arg(2)
    mbTrans483 := thrift.NewTMemoryBufferLen(len(arg482))
    defer mbTrans483.Close()
    _, err484 := mbTrans483.WriteString(arg482)
    if err484 != nil {
      Usage()
      return
    }
    factory485 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt486 := factory485.GetProtocol(mbTrans483)
    argvalue1 := com_types.NewZipkinHeader()
    err487 := argvalue1.Read(jsProt486)
    if err487 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoMultipleGetPidsPraiseRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_program_demand_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetProgramDemandRequest requires 2 args")
      flag.Usage()
    }
    arg488 := flag.Arg(1)
    mbTrans489 := thrift.NewTMemoryBufferLen(len(arg488))
    defer mbTrans489.Close()
    _, err490 := mbTrans489.WriteString(arg488)
    if err490 != nil {
      Usage()
      return
    }
    factory491 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt492 := factory491.GetProtocol(mbTrans489)
    argvalue0 := iuct_service.NewUserCenterUserReq()
    err493 := argvalue0.Read(jsProt492)
    if err493 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg494 := flag.Arg(2)
    mbTrans495 := thrift.NewTMemoryBufferLen(len(arg494))
    defer mbTrans495.Close()
    _, err496 := mbTrans495.WriteString(arg494)
    if err496 != nil {
      Usage()
      return
    }
    factory497 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt498 := factory497.GetProtocol(mbTrans495)
    argvalue1 := com_types.NewZipkinHeader()
    err499 := argvalue1.Read(jsProt498)
    if err499 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetProgramDemandRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_multiple_program_demand_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetMultipleProgramDemandRequest requires 2 args")
      flag.Usage()
    }
    arg500 := flag.Arg(1)
    mbTrans501 := thrift.NewTMemoryBufferLen(len(arg500))
    defer mbTrans501.Close()
    _, err502 := mbTrans501.WriteString(arg500)
    if err502 != nil {
      Usage()
      return
    }
    factory503 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt504 := factory503.GetProtocol(mbTrans501)
    argvalue0 := iuct_service.NewMultipleDemandReq()
    err505 := argvalue0.Read(jsProt504)
    if err505 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg506 := flag.Arg(2)
    mbTrans507 := thrift.NewTMemoryBufferLen(len(arg506))
    defer mbTrans507.Close()
    _, err508 := mbTrans507.WriteString(arg506)
    if err508 != nil {
      Usage()
      return
    }
    factory509 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt510 := factory509.GetProtocol(mbTrans507)
    argvalue1 := com_types.NewZipkinHeader()
    err511 := argvalue1.Read(jsProt510)
    if err511 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetMultipleProgramDemandRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_user_subscribe_list_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetUserSubscribeListRequest requires 2 args")
      flag.Usage()
    }
    arg512 := flag.Arg(1)
    mbTrans513 := thrift.NewTMemoryBufferLen(len(arg512))
    defer mbTrans513.Close()
    _, err514 := mbTrans513.WriteString(arg512)
    if err514 != nil {
      Usage()
      return
    }
    factory515 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt516 := factory515.GetProtocol(mbTrans513)
    argvalue0 := iuct_service.NewUserCenterUserReq()
    err517 := argvalue0.Read(jsProt516)
    if err517 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg518 := flag.Arg(2)
    mbTrans519 := thrift.NewTMemoryBufferLen(len(arg518))
    defer mbTrans519.Close()
    _, err520 := mbTrans519.WriteString(arg518)
    if err520 != nil {
      Usage()
      return
    }
    factory521 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt522 := factory521.GetProtocol(mbTrans519)
    argvalue1 := com_types.NewZipkinHeader()
    err523 := argvalue1.Read(jsProt522)
    if err523 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetUserSubscribeListRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_user_column_list_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetUserColumnListRequest requires 2 args")
      flag.Usage()
    }
    arg524 := flag.Arg(1)
    mbTrans525 := thrift.NewTMemoryBufferLen(len(arg524))
    defer mbTrans525.Close()
    _, err526 := mbTrans525.WriteString(arg524)
    if err526 != nil {
      Usage()
      return
    }
    factory527 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt528 := factory527.GetProtocol(mbTrans525)
    argvalue0 := iuct_service.NewUserColumnReq()
    err529 := argvalue0.Read(jsProt528)
    if err529 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg530 := flag.Arg(2)
    mbTrans531 := thrift.NewTMemoryBufferLen(len(arg530))
    defer mbTrans531.Close()
    _, err532 := mbTrans531.WriteString(arg530)
    if err532 != nil {
      Usage()
      return
    }
    factory533 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt534 := factory533.GetProtocol(mbTrans531)
    argvalue1 := com_types.NewZipkinHeader()
    err535 := argvalue1.Read(jsProt534)
    if err535 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetUserColumnListRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_user_often_watch_channel_list_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetUserOftenWatchChannelListRequest requires 2 args")
      flag.Usage()
    }
    arg536 := flag.Arg(1)
    mbTrans537 := thrift.NewTMemoryBufferLen(len(arg536))
    defer mbTrans537.Close()
    _, err538 := mbTrans537.WriteString(arg536)
    if err538 != nil {
      Usage()
      return
    }
    factory539 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt540 := factory539.GetProtocol(mbTrans537)
    argvalue0 := iuct_service.NewUserCenterUserReq()
    err541 := argvalue0.Read(jsProt540)
    if err541 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg542 := flag.Arg(2)
    mbTrans543 := thrift.NewTMemoryBufferLen(len(arg542))
    defer mbTrans543.Close()
    _, err544 := mbTrans543.WriteString(arg542)
    if err544 != nil {
      Usage()
      return
    }
    factory545 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt546 := factory545.GetProtocol(mbTrans543)
    argvalue1 := com_types.NewZipkinHeader()
    err547 := argvalue1.Read(jsProt546)
    if err547 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetUserOftenWatchChannelListRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_user_interest_column_and_series_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetUserInterestColumnAndSeriesRequest requires 2 args")
      flag.Usage()
    }
    arg548 := flag.Arg(1)
    mbTrans549 := thrift.NewTMemoryBufferLen(len(arg548))
    defer mbTrans549.Close()
    _, err550 := mbTrans549.WriteString(arg548)
    if err550 != nil {
      Usage()
      return
    }
    factory551 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt552 := factory551.GetProtocol(mbTrans549)
    argvalue0 := iuct_service.NewUserCenterUserReq()
    err553 := argvalue0.Read(jsProt552)
    if err553 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg554 := flag.Arg(2)
    mbTrans555 := thrift.NewTMemoryBufferLen(len(arg554))
    defer mbTrans555.Close()
    _, err556 := mbTrans555.WriteString(arg554)
    if err556 != nil {
      Usage()
      return
    }
    factory557 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt558 := factory557.GetProtocol(mbTrans555)
    argvalue1 := com_types.NewZipkinHeader()
    err559 := argvalue1.Read(jsProt558)
    if err559 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetUserInterestColumnAndSeriesRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_user_interest_medias_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetUserInterestMediasRequest requires 2 args")
      flag.Usage()
    }
    arg560 := flag.Arg(1)
    mbTrans561 := thrift.NewTMemoryBufferLen(len(arg560))
    defer mbTrans561.Close()
    _, err562 := mbTrans561.WriteString(arg560)
    if err562 != nil {
      Usage()
      return
    }
    factory563 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt564 := factory563.GetProtocol(mbTrans561)
    argvalue0 := iuct_service.NewUserCenterUserReq()
    err565 := argvalue0.Read(jsProt564)
    if err565 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg566 := flag.Arg(2)
    mbTrans567 := thrift.NewTMemoryBufferLen(len(arg566))
    defer mbTrans567.Close()
    _, err568 := mbTrans567.WriteString(arg566)
    if err568 != nil {
      Usage()
      return
    }
    factory569 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt570 := factory569.GetProtocol(mbTrans567)
    argvalue1 := com_types.NewZipkinHeader()
    err571 := argvalue1.Read(jsProt570)
    if err571 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetUserInterestMediasRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_add_user_order_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoAddUserOrderRequest requires 2 args")
      flag.Usage()
    }
    arg572 := flag.Arg(1)
    mbTrans573 := thrift.NewTMemoryBufferLen(len(arg572))
    defer mbTrans573.Close()
    _, err574 := mbTrans573.WriteString(arg572)
    if err574 != nil {
      Usage()
      return
    }
    factory575 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt576 := factory575.GetProtocol(mbTrans573)
    argvalue0 := iuct_service.NewOrderReq()
    err577 := argvalue0.Read(jsProt576)
    if err577 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg578 := flag.Arg(2)
    mbTrans579 := thrift.NewTMemoryBufferLen(len(arg578))
    defer mbTrans579.Close()
    _, err580 := mbTrans579.WriteString(arg578)
    if err580 != nil {
      Usage()
      return
    }
    factory581 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt582 := factory581.GetProtocol(mbTrans579)
    argvalue1 := com_types.NewZipkinHeader()
    err583 := argvalue1.Read(jsProt582)
    if err583 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoAddUserOrderRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_del_user_order_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoDelUserOrderRequest requires 2 args")
      flag.Usage()
    }
    arg584 := flag.Arg(1)
    mbTrans585 := thrift.NewTMemoryBufferLen(len(arg584))
    defer mbTrans585.Close()
    _, err586 := mbTrans585.WriteString(arg584)
    if err586 != nil {
      Usage()
      return
    }
    factory587 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt588 := factory587.GetProtocol(mbTrans585)
    argvalue0 := iuct_service.NewOrderReq()
    err589 := argvalue0.Read(jsProt588)
    if err589 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg590 := flag.Arg(2)
    mbTrans591 := thrift.NewTMemoryBufferLen(len(arg590))
    defer mbTrans591.Close()
    _, err592 := mbTrans591.WriteString(arg590)
    if err592 != nil {
      Usage()
      return
    }
    factory593 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt594 := factory593.GetProtocol(mbTrans591)
    argvalue1 := com_types.NewZipkinHeader()
    err595 := argvalue1.Read(jsProt594)
    if err595 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoDelUserOrderRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_check_is_order_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoCheckIsOrderRequest requires 2 args")
      flag.Usage()
    }
    arg596 := flag.Arg(1)
    mbTrans597 := thrift.NewTMemoryBufferLen(len(arg596))
    defer mbTrans597.Close()
    _, err598 := mbTrans597.WriteString(arg596)
    if err598 != nil {
      Usage()
      return
    }
    factory599 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt600 := factory599.GetProtocol(mbTrans597)
    argvalue0 := iuct_service.NewUserCenterUserReq()
    err601 := argvalue0.Read(jsProt600)
    if err601 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg602 := flag.Arg(2)
    mbTrans603 := thrift.NewTMemoryBufferLen(len(arg602))
    defer mbTrans603.Close()
    _, err604 := mbTrans603.WriteString(arg602)
    if err604 != nil {
      Usage()
      return
    }
    factory605 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt606 := factory605.GetProtocol(mbTrans603)
    argvalue1 := com_types.NewZipkinHeader()
    err607 := argvalue1.Read(jsProt606)
    if err607 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoCheckIsOrderRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_check_multiple_is_order_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoCheckMultipleIsOrderRequest requires 2 args")
      flag.Usage()
    }
    arg608 := flag.Arg(1)
    mbTrans609 := thrift.NewTMemoryBufferLen(len(arg608))
    defer mbTrans609.Close()
    _, err610 := mbTrans609.WriteString(arg608)
    if err610 != nil {
      Usage()
      return
    }
    factory611 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt612 := factory611.GetProtocol(mbTrans609)
    argvalue0 := iuct_service.NewMultiIsOrderReq()
    err613 := argvalue0.Read(jsProt612)
    if err613 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg614 := flag.Arg(2)
    mbTrans615 := thrift.NewTMemoryBufferLen(len(arg614))
    defer mbTrans615.Close()
    _, err616 := mbTrans615.WriteString(arg614)
    if err616 != nil {
      Usage()
      return
    }
    factory617 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt618 := factory617.GetProtocol(mbTrans615)
    argvalue1 := com_types.NewZipkinHeader()
    err619 := argvalue1.Read(jsProt618)
    if err619 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoCheckMultipleIsOrderRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_user_order_list_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetUserOrderListRequest requires 2 args")
      flag.Usage()
    }
    arg620 := flag.Arg(1)
    mbTrans621 := thrift.NewTMemoryBufferLen(len(arg620))
    defer mbTrans621.Close()
    _, err622 := mbTrans621.WriteString(arg620)
    if err622 != nil {
      Usage()
      return
    }
    factory623 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt624 := factory623.GetProtocol(mbTrans621)
    argvalue0 := iuct_service.NewUserCenterUserReq()
    err625 := argvalue0.Read(jsProt624)
    if err625 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg626 := flag.Arg(2)
    mbTrans627 := thrift.NewTMemoryBufferLen(len(arg626))
    defer mbTrans627.Close()
    _, err628 := mbTrans627.WriteString(arg626)
    if err628 != nil {
      Usage()
      return
    }
    factory629 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt630 := factory629.GetProtocol(mbTrans627)
    argvalue1 := com_types.NewZipkinHeader()
    err631 := argvalue1.Read(jsProt630)
    if err631 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetUserOrderListRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_add_share_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoAddShareRequest requires 2 args")
      flag.Usage()
    }
    arg632 := flag.Arg(1)
    mbTrans633 := thrift.NewTMemoryBufferLen(len(arg632))
    defer mbTrans633.Close()
    _, err634 := mbTrans633.WriteString(arg632)
    if err634 != nil {
      Usage()
      return
    }
    factory635 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt636 := factory635.GetProtocol(mbTrans633)
    argvalue0 := iuct_service.NewShareAddReq()
    err637 := argvalue0.Read(jsProt636)
    if err637 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg638 := flag.Arg(2)
    mbTrans639 := thrift.NewTMemoryBufferLen(len(arg638))
    defer mbTrans639.Close()
    _, err640 := mbTrans639.WriteString(arg638)
    if err640 != nil {
      Usage()
      return
    }
    factory641 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt642 := factory641.GetProtocol(mbTrans639)
    argvalue1 := com_types.NewZipkinHeader()
    err643 := argvalue1.Read(jsProt642)
    if err643 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoAddShareRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_multiple_del_share_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoMultipleDelShareRequest requires 2 args")
      flag.Usage()
    }
    arg644 := flag.Arg(1)
    mbTrans645 := thrift.NewTMemoryBufferLen(len(arg644))
    defer mbTrans645.Close()
    _, err646 := mbTrans645.WriteString(arg644)
    if err646 != nil {
      Usage()
      return
    }
    factory647 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt648 := factory647.GetProtocol(mbTrans645)
    argvalue0 := iuct_service.NewMultiStrReq()
    err649 := argvalue0.Read(jsProt648)
    if err649 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg650 := flag.Arg(2)
    mbTrans651 := thrift.NewTMemoryBufferLen(len(arg650))
    defer mbTrans651.Close()
    _, err652 := mbTrans651.WriteString(arg650)
    if err652 != nil {
      Usage()
      return
    }
    factory653 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt654 := factory653.GetProtocol(mbTrans651)
    argvalue1 := com_types.NewZipkinHeader()
    err655 := argvalue1.Read(jsProt654)
    if err655 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoMultipleDelShareRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_user_share_list_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetUserShareListRequest requires 2 args")
      flag.Usage()
    }
    arg656 := flag.Arg(1)
    mbTrans657 := thrift.NewTMemoryBufferLen(len(arg656))
    defer mbTrans657.Close()
    _, err658 := mbTrans657.WriteString(arg656)
    if err658 != nil {
      Usage()
      return
    }
    factory659 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt660 := factory659.GetProtocol(mbTrans657)
    argvalue0 := iuct_service.NewUserCenterUserReq()
    err661 := argvalue0.Read(jsProt660)
    if err661 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg662 := flag.Arg(2)
    mbTrans663 := thrift.NewTMemoryBufferLen(len(arg662))
    defer mbTrans663.Close()
    _, err664 := mbTrans663.WriteString(arg662)
    if err664 != nil {
      Usage()
      return
    }
    factory665 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt666 := factory665.GetProtocol(mbTrans663)
    argvalue1 := com_types.NewZipkinHeader()
    err667 := argvalue1.Read(jsProt666)
    if err667 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetUserShareListRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_program_share_times_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetProgramShareTimesRequest requires 2 args")
      flag.Usage()
    }
    arg668 := flag.Arg(1)
    mbTrans669 := thrift.NewTMemoryBufferLen(len(arg668))
    defer mbTrans669.Close()
    _, err670 := mbTrans669.WriteString(arg668)
    if err670 != nil {
      Usage()
      return
    }
    factory671 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt672 := factory671.GetProtocol(mbTrans669)
    argvalue0 := iuct_service.NewUserCenterUserReq()
    err673 := argvalue0.Read(jsProt672)
    if err673 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg674 := flag.Arg(2)
    mbTrans675 := thrift.NewTMemoryBufferLen(len(arg674))
    defer mbTrans675.Close()
    _, err676 := mbTrans675.WriteString(arg674)
    if err676 != nil {
      Usage()
      return
    }
    factory677 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt678 := factory677.GetProtocol(mbTrans675)
    argvalue1 := com_types.NewZipkinHeader()
    err679 := argvalue1.Read(jsProt678)
    if err679 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetProgramShareTimesRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_add_comment_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoAddCommentRequest requires 2 args")
      flag.Usage()
    }
    arg680 := flag.Arg(1)
    mbTrans681 := thrift.NewTMemoryBufferLen(len(arg680))
    defer mbTrans681.Close()
    _, err682 := mbTrans681.WriteString(arg680)
    if err682 != nil {
      Usage()
      return
    }
    factory683 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt684 := factory683.GetProtocol(mbTrans681)
    argvalue0 := iuct_types.NewUSER_COMMENT_INFO()
    err685 := argvalue0.Read(jsProt684)
    if err685 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg686 := flag.Arg(2)
    mbTrans687 := thrift.NewTMemoryBufferLen(len(arg686))
    defer mbTrans687.Close()
    _, err688 := mbTrans687.WriteString(arg686)
    if err688 != nil {
      Usage()
      return
    }
    factory689 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt690 := factory689.GetProtocol(mbTrans687)
    argvalue1 := com_types.NewZipkinHeader()
    err691 := argvalue1.Read(jsProt690)
    if err691 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoAddCommentRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_program_comment_list_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetProgramCommentListRequest requires 2 args")
      flag.Usage()
    }
    arg692 := flag.Arg(1)
    mbTrans693 := thrift.NewTMemoryBufferLen(len(arg692))
    defer mbTrans693.Close()
    _, err694 := mbTrans693.WriteString(arg692)
    if err694 != nil {
      Usage()
      return
    }
    factory695 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt696 := factory695.GetProtocol(mbTrans693)
    argvalue0 := iuct_service.NewUserCenterUserReq()
    err697 := argvalue0.Read(jsProt696)
    if err697 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg698 := flag.Arg(2)
    mbTrans699 := thrift.NewTMemoryBufferLen(len(arg698))
    defer mbTrans699.Close()
    _, err700 := mbTrans699.WriteString(arg698)
    if err700 != nil {
      Usage()
      return
    }
    factory701 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt702 := factory701.GetProtocol(mbTrans699)
    argvalue1 := com_types.NewZipkinHeader()
    err703 := argvalue1.Read(jsProt702)
    if err703 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetProgramCommentListRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_comment_list_by_commentid_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetCommentListByCommentidRequest requires 2 args")
      flag.Usage()
    }
    arg704 := flag.Arg(1)
    mbTrans705 := thrift.NewTMemoryBufferLen(len(arg704))
    defer mbTrans705.Close()
    _, err706 := mbTrans705.WriteString(arg704)
    if err706 != nil {
      Usage()
      return
    }
    factory707 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt708 := factory707.GetProtocol(mbTrans705)
    argvalue0 := iuct_service.NewUserCenterUserReq()
    err709 := argvalue0.Read(jsProt708)
    if err709 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg710 := flag.Arg(2)
    mbTrans711 := thrift.NewTMemoryBufferLen(len(arg710))
    defer mbTrans711.Close()
    _, err712 := mbTrans711.WriteString(arg710)
    if err712 != nil {
      Usage()
      return
    }
    factory713 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt714 := factory713.GetProtocol(mbTrans711)
    argvalue1 := com_types.NewZipkinHeader()
    err715 := argvalue1.Read(jsProt714)
    if err715 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetCommentListByCommentidRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_multiple_get_comments_praise_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoMultipleGetCommentsPraiseRequest requires 2 args")
      flag.Usage()
    }
    arg716 := flag.Arg(1)
    mbTrans717 := thrift.NewTMemoryBufferLen(len(arg716))
    defer mbTrans717.Close()
    _, err718 := mbTrans717.WriteString(arg716)
    if err718 != nil {
      Usage()
      return
    }
    factory719 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt720 := factory719.GetProtocol(mbTrans717)
    argvalue0 := iuct_service.NewMultiStrReq()
    err721 := argvalue0.Read(jsProt720)
    if err721 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg722 := flag.Arg(2)
    mbTrans723 := thrift.NewTMemoryBufferLen(len(arg722))
    defer mbTrans723.Close()
    _, err724 := mbTrans723.WriteString(arg722)
    if err724 != nil {
      Usage()
      return
    }
    factory725 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt726 := factory725.GetProtocol(mbTrans723)
    argvalue1 := com_types.NewZipkinHeader()
    err727 := argvalue1.Read(jsProt726)
    if err727 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoMultipleGetCommentsPraiseRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_rank_list":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetRankList requires 2 args")
      flag.Usage()
    }
    arg728 := flag.Arg(1)
    mbTrans729 := thrift.NewTMemoryBufferLen(len(arg728))
    defer mbTrans729.Close()
    _, err730 := mbTrans729.WriteString(arg728)
    if err730 != nil {
      Usage()
      return
    }
    factory731 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt732 := factory731.GetProtocol(mbTrans729)
    argvalue0 := iuct_service.NewRankListReq()
    err733 := argvalue0.Read(jsProt732)
    if err733 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg734 := flag.Arg(2)
    mbTrans735 := thrift.NewTMemoryBufferLen(len(arg734))
    defer mbTrans735.Close()
    _, err736 := mbTrans735.WriteString(arg734)
    if err736 != nil {
      Usage()
      return
    }
    factory737 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt738 := factory737.GetProtocol(mbTrans735)
    argvalue1 := com_types.NewZipkinHeader()
    err739 := argvalue1.Read(jsProt738)
    if err739 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetRankList(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_program_rank_info":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetProgramRankInfo requires 2 args")
      flag.Usage()
    }
    argvalue0, err740 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err740 != nil {
      Usage()
      return
    }
    value0 := com_types.PRG_ID(argvalue0)
    arg741 := flag.Arg(2)
    mbTrans742 := thrift.NewTMemoryBufferLen(len(arg741))
    defer mbTrans742.Close()
    _, err743 := mbTrans742.WriteString(arg741)
    if err743 != nil {
      Usage()
      return
    }
    factory744 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt745 := factory744.GetProtocol(mbTrans742)
    argvalue1 := com_types.NewZipkinHeader()
    err746 := argvalue1.Read(jsProt745)
    if err746 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetProgramRankInfo(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_user_search_history_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetUserSearchHistoryRequest requires 2 args")
      flag.Usage()
    }
    arg747 := flag.Arg(1)
    mbTrans748 := thrift.NewTMemoryBufferLen(len(arg747))
    defer mbTrans748.Close()
    _, err749 := mbTrans748.WriteString(arg747)
    if err749 != nil {
      Usage()
      return
    }
    factory750 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt751 := factory750.GetProtocol(mbTrans748)
    argvalue0 := iuct_service.NewUserCenterUserReq()
    err752 := argvalue0.Read(jsProt751)
    if err752 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg753 := flag.Arg(2)
    mbTrans754 := thrift.NewTMemoryBufferLen(len(arg753))
    defer mbTrans754.Close()
    _, err755 := mbTrans754.WriteString(arg753)
    if err755 != nil {
      Usage()
      return
    }
    factory756 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt757 := factory756.GetProtocol(mbTrans754)
    argvalue1 := com_types.NewZipkinHeader()
    err758 := argvalue1.Read(jsProt757)
    if err758 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetUserSearchHistoryRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_user_all_subject":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetUserAllSubject requires 2 args")
      flag.Usage()
    }
    arg759 := flag.Arg(1)
    mbTrans760 := thrift.NewTMemoryBufferLen(len(arg759))
    defer mbTrans760.Close()
    _, err761 := mbTrans760.WriteString(arg759)
    if err761 != nil {
      Usage()
      return
    }
    factory762 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt763 := factory762.GetProtocol(mbTrans760)
    argvalue0 := iuct_service.NewUserCenterUserReq()
    err764 := argvalue0.Read(jsProt763)
    if err764 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg765 := flag.Arg(2)
    mbTrans766 := thrift.NewTMemoryBufferLen(len(arg765))
    defer mbTrans766.Close()
    _, err767 := mbTrans766.WriteString(arg765)
    if err767 != nil {
      Usage()
      return
    }
    factory768 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt769 := factory768.GetProtocol(mbTrans766)
    argvalue1 := com_types.NewZipkinHeader()
    err770 := argvalue1.Read(jsProt769)
    if err770 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetUserAllSubject(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_user_all_subject_and_program":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetUserAllSubjectAndProgram requires 2 args")
      flag.Usage()
    }
    arg771 := flag.Arg(1)
    mbTrans772 := thrift.NewTMemoryBufferLen(len(arg771))
    defer mbTrans772.Close()
    _, err773 := mbTrans772.WriteString(arg771)
    if err773 != nil {
      Usage()
      return
    }
    factory774 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt775 := factory774.GetProtocol(mbTrans772)
    argvalue0 := iuct_service.NewUserCenterUserReq()
    err776 := argvalue0.Read(jsProt775)
    if err776 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg777 := flag.Arg(2)
    mbTrans778 := thrift.NewTMemoryBufferLen(len(arg777))
    defer mbTrans778.Close()
    _, err779 := mbTrans778.WriteString(arg777)
    if err779 != nil {
      Usage()
      return
    }
    factory780 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt781 := factory780.GetProtocol(mbTrans778)
    argvalue1 := com_types.NewZipkinHeader()
    err782 := argvalue1.Read(jsProt781)
    if err782 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetUserAllSubjectAndProgram(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_user_subject_program":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetUserSubjectProgram requires 2 args")
      flag.Usage()
    }
    arg783 := flag.Arg(1)
    mbTrans784 := thrift.NewTMemoryBufferLen(len(arg783))
    defer mbTrans784.Close()
    _, err785 := mbTrans784.WriteString(arg783)
    if err785 != nil {
      Usage()
      return
    }
    factory786 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt787 := factory786.GetProtocol(mbTrans784)
    argvalue0 := iuct_service.NewUserCenterReq()
    err788 := argvalue0.Read(jsProt787)
    if err788 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg789 := flag.Arg(2)
    mbTrans790 := thrift.NewTMemoryBufferLen(len(arg789))
    defer mbTrans790.Close()
    _, err791 := mbTrans790.WriteString(arg789)
    if err791 != nil {
      Usage()
      return
    }
    factory792 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt793 := factory792.GetProtocol(mbTrans790)
    argvalue1 := com_types.NewZipkinHeader()
    err794 := argvalue1.Read(jsProt793)
    if err794 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetUserSubjectProgram(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_user_program_info_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetUserProgramInfoRequest requires 2 args")
      flag.Usage()
    }
    arg795 := flag.Arg(1)
    mbTrans796 := thrift.NewTMemoryBufferLen(len(arg795))
    defer mbTrans796.Close()
    _, err797 := mbTrans796.WriteString(arg795)
    if err797 != nil {
      Usage()
      return
    }
    factory798 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt799 := factory798.GetProtocol(mbTrans796)
    argvalue0 := iuct_service.NewUserProgramReq()
    err800 := argvalue0.Read(jsProt799)
    if err800 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg801 := flag.Arg(2)
    mbTrans802 := thrift.NewTMemoryBufferLen(len(arg801))
    defer mbTrans802.Close()
    _, err803 := mbTrans802.WriteString(arg801)
    if err803 != nil {
      Usage()
      return
    }
    factory804 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt805 := factory804.GetProtocol(mbTrans802)
    argvalue1 := com_types.NewZipkinHeader()
    err806 := argvalue1.Read(jsProt805)
    if err806 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetUserProgramInfoRequest(value0, value1))
    fmt.Print("\n")
    break
  case "rpc_do_get_multiple_user_program_info_request":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RPCDoGetMultipleUserProgramInfoRequest requires 2 args")
      flag.Usage()
    }
    arg807 := flag.Arg(1)
    mbTrans808 := thrift.NewTMemoryBufferLen(len(arg807))
    defer mbTrans808.Close()
    _, err809 := mbTrans808.WriteString(arg807)
    if err809 != nil {
      Usage()
      return
    }
    factory810 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt811 := factory810.GetProtocol(mbTrans808)
    argvalue0 := iuct_service.NewMultiUserProgramReq()
    err812 := argvalue0.Read(jsProt811)
    if err812 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg813 := flag.Arg(2)
    mbTrans814 := thrift.NewTMemoryBufferLen(len(arg813))
    defer mbTrans814.Close()
    _, err815 := mbTrans814.WriteString(arg813)
    if err815 != nil {
      Usage()
      return
    }
    factory816 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt817 := factory816.GetProtocol(mbTrans814)
    argvalue1 := com_types.NewZipkinHeader()
    err818 := argvalue1.Read(jsProt817)
    if err818 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RPCDoGetMultipleUserProgramInfoRequest(value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
