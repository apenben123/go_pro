// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package com_types

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

//媒资资产相关
type ASSET_ID int64

func ASSET_IDPtr(v ASSET_ID) *ASSET_ID { return &v }

type ASSET_RELEVANCE_ID int64

func ASSET_RELEVANCE_IDPtr(v ASSET_RELEVANCE_ID) *ASSET_RELEVANCE_ID { return &v }

type PRG_ID = int64

func PRG_IDPtr(v PRG_ID) *PRG_ID { return &v }

type CHL_ID int64

func CHL_IDPtr(v CHL_ID) *CHL_ID { return &v }

type CHL_NUM int32

func CHL_NUMPtr(v CHL_NUM) *CHL_NUM { return &v }

type SERIES_ID = int64

func SERIES_IDPtr(v SERIES_ID) *SERIES_ID { return &v }

type VIDEO_ID int64

func VIDEO_IDPtr(v VIDEO_ID) *VIDEO_ID { return &v }

type APP_ID int64

func APP_IDPtr(v APP_ID) *APP_ID { return &v }

type EVENT_ID int64

func EVENT_IDPtr(v EVENT_ID) *EVENT_ID { return &v }

type MUSIC_ID int64

func MUSIC_IDPtr(v MUSIC_ID) *MUSIC_ID { return &v }

type SINGER_ID int64

func SINGER_IDPtr(v SINGER_ID) *SINGER_ID { return &v }

type ALBUM_ID int64

func ALBUM_IDPtr(v ALBUM_ID) *ALBUM_ID { return &v }

type NEWS_ID int64

func NEWS_IDPtr(v NEWS_ID) *NEWS_ID { return &v }

type MONITOR_ID int64

func MONITOR_IDPtr(v MONITOR_ID) *MONITOR_ID { return &v }

type MOSAIC_ID int64

func MOSAIC_IDPtr(v MOSAIC_ID) *MOSAIC_ID { return &v }

type MOSAIC_SET_ID int64

func MOSAIC_SET_IDPtr(v MOSAIC_SET_ID) *MOSAIC_SET_ID { return &v }

type DUPLICATE_ID int64

func DUPLICATE_IDPtr(v DUPLICATE_ID) *DUPLICATE_ID { return &v }

type STAR_ID int64

func STAR_IDPtr(v STAR_ID) *STAR_ID { return &v }

type SHOP_ID int64

func SHOP_IDPtr(v SHOP_ID) *SHOP_ID { return &v }

type PROMO_ID int64

func PROMO_IDPtr(v PROMO_ID) *PROMO_ID { return &v }

type PRODUCT_ID int64

func PRODUCT_IDPtr(v PRODUCT_ID) *PRODUCT_ID { return &v }

type TOURISM_ROUTE_ID int64

func TOURISM_ROUTE_IDPtr(v TOURISM_ROUTE_ID) *TOURISM_ROUTE_ID { return &v }

type TOURISM_TICKET_ID int64

func TOURISM_TICKET_IDPtr(v TOURISM_TICKET_ID) *TOURISM_TICKET_ID { return &v }

type TOURISM_HOTEL_ID int64

func TOURISM_HOTEL_IDPtr(v TOURISM_HOTEL_ID) *TOURISM_HOTEL_ID { return &v }

type SUBJECT_ID int64

func SUBJECT_IDPtr(v SUBJECT_ID) *SUBJECT_ID { return &v }

type LIVE_ROOM_ID int64

func LIVE_ROOM_IDPtr(v LIVE_ROOM_ID) *LIVE_ROOM_ID { return &v }

type PLAYLIST_ID int64

func PLAYLIST_IDPtr(v PLAYLIST_ID) *PLAYLIST_ID { return &v }

type PACKAGE_GROUP_ID int64

func PACKAGE_GROUP_IDPtr(v PACKAGE_GROUP_ID) *PACKAGE_GROUP_ID { return &v }

type PACKAGE_ID int64

func PACKAGE_IDPtr(v PACKAGE_ID) *PACKAGE_ID { return &v }

type PRICE_ID int64

func PRICE_IDPtr(v PRICE_ID) *PRICE_ID { return &v }

type GROUP_ID int64

func GROUP_IDPtr(v GROUP_ID) *GROUP_ID { return &v }

//媒资信息相关
type YEAR_ID int32

func YEAR_IDPtr(v YEAR_ID) *YEAR_ID { return &v }

type ACTOR_ID int32

func ACTOR_IDPtr(v ACTOR_ID) *ACTOR_ID { return &v }

type DIRECTOR_ID int32

func DIRECTOR_IDPtr(v DIRECTOR_ID) *DIRECTOR_ID { return &v }

type AGE_ID int32

func AGE_IDPtr(v AGE_ID) *AGE_ID { return &v }

type HEAT_VALUE int32

func HEAT_VALUEPtr(v HEAT_VALUE) *HEAT_VALUE { return &v }

//栏目相关
type PLB_ID int64

func PLB_IDPtr(v PLB_ID) *PLB_ID { return &v }

type TREE_ID int32

func TREE_IDPtr(v TREE_ID) *TREE_ID { return &v }

type MODULE_ID PLB_ID

func MODULE_IDPtr(v MODULE_ID) *MODULE_ID { return &v }

type STRATEGY_ID int32

func STRATEGY_IDPtr(v STRATEGY_ID) *STRATEGY_ID { return &v }

//分类相关
type TYPE_ID int32

func TYPE_IDPtr(v TYPE_ID) *TYPE_ID { return &v }

type CONTENTTYPE_ID int32

func CONTENTTYPE_IDPtr(v CONTENTTYPE_ID) *CONTENTTYPE_ID { return &v }

type SUBTYPE_ID int32

func SUBTYPE_IDPtr(v SUBTYPE_ID) *SUBTYPE_ID { return &v }

type TAG_ID int32

func TAG_IDPtr(v TAG_ID) *TAG_ID { return &v }

type USER_LABEL_ID = int64

func USER_LABEL_IDPtr(v USER_LABEL_ID) *USER_LABEL_ID { return &v }

//平台相关
type PLATFORM_ID int32

func PLATFORM_IDPtr(v PLATFORM_ID) *PLATFORM_ID { return &v }

type SERVER_ID int32

func SERVER_IDPtr(v SERVER_ID) *SERVER_ID { return &v }

//套餐相关
type BUY_ID int64

func BUY_IDPtr(v BUY_ID) *BUY_ID { return &v }

type USER_ID = int64

func USER_IDPtr(v USER_ID) *USER_ID { return &v }

//账号相关
type INTDA USER_ID

func INTDAPtr(v INTDA) *INTDA { return &v }

type INTMEMBER int64

func INTMEMBERPtr(v INTMEMBER) *INTMEMBER { return &v }

type INTHOME int64

func INTHOMEPtr(v INTHOME) *INTHOME { return &v }

type INTADDRESS int64

func INTADDRESSPtr(v INTADDRESS) *INTADDRESS { return &v }

type INTDEVICE int64

func INTDEVICEPtr(v INTDEVICE) *INTDEVICE { return &v }

type INTPAYMENT int64

func INTPAYMENTPtr(v INTPAYMENT) *INTPAYMENT { return &v }

type INTICON int64

func INTICONPtr(v INTICON) *INTICON { return &v }

type INTCOUNTRY int64

func INTCOUNTRYPtr(v INTCOUNTRY) *INTCOUNTRY { return &v }

type INTPROVINCE int64

func INTPROVINCEPtr(v INTPROVINCE) *INTPROVINCE { return &v }

type INTCITY int64

func INTCITYPtr(v INTCITY) *INTCITY { return &v }

type INTAREA int64

func INTAREAPtr(v INTAREA) *INTAREA { return &v }

type AREA_ID INTAREA

func AREA_IDPtr(v AREA_ID) *AREA_ID { return &v }

type INTTOWN int64

func INTTOWNPtr(v INTTOWN) *INTTOWN { return &v }

type INTVILLAGE int64

func INTVILLAGEPtr(v INTVILLAGE) *INTVILLAGE { return &v }

type INTPARENTCODE int64

func INTPARENTCODEPtr(v INTPARENTCODE) *INTPARENTCODE { return &v }

type INTVIRTUALCODE int64

func INTVIRTUALCODEPtr(v INTVIRTUALCODE) *INTVIRTUALCODE { return &v }

type INTRIGHT int64

func INTRIGHTPtr(v INTRIGHT) *INTRIGHT { return &v }

type INTDATARIGHT int64

func INTDATARIGHTPtr(v INTDATARIGHT) *INTDATARIGHT { return &v }

type INTSYSTEM int64

func INTSYSTEMPtr(v INTSYSTEM) *INTSYSTEM { return &v }

type INTDEPARTMENT int64

func INTDEPARTMENTPtr(v INTDEPARTMENT) *INTDEPARTMENT { return &v }

type INTJOB int64

func INTJOBPtr(v INTJOB) *INTJOB { return &v }

type INTID int64

func INTIDPtr(v INTID) *INTID { return &v }

type INTRIGHTPACK int64

func INTRIGHTPACKPtr(v INTRIGHTPACK) *INTRIGHTPACK { return &v }

type INTUSERGROUP int64

func INTUSERGROUPPtr(v INTUSERGROUP) *INTUSERGROUP { return &v }

type INTROLE int64

func INTROLEPtr(v INTROLE) *INTROLE { return &v }

type INTEQUIPMENT int64

func INTEQUIPMENTPtr(v INTEQUIPMENT) *INTEQUIPMENT { return &v }

type INTPORTALGROUP int64

func INTPORTALGROUPPtr(v INTPORTALGROUP) *INTPORTALGROUP { return &v }

type INTPORTALID int64

func INTPORTALIDPtr(v INTPORTALID) *INTPORTALID { return &v }

type INTPORTALPAGEID int64

func INTPORTALPAGEIDPtr(v INTPORTALPAGEID) *INTPORTALPAGEID { return &v }

type INTPORTALMETHODID int64

func INTPORTALMETHODIDPtr(v INTPORTALMETHODID) *INTPORTALMETHODID { return &v }

type INTPORTALCELLID int64

func INTPORTALCELLIDPtr(v INTPORTALCELLID) *INTPORTALCELLID { return &v }

type INTTHEMEID int64

func INTTHEMEIDPtr(v INTTHEMEID) *INTTHEMEID { return &v }

type INTROOM LIVE_ROOM_ID

func INTROOMPtr(v INTROOM) *INTROOM { return &v }

type INTROOMADMIN INTDA

func INTROOMADMINPtr(v INTROOMADMIN) *INTROOMADMIN { return &v }

type INTBLACKLISTID int64

func INTBLACKLISTIDPtr(v INTBLACKLISTID) *INTBLACKLISTID { return &v }

type INTANCHOR INTDA

func INTANCHORPtr(v INTANCHOR) *INTANCHOR { return &v }

type TARGETID INTDA

func TARGETIDPtr(v TARGETID) *TARGETID { return &v }

//内容提供商相关
type INT_PROVIDER_ID int32

func INT_PROVIDER_IDPtr(v INT_PROVIDER_ID) *INT_PROVIDER_ID { return &v }

//EPG自动校正相关
type EPG_SAMPLE_ID int32

func EPG_SAMPLE_IDPtr(v EPG_SAMPLE_ID) *EPG_SAMPLE_ID { return &v }

type EPG_RULE_ID int32

func EPG_RULE_IDPtr(v EPG_RULE_ID) *EPG_RULE_ID { return &v }

type STATICLOGO_ID int32

func STATICLOGO_IDPtr(v STATICLOGO_ID) *STATICLOGO_ID { return &v }

type SERIES_SAMPLE_ID int32

func SERIES_SAMPLE_IDPtr(v SERIES_SAMPLE_ID) *SERIES_SAMPLE_ID { return &v }

type MSG_ID int32

func MSG_IDPtr(v MSG_ID) *MSG_ID { return &v }

//后台业务平台相关
type SYSTEM_ID int32

func SYSTEM_IDPtr(v SYSTEM_ID) *SYSTEM_ID { return &v }

//搜索筛选相关
type SEARCH_FILTER_ID int32

func SEARCH_FILTER_IDPtr(v SEARCH_FILTER_ID) *SEARCH_FILTER_ID { return &v }

type TASK_ID int64

func TASK_IDPtr(v TASK_ID) *TASK_ID { return &v }

type STRATEGY_TYPE int16

func STRATEGY_TYPEPtr(v STRATEGY_TYPE) *STRATEGY_TYPE { return &v }

type PTASK_ID int32

func PTASK_IDPtr(v PTASK_ID) *PTASK_ID { return &v }

type RECORD_ID int64

func RECORD_IDPtr(v RECORD_ID) *RECORD_ID { return &v }

type OtRpcCtx *ZipkinHeader

func OtRpcCtxPtr(v OtRpcCtx) *OtRpcCtx { return &v }

// Attributes:
//  - CSubcmdID
//  - NSrvID
//  - NSN
type ReqHead struct {
	CSubcmdID int8  `thrift:"cSubcmdID,1,required" db:"cSubcmdID" json:"cSubcmdID"`
	NSrvID    int32 `thrift:"nSrvID,2,required" db:"nSrvID" json:"nSrvID"`
	NSN       int64 `thrift:"nSN,3,required" db:"nSN" json:"nSN"`
}

func NewReqHead() *ReqHead {
	return &ReqHead{}
}

func (p *ReqHead) GetCSubcmdID() int8 {
	return p.CSubcmdID
}

func (p *ReqHead) GetNSrvID() int32 {
	return p.NSrvID
}

func (p *ReqHead) GetNSN() int64 {
	return p.NSN
}
func (p *ReqHead) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetCSubcmdID bool = false
	var issetNSrvID bool = false
	var issetNSN bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetCSubcmdID = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetNSrvID = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetNSN = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetCSubcmdID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CSubcmdID is not set"))
	}
	if !issetNSrvID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSrvID is not set"))
	}
	if !issetNSN {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSN is not set"))
	}
	return nil
}

func (p *ReqHead) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.CSubcmdID = temp
	}
	return nil
}

func (p *ReqHead) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NSrvID = v
	}
	return nil
}

func (p *ReqHead) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NSN = v
	}
	return nil
}

func (p *ReqHead) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReqHead"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReqHead) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cSubcmdID", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cSubcmdID: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.CSubcmdID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cSubcmdID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cSubcmdID: ", p), err)
	}
	return err
}

func (p *ReqHead) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nSrvID", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nSrvID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NSrvID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nSrvID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nSrvID: ", p), err)
	}
	return err
}

func (p *ReqHead) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nSN", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nSN: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NSN)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nSN (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nSN: ", p), err)
	}
	return err
}

func (p *ReqHead) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReqHead(%+v)", *p)
}

// Attributes:
//  - CSubcmdID
//  - NSrvID
//  - NSN
type RespHead struct {
	CSubcmdID int8  `thrift:"cSubcmdID,1,required" db:"cSubcmdID" json:"cSubcmdID"`
	NSrvID    int32 `thrift:"nSrvID,2,required" db:"nSrvID" json:"nSrvID"`
	NSN       int64 `thrift:"nSN,3,required" db:"nSN" json:"nSN"`
}

func NewRespHead() *RespHead {
	return &RespHead{}
}

func (p *RespHead) GetCSubcmdID() int8 {
	return p.CSubcmdID
}

func (p *RespHead) GetNSrvID() int32 {
	return p.NSrvID
}

func (p *RespHead) GetNSN() int64 {
	return p.NSN
}
func (p *RespHead) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetCSubcmdID bool = false
	var issetNSrvID bool = false
	var issetNSN bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetCSubcmdID = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetNSrvID = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetNSN = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetCSubcmdID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CSubcmdID is not set"))
	}
	if !issetNSrvID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSrvID is not set"))
	}
	if !issetNSN {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSN is not set"))
	}
	return nil
}

func (p *RespHead) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.CSubcmdID = temp
	}
	return nil
}

func (p *RespHead) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NSrvID = v
	}
	return nil
}

func (p *RespHead) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NSN = v
	}
	return nil
}

func (p *RespHead) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RespHead"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RespHead) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cSubcmdID", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cSubcmdID: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.CSubcmdID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cSubcmdID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cSubcmdID: ", p), err)
	}
	return err
}

func (p *RespHead) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nSrvID", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nSrvID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NSrvID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nSrvID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nSrvID: ", p), err)
	}
	return err
}

func (p *RespHead) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nSN", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nSN: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NSN)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nSN (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nSN: ", p), err)
	}
	return err
}

func (p *RespHead) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RespHead(%+v)", *p)
}

// Attributes:
//  - X_B3_TraceId
//  - X_B3_SpanId
//  - X_B3_ParentSpanId
//  - X_B3_Sampled
//  - X_B3_Flags
type ZipkinHeader struct {
	X_B3_TraceId      string `thrift:"X_B3_TraceId,1,required" db:"X_B3_TraceId" json:"X_B3_TraceId"`
	X_B3_SpanId       string `thrift:"X_B3_SpanId,2,required" db:"X_B3_SpanId" json:"X_B3_SpanId"`
	X_B3_ParentSpanId string `thrift:"X_B3_ParentSpanId,3,required" db:"X_B3_ParentSpanId" json:"X_B3_ParentSpanId"`
	X_B3_Sampled      bool   `thrift:"X_B3_Sampled,4,required" db:"X_B3_Sampled" json:"X_B3_Sampled"`
	X_B3_Flags        string `thrift:"X_B3_Flags,5,required" db:"X_B3_Flags" json:"X_B3_Flags"`
}

func NewZipkinHeader() *ZipkinHeader {
	return &ZipkinHeader{
		X_B3_Sampled: true,
	}
}

func (p *ZipkinHeader) GetX_B3_TraceId() string {
	return p.X_B3_TraceId
}

func (p *ZipkinHeader) GetX_B3_SpanId() string {
	return p.X_B3_SpanId
}

func (p *ZipkinHeader) GetX_B3_ParentSpanId() string {
	return p.X_B3_ParentSpanId
}

func (p *ZipkinHeader) GetX_B3_Sampled() bool {
	return p.X_B3_Sampled
}

func (p *ZipkinHeader) GetX_B3_Flags() string {
	return p.X_B3_Flags
}
func (p *ZipkinHeader) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetX_B3_TraceId bool = false
	var issetX_B3_SpanId bool = false
	var issetX_B3_ParentSpanId bool = false
	var issetX_B3_Sampled bool = false
	var issetX_B3_Flags bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetX_B3_TraceId = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetX_B3_SpanId = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetX_B3_ParentSpanId = true
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
			issetX_B3_Sampled = true
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
			issetX_B3_Flags = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetX_B3_TraceId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field X_B3_TraceId is not set"))
	}
	if !issetX_B3_SpanId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field X_B3_SpanId is not set"))
	}
	if !issetX_B3_ParentSpanId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field X_B3_ParentSpanId is not set"))
	}
	if !issetX_B3_Sampled {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field X_B3_Sampled is not set"))
	}
	if !issetX_B3_Flags {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field X_B3_Flags is not set"))
	}
	return nil
}

func (p *ZipkinHeader) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.X_B3_TraceId = v
	}
	return nil
}

func (p *ZipkinHeader) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.X_B3_SpanId = v
	}
	return nil
}

func (p *ZipkinHeader) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.X_B3_ParentSpanId = v
	}
	return nil
}

func (p *ZipkinHeader) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.X_B3_Sampled = v
	}
	return nil
}

func (p *ZipkinHeader) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.X_B3_Flags = v
	}
	return nil
}

func (p *ZipkinHeader) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ZipkinHeader"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ZipkinHeader) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("X_B3_TraceId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:X_B3_TraceId: ", p), err)
	}
	if err := oprot.WriteString(string(p.X_B3_TraceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.X_B3_TraceId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:X_B3_TraceId: ", p), err)
	}
	return err
}

func (p *ZipkinHeader) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("X_B3_SpanId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:X_B3_SpanId: ", p), err)
	}
	if err := oprot.WriteString(string(p.X_B3_SpanId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.X_B3_SpanId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:X_B3_SpanId: ", p), err)
	}
	return err
}

func (p *ZipkinHeader) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("X_B3_ParentSpanId", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:X_B3_ParentSpanId: ", p), err)
	}
	if err := oprot.WriteString(string(p.X_B3_ParentSpanId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.X_B3_ParentSpanId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:X_B3_ParentSpanId: ", p), err)
	}
	return err
}

func (p *ZipkinHeader) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("X_B3_Sampled", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:X_B3_Sampled: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.X_B3_Sampled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.X_B3_Sampled (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:X_B3_Sampled: ", p), err)
	}
	return err
}

func (p *ZipkinHeader) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("X_B3_Flags", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:X_B3_Flags: ", p), err)
	}
	if err := oprot.WriteString(string(p.X_B3_Flags)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.X_B3_Flags (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:X_B3_Flags: ", p), err)
	}
	return err
}

func (p *ZipkinHeader) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZipkinHeader(%+v)", *p)
}

// Attributes:
//  - MWVersion
//  - MNCmdID
//  - MCSubcmdID
//  - MNUserID
//  - MNSN
//  - MCEncryptType
//  - MNContext1
//  - MNContext2
//  - MNContext3
//  - MNContext4
type BtfHead struct {
	MWVersion     int16 `thrift:"m_wVersion,1,required" db:"m_wVersion" json:"m_wVersion"`
	MNCmdID       int32 `thrift:"m_nCmdID,2,required" db:"m_nCmdID" json:"m_nCmdID"`
	MCSubcmdID    int8  `thrift:"m_cSubcmdID,3,required" db:"m_cSubcmdID" json:"m_cSubcmdID"`
	MNUserID      int64 `thrift:"m_nUserID,4,required" db:"m_nUserID" json:"m_nUserID"`
	MNSN          int64 `thrift:"m_nSN,5,required" db:"m_nSN" json:"m_nSN"`
	MCEncryptType int8  `thrift:"m_cEncryptType,6,required" db:"m_cEncryptType" json:"m_cEncryptType"`
	MNContext1    int64 `thrift:"m_nContext1,7,required" db:"m_nContext1" json:"m_nContext1"`
	MNContext2    int64 `thrift:"m_nContext2,8,required" db:"m_nContext2" json:"m_nContext2"`
	MNContext3    int64 `thrift:"m_nContext3,9,required" db:"m_nContext3" json:"m_nContext3"`
	MNContext4    int64 `thrift:"m_nContext4,10,required" db:"m_nContext4" json:"m_nContext4"`
}

func NewBtfHead() *BtfHead {
	return &BtfHead{}
}

func (p *BtfHead) GetMWVersion() int16 {
	return p.MWVersion
}

func (p *BtfHead) GetMNCmdID() int32 {
	return p.MNCmdID
}

func (p *BtfHead) GetMCSubcmdID() int8 {
	return p.MCSubcmdID
}

func (p *BtfHead) GetMNUserID() int64 {
	return p.MNUserID
}

func (p *BtfHead) GetMNSN() int64 {
	return p.MNSN
}

func (p *BtfHead) GetMCEncryptType() int8 {
	return p.MCEncryptType
}

func (p *BtfHead) GetMNContext1() int64 {
	return p.MNContext1
}

func (p *BtfHead) GetMNContext2() int64 {
	return p.MNContext2
}

func (p *BtfHead) GetMNContext3() int64 {
	return p.MNContext3
}

func (p *BtfHead) GetMNContext4() int64 {
	return p.MNContext4
}
func (p *BtfHead) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMWVersion bool = false
	var issetMNCmdID bool = false
	var issetMCSubcmdID bool = false
	var issetMNUserID bool = false
	var issetMNSN bool = false
	var issetMCEncryptType bool = false
	var issetMNContext1 bool = false
	var issetMNContext2 bool = false
	var issetMNContext3 bool = false
	var issetMNContext4 bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetMWVersion = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetMNCmdID = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetMCSubcmdID = true
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
			issetMNUserID = true
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
			issetMNSN = true
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
			issetMCEncryptType = true
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
			issetMNContext1 = true
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
			issetMNContext2 = true
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
			issetMNContext3 = true
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
			issetMNContext4 = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMWVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MWVersion is not set"))
	}
	if !issetMNCmdID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MNCmdID is not set"))
	}
	if !issetMCSubcmdID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MCSubcmdID is not set"))
	}
	if !issetMNUserID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MNUserID is not set"))
	}
	if !issetMNSN {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MNSN is not set"))
	}
	if !issetMCEncryptType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MCEncryptType is not set"))
	}
	if !issetMNContext1 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MNContext1 is not set"))
	}
	if !issetMNContext2 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MNContext2 is not set"))
	}
	if !issetMNContext3 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MNContext3 is not set"))
	}
	if !issetMNContext4 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MNContext4 is not set"))
	}
	return nil
}

func (p *BtfHead) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MWVersion = v
	}
	return nil
}

func (p *BtfHead) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MNCmdID = v
	}
	return nil
}

func (p *BtfHead) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.MCSubcmdID = temp
	}
	return nil
}

func (p *BtfHead) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MNUserID = v
	}
	return nil
}

func (p *BtfHead) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.MNSN = v
	}
	return nil
}

func (p *BtfHead) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.MCEncryptType = temp
	}
	return nil
}

func (p *BtfHead) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.MNContext1 = v
	}
	return nil
}

func (p *BtfHead) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.MNContext2 = v
	}
	return nil
}

func (p *BtfHead) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.MNContext3 = v
	}
	return nil
}

func (p *BtfHead) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.MNContext4 = v
	}
	return nil
}

func (p *BtfHead) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BtfHead"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BtfHead) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_wVersion", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:m_wVersion: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.MWVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_wVersion (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:m_wVersion: ", p), err)
	}
	return err
}

func (p *BtfHead) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_nCmdID", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:m_nCmdID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MNCmdID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_nCmdID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:m_nCmdID: ", p), err)
	}
	return err
}

func (p *BtfHead) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_cSubcmdID", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:m_cSubcmdID: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.MCSubcmdID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_cSubcmdID (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:m_cSubcmdID: ", p), err)
	}
	return err
}

func (p *BtfHead) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_nUserID", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:m_nUserID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MNUserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_nUserID (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:m_nUserID: ", p), err)
	}
	return err
}

func (p *BtfHead) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_nSN", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:m_nSN: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MNSN)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_nSN (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:m_nSN: ", p), err)
	}
	return err
}

func (p *BtfHead) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_cEncryptType", thrift.BYTE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:m_cEncryptType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.MCEncryptType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_cEncryptType (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:m_cEncryptType: ", p), err)
	}
	return err
}

func (p *BtfHead) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_nContext1", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:m_nContext1: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MNContext1)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_nContext1 (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:m_nContext1: ", p), err)
	}
	return err
}

func (p *BtfHead) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_nContext2", thrift.I64, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:m_nContext2: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MNContext2)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_nContext2 (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:m_nContext2: ", p), err)
	}
	return err
}

func (p *BtfHead) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_nContext3", thrift.I64, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:m_nContext3: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MNContext3)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_nContext3 (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:m_nContext3: ", p), err)
	}
	return err
}

func (p *BtfHead) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("m_nContext4", thrift.I64, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:m_nContext4: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MNContext4)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_nContext4 (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:m_nContext4: ", p), err)
	}
	return err
}

func (p *BtfHead) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BtfHead(%+v)", *p)
}
