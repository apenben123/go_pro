// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package iuct_types

import (
  "bytes"
  "fmt"
  "git.apache.org/thrift.git/lib/go/thrift"
  "test/gothrift/com_types"
  "test/gothrift/rdspkg_base"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = com_types.GoUnusedProtection__
var _ = rdspkg_base.GoUnusedProtection__

// ************************************************
// 	用户评分数据结构
// 	i64			评分id
// 	userID			用户DA
// 	dataID			节目id
// 	score			评分
// 	timestamp		生成时间
// 	updateTime		修改时间
// *************************************************
// 
// Attributes:
//  - NId
//  - UserID
//  - DataID
//  - Score
//  - Timestamp
//  - UpdateTime
type USER_SCORE struct {
  NId        int64            `thrift:"nId,1,required" db:"nId" json:"nId"`
  UserID     com_types.INTDA  `thrift:"userID,2,required" db:"userID" json:"userID"`
  DataID     com_types.PRG_ID `thrift:"dataID,3,required" db:"dataID" json:"dataID"`
  Score      int32            `thrift:"score,4,required" db:"score" json:"score"`
  Timestamp  int64            `thrift:"timestamp,5,required" db:"timestamp" json:"timestamp"`
  UpdateTime int64            `thrift:"updateTime,6,required" db:"updateTime" json:"updateTime"`
}

func NewUSER_SCORE() *USER_SCORE {
  return &USER_SCORE{}
}

func (p *USER_SCORE) GetNId() int64 {
  return p.NId
}

func (p *USER_SCORE) GetUserID() com_types.INTDA {
  return p.UserID
}

func (p *USER_SCORE) GetDataID() com_types.PRG_ID {
  return p.DataID
}

func (p *USER_SCORE) GetScore() int32 {
  return p.Score
}

func (p *USER_SCORE) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *USER_SCORE) GetUpdateTime() int64 {
  return p.UpdateTime
}
func (p *USER_SCORE) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNId bool = false
  var issetUserID bool = false
  var issetDataID bool = false
  var issetScore bool = false
  var issetTimestamp bool = false
  var issetUpdateTime bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNId = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetUserID = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetDataID = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetScore = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetTimestamp = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetUpdateTime = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NId is not set"))
  }
  if !issetUserID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
  }
  if !issetDataID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataID is not set"))
  }
  if !issetScore {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Score is not set"))
  }
  if !issetTimestamp {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Timestamp is not set"))
  }
  if !issetUpdateTime {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UpdateTime is not set"))
  }
  return nil
}

func (p *USER_SCORE) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.NId = v
  }
  return nil
}

func (p *USER_SCORE) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := com_types.INTDA(v)
    p.UserID = temp
  }
  return nil
}

func (p *USER_SCORE) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := com_types.PRG_ID(v)
    p.DataID = temp
  }
  return nil
}

func (p *USER_SCORE) ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.Score = v
  }
  return nil
}

func (p *USER_SCORE) ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.Timestamp = v
  }
  return nil
}

func (p *USER_SCORE) ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.UpdateTime = v
  }
  return nil
}

func (p *USER_SCORE) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("USER_SCORE"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
    if err := p.writeField4(oprot); err != nil {
      return err
    }
    if err := p.writeField5(oprot); err != nil {
      return err
    }
    if err := p.writeField6(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *USER_SCORE) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nId (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nId: ", p), err)
  }
  return err
}

func (p *USER_SCORE) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userID: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userID (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userID: ", p), err)
  }
  return err
}

func (p *USER_SCORE) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataID", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dataID: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.DataID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.dataID (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dataID: ", p), err)
  }
  return err
}

func (p *USER_SCORE) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("score", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:score: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.Score)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.score (4) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:score: ", p), err)
  }
  return err
}

func (p *USER_SCORE) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:timestamp: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (5) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:timestamp: ", p), err)
  }
  return err
}

func (p *USER_SCORE) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:updateTime: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updateTime (6) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:updateTime: ", p), err)
  }
  return err
}

func (p *USER_SCORE) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("USER_SCORE(%+v)", *p)
}

// ************************************************
// 	用户收藏/关注/追剧数据结构
// 	i64			收藏/关注/追剧id
// 	unUserId		用户DA
// 	unFavoriteId		节目id
// 	unFunction		操作类型(0:收藏,1:关注,2:追剧)
// 	timestamp		生成时间
// 	updateTime		修改时间
// *************************************************
// 
// Attributes:
//  - NId
//  - UnUserId
//  - UnFavoriteId
//  - UnFunction
//  - Timestamp
//  - UpdateTime
type USER_FAVORITE struct {
  NId          int64            `thrift:"nId,1,required" db:"nId" json:"nId"`
  UnUserId     com_types.INTDA  `thrift:"unUserId,2,required" db:"unUserId" json:"unUserId"`
  UnFavoriteId com_types.PRG_ID `thrift:"unFavoriteId,3,required" db:"unFavoriteId" json:"unFavoriteId"`
  UnFunction   int32            `thrift:"unFunction,4,required" db:"unFunction" json:"unFunction"`
  Timestamp    int64            `thrift:"timestamp,5,required" db:"timestamp" json:"timestamp"`
  UpdateTime   int64            `thrift:"updateTime,6,required" db:"updateTime" json:"updateTime"`
}

func NewUSER_FAVORITE() *USER_FAVORITE {
  return &USER_FAVORITE{}
}

func (p *USER_FAVORITE) GetNId() int64 {
  return p.NId
}

func (p *USER_FAVORITE) GetUnUserId() com_types.INTDA {
  return p.UnUserId
}

func (p *USER_FAVORITE) GetUnFavoriteId() com_types.PRG_ID {
  return p.UnFavoriteId
}

func (p *USER_FAVORITE) GetUnFunction() int32 {
  return p.UnFunction
}

func (p *USER_FAVORITE) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *USER_FAVORITE) GetUpdateTime() int64 {
  return p.UpdateTime
}
func (p *USER_FAVORITE) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNId bool = false
  var issetUnUserId bool = false
  var issetUnFavoriteId bool = false
  var issetUnFunction bool = false
  var issetTimestamp bool = false
  var issetUpdateTime bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNId = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetUnUserId = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetUnFavoriteId = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetUnFunction = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetTimestamp = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetUpdateTime = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NId is not set"))
  }
  if !issetUnUserId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UnUserId is not set"))
  }
  if !issetUnFavoriteId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UnFavoriteId is not set"))
  }
  if !issetUnFunction {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UnFunction is not set"))
  }
  if !issetTimestamp {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Timestamp is not set"))
  }
  if !issetUpdateTime {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UpdateTime is not set"))
  }
  return nil
}

func (p *USER_FAVORITE) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.NId = v
  }
  return nil
}

func (p *USER_FAVORITE) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := com_types.INTDA(v)
    p.UnUserId = temp
  }
  return nil
}

func (p *USER_FAVORITE) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := com_types.PRG_ID(v)
    p.UnFavoriteId = temp
  }
  return nil
}

func (p *USER_FAVORITE) ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.UnFunction = v
  }
  return nil
}

func (p *USER_FAVORITE) ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.Timestamp = v
  }
  return nil
}

func (p *USER_FAVORITE) ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.UpdateTime = v
  }
  return nil
}

func (p *USER_FAVORITE) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("USER_FAVORITE"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
    if err := p.writeField4(oprot); err != nil {
      return err
    }
    if err := p.writeField5(oprot); err != nil {
      return err
    }
    if err := p.writeField6(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *USER_FAVORITE) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nId (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nId: ", p), err)
  }
  return err
}

func (p *USER_FAVORITE) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unUserId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:unUserId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.UnUserId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.unUserId (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:unUserId: ", p), err)
  }
  return err
}

func (p *USER_FAVORITE) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unFavoriteId", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:unFavoriteId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.UnFavoriteId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.unFavoriteId (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:unFavoriteId: ", p), err)
  }
  return err
}

func (p *USER_FAVORITE) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unFunction", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:unFunction: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.UnFunction)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.unFunction (4) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:unFunction: ", p), err)
  }
  return err
}

func (p *USER_FAVORITE) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:timestamp: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (5) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:timestamp: ", p), err)
  }
  return err
}

func (p *USER_FAVORITE) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:updateTime: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updateTime (6) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:updateTime: ", p), err)
  }
  return err
}

func (p *USER_FAVORITE) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("USER_FAVORITE(%+v)", *p)
}

// ************************************************
// 	用户设置数据结构
// 	unDataId		设置类型
// 	unUserId		用户DA
// 	unDataValue		设置数据
// 	updateTime		修改时间
// *************************************************
// 
// Attributes:
//  - UnDataId
//  - UnUserId
//  - UnDataValue
//  - UpdateTime
type USER_SETTING struct {
  UnDataId    int32           `thrift:"unDataId,1,required" db:"unDataId" json:"unDataId"`
  UnUserId    com_types.INTDA `thrift:"unUserId,2,required" db:"unUserId" json:"unUserId"`
  UnDataValue string          `thrift:"unDataValue,3,required" db:"unDataValue" json:"unDataValue"`
  UpdateTime  int64           `thrift:"updateTime,4,required" db:"updateTime" json:"updateTime"`
}

func NewUSER_SETTING() *USER_SETTING {
  return &USER_SETTING{}
}

func (p *USER_SETTING) GetUnDataId() int32 {
  return p.UnDataId
}

func (p *USER_SETTING) GetUnUserId() com_types.INTDA {
  return p.UnUserId
}

func (p *USER_SETTING) GetUnDataValue() string {
  return p.UnDataValue
}

func (p *USER_SETTING) GetUpdateTime() int64 {
  return p.UpdateTime
}
func (p *USER_SETTING) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUnDataId bool = false
  var issetUnUserId bool = false
  var issetUnDataValue bool = false
  var issetUpdateTime bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetUnDataId = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetUnUserId = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetUnDataValue = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetUpdateTime = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUnDataId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UnDataId is not set"))
  }
  if !issetUnUserId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UnUserId is not set"))
  }
  if !issetUnDataValue {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UnDataValue is not set"))
  }
  if !issetUpdateTime {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UpdateTime is not set"))
  }
  return nil
}

func (p *USER_SETTING) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.UnDataId = v
  }
  return nil
}

func (p *USER_SETTING) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := com_types.INTDA(v)
    p.UnUserId = temp
  }
  return nil
}

func (p *USER_SETTING) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.UnDataValue = v
  }
  return nil
}

func (p *USER_SETTING) ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.UpdateTime = v
  }
  return nil
}

func (p *USER_SETTING) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("USER_SETTING"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
    if err := p.writeField4(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *USER_SETTING) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unDataId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:unDataId: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.UnDataId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.unDataId (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:unDataId: ", p), err)
  }
  return err
}

func (p *USER_SETTING) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unUserId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:unUserId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.UnUserId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.unUserId (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:unUserId: ", p), err)
  }
  return err
}

func (p *USER_SETTING) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unDataValue", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:unDataValue: ", p), err)
  }
  if err := oprot.WriteString(string(p.UnDataValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.unDataValue (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:unDataValue: ", p), err)
  }
  return err
}

func (p *USER_SETTING) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateTime", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:updateTime: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updateTime (4) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:updateTime: ", p), err)
  }
  return err
}

func (p *USER_SETTING) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("USER_SETTING(%+v)", *p)
}

// ************************************************
// 	用户画像数据结构
// 	nDA			用户DA
// 	nTypeId			画像类型(按天/月/季度/年生成用户画像)
// 	strData			用户画像数据
// 	updateTime		生成时间
// *************************************************
// 
// Attributes:
//  - NDA
//  - NTypeId
//  - StrData
//  - UpdateTime
type USER_PROFILE struct {
  NDA        com_types.INTDA `thrift:"nDA,1,required" db:"nDA" json:"nDA"`
  NTypeId    int16           `thrift:"nTypeId,2,required" db:"nTypeId" json:"nTypeId"`
  StrData    string          `thrift:"strData,3,required" db:"strData" json:"strData"`
  UpdateTime int64           `thrift:"updateTime,4,required" db:"updateTime" json:"updateTime"`
}

func NewUSER_PROFILE() *USER_PROFILE {
  return &USER_PROFILE{}
}

func (p *USER_PROFILE) GetNDA() com_types.INTDA {
  return p.NDA
}

func (p *USER_PROFILE) GetNTypeId() int16 {
  return p.NTypeId
}

func (p *USER_PROFILE) GetStrData() string {
  return p.StrData
}

func (p *USER_PROFILE) GetUpdateTime() int64 {
  return p.UpdateTime
}
func (p *USER_PROFILE) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNDA bool = false
  var issetNTypeId bool = false
  var issetStrData bool = false
  var issetUpdateTime bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNDA = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNTypeId = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetStrData = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetUpdateTime = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNDA {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NDA is not set"))
  }
  if !issetNTypeId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NTypeId is not set"))
  }
  if !issetStrData {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StrData is not set"))
  }
  if !issetUpdateTime {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UpdateTime is not set"))
  }
  return nil
}

func (p *USER_PROFILE) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := com_types.INTDA(v)
    p.NDA = temp
  }
  return nil
}

func (p *USER_PROFILE) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.NTypeId = v
  }
  return nil
}

func (p *USER_PROFILE) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.StrData = v
  }
  return nil
}

func (p *USER_PROFILE) ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.UpdateTime = v
  }
  return nil
}

func (p *USER_PROFILE) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("USER_PROFILE"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
    if err := p.writeField4(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *USER_PROFILE) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nDA", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nDA: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NDA)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nDA (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nDA: ", p), err)
  }
  return err
}

func (p *USER_PROFILE) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nTypeId", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nTypeId: ", p), err)
  }
  if err := oprot.WriteI16(int16(p.NTypeId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nTypeId (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nTypeId: ", p), err)
  }
  return err
}

func (p *USER_PROFILE) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("strData", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:strData: ", p), err)
  }
  if err := oprot.WriteString(string(p.StrData)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.strData (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:strData: ", p), err)
  }
  return err
}

func (p *USER_PROFILE) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateTime", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:updateTime: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updateTime (4) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:updateTime: ", p), err)
  }
  return err
}

func (p *USER_PROFILE) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("USER_PROFILE(%+v)", *p)
}

// ************************************************
// 	用户设置数据结构
// 	program_id		节目id
// 	hits			点击次数
// 	updateTime		更新时间
// *************************************************
// 
// Attributes:
//  - ProgramID
//  - Hits
//  - UpdateTime
type PROGRAM_HITS struct {
  ProgramID com_types.PRG_ID `thrift:"program_id,1,required" db:"program_id" json:"program_id"`
  Hits      int32            `thrift:"hits,2,required" db:"hits" json:"hits"`
  // unused field # 3
  UpdateTime int64 `thrift:"updateTime,4,required" db:"updateTime" json:"updateTime"`
}

func NewPROGRAM_HITS() *PROGRAM_HITS {
  return &PROGRAM_HITS{}
}

func (p *PROGRAM_HITS) GetProgramID() com_types.PRG_ID {
  return p.ProgramID
}

func (p *PROGRAM_HITS) GetHits() int32 {
  return p.Hits
}

func (p *PROGRAM_HITS) GetUpdateTime() int64 {
  return p.UpdateTime
}
func (p *PROGRAM_HITS) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProgramID bool = false
  var issetHits bool = false
  var issetUpdateTime bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetProgramID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetHits = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetUpdateTime = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProgramID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProgramID is not set"))
  }
  if !issetHits {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Hits is not set"))
  }
  if !issetUpdateTime {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UpdateTime is not set"))
  }
  return nil
}

func (p *PROGRAM_HITS) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := com_types.PRG_ID(v)
    p.ProgramID = temp
  }
  return nil
}

func (p *PROGRAM_HITS) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Hits = v
  }
  return nil
}

func (p *PROGRAM_HITS) ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.UpdateTime = v
  }
  return nil
}

func (p *PROGRAM_HITS) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PROGRAM_HITS"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField4(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *PROGRAM_HITS) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("program_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:program_id: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.ProgramID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.program_id (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:program_id: ", p), err)
  }
  return err
}

func (p *PROGRAM_HITS) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hits", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hits: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.Hits)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hits (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hits: ", p), err)
  }
  return err
}

func (p *PROGRAM_HITS) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateTime", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:updateTime: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updateTime (4) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:updateTime: ", p), err)
  }
  return err
}

func (p *PROGRAM_HITS) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PROGRAM_HITS(%+v)", *p)
}

// ************************************************
// 	用户关机频道数据结构
// 	nId			关机频道id
// 	userID			点击次数
// 	deviceTypeID		设备类型(机顶盒,手机,pad)
// 	channelID		频道id
// 	last_time		时间
// 	updateTime		更新时间
// *************************************************
// 
// Attributes:
//  - NId
//  - UserID
//  - DeviceTypeID
//  - ChannelID
//  - LastTime
//  - UpdateTime
type WATCHING_CHANNEL struct {
  NId          int64            `thrift:"nId,1,required" db:"nId" json:"nId"`
  UserID       com_types.INTDA  `thrift:"userID,2,required" db:"userID" json:"userID"`
  DeviceTypeID int32            `thrift:"deviceTypeID,3,required" db:"deviceTypeID" json:"deviceTypeID"`
  ChannelID    com_types.CHL_ID `thrift:"channelID,4,required" db:"channelID" json:"channelID"`
  LastTime     int64            `thrift:"last_time,5,required" db:"last_time" json:"last_time"`
  UpdateTime   int64            `thrift:"updateTime,6,required" db:"updateTime" json:"updateTime"`
}

func NewWATCHING_CHANNEL() *WATCHING_CHANNEL {
  return &WATCHING_CHANNEL{}
}

func (p *WATCHING_CHANNEL) GetNId() int64 {
  return p.NId
}

func (p *WATCHING_CHANNEL) GetUserID() com_types.INTDA {
  return p.UserID
}

func (p *WATCHING_CHANNEL) GetDeviceTypeID() int32 {
  return p.DeviceTypeID
}

func (p *WATCHING_CHANNEL) GetChannelID() com_types.CHL_ID {
  return p.ChannelID
}

func (p *WATCHING_CHANNEL) GetLastTime() int64 {
  return p.LastTime
}

func (p *WATCHING_CHANNEL) GetUpdateTime() int64 {
  return p.UpdateTime
}
func (p *WATCHING_CHANNEL) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNId bool = false
  var issetUserID bool = false
  var issetDeviceTypeID bool = false
  var issetChannelID bool = false
  var issetLastTime bool = false
  var issetUpdateTime bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNId = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetUserID = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetDeviceTypeID = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetChannelID = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetLastTime = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetUpdateTime = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NId is not set"))
  }
  if !issetUserID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
  }
  if !issetDeviceTypeID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DeviceTypeID is not set"))
  }
  if !issetChannelID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ChannelID is not set"))
  }
  if !issetLastTime {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LastTime is not set"))
  }
  if !issetUpdateTime {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UpdateTime is not set"))
  }
  return nil
}

func (p *WATCHING_CHANNEL) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.NId = v
  }
  return nil
}

func (p *WATCHING_CHANNEL) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := com_types.INTDA(v)
    p.UserID = temp
  }
  return nil
}

func (p *WATCHING_CHANNEL) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.DeviceTypeID = v
  }
  return nil
}

func (p *WATCHING_CHANNEL) ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    temp := com_types.CHL_ID(v)
    p.ChannelID = temp
  }
  return nil
}

func (p *WATCHING_CHANNEL) ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.LastTime = v
  }
  return nil
}

func (p *WATCHING_CHANNEL) ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.UpdateTime = v
  }
  return nil
}

func (p *WATCHING_CHANNEL) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WATCHING_CHANNEL"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
    if err := p.writeField4(oprot); err != nil {
      return err
    }
    if err := p.writeField5(oprot); err != nil {
      return err
    }
    if err := p.writeField6(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *WATCHING_CHANNEL) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nId (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nId: ", p), err)
  }
  return err
}

func (p *WATCHING_CHANNEL) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userID: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userID (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userID: ", p), err)
  }
  return err
}

func (p *WATCHING_CHANNEL) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deviceTypeID", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:deviceTypeID: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.DeviceTypeID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.deviceTypeID (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:deviceTypeID: ", p), err)
  }
  return err
}

func (p *WATCHING_CHANNEL) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("channelID", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:channelID: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.ChannelID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.channelID (4) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:channelID: ", p), err)
  }
  return err
}

func (p *WATCHING_CHANNEL) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("last_time", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:last_time: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.LastTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.last_time (5) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:last_time: ", p), err)
  }
  return err
}

func (p *WATCHING_CHANNEL) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:updateTime: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updateTime (6) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:updateTime: ", p), err)
  }
  return err
}

func (p *WATCHING_CHANNEL) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WATCHING_CHANNEL(%+v)", *p)
}

// ************************************************
// 	用户点击数据结构
// 	nId			用户点击id
// 	nPid			点击次数
// *************************************************
// 
// Attributes:
//  - NId
//  - NPid
type HITS_SIMPLE struct {
  NId  int64            `thrift:"nId,1,required" db:"nId" json:"nId"`
  NPid com_types.PRG_ID `thrift:"nPid,2,required" db:"nPid" json:"nPid"`
}

func NewHITS_SIMPLE() *HITS_SIMPLE {
  return &HITS_SIMPLE{}
}

func (p *HITS_SIMPLE) GetNId() int64 {
  return p.NId
}

func (p *HITS_SIMPLE) GetNPid() com_types.PRG_ID {
  return p.NPid
}
func (p *HITS_SIMPLE) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNId bool = false
  var issetNPid bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNId = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNPid = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NId is not set"))
  }
  if !issetNPid {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NPid is not set"))
  }
  return nil
}

func (p *HITS_SIMPLE) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.NId = v
  }
  return nil
}

func (p *HITS_SIMPLE) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := com_types.PRG_ID(v)
    p.NPid = temp
  }
  return nil
}

func (p *HITS_SIMPLE) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HITS_SIMPLE"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *HITS_SIMPLE) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nId (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nId: ", p), err)
  }
  return err
}

func (p *HITS_SIMPLE) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nPid", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nPid: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NPid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nPid (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nPid: ", p), err)
  }
  return err
}

func (p *HITS_SIMPLE) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HITS_SIMPLE(%+v)", *p)
}

// ************************************************
// 	用户点击redis存储数据结构
// 	sHits			用户点击剧集中的单集列表
// 	nLastHitPid		上次点击节目id
// 	tLastHitTime		上次点击时间
// *************************************************
// 
// Attributes:
//  - SHits
//  - NLastHitPid
//  - TLastHitTime
type USER_HITS_RDS struct {
  SHits        map[*HITS_SIMPLE]struct{} `thrift:"sHits,1,required" db:"sHits" json:"sHits"`
  NLastHitPid  com_types.PRG_ID          `thrift:"nLastHitPid,2,required" db:"nLastHitPid" json:"nLastHitPid"`
  TLastHitTime int64                     `thrift:"tLastHitTime,3,required" db:"tLastHitTime" json:"tLastHitTime"`
}

func NewUSER_HITS_RDS() *USER_HITS_RDS {
  return &USER_HITS_RDS{}
}

func (p *USER_HITS_RDS) GetSHits() map[*HITS_SIMPLE]struct{} {
  return p.SHits
}

func (p *USER_HITS_RDS) GetNLastHitPid() com_types.PRG_ID {
  return p.NLastHitPid
}

func (p *USER_HITS_RDS) GetTLastHitTime() int64 {
  return p.TLastHitTime
}
func (p *USER_HITS_RDS) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSHits bool = false
  var issetNLastHitPid bool = false
  var issetTLastHitTime bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetSHits = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNLastHitPid = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetTLastHitTime = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSHits {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SHits is not set"))
  }
  if !issetNLastHitPid {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NLastHitPid is not set"))
  }
  if !issetTLastHitTime {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TLastHitTime is not set"))
  }
  return nil
}

func (p *USER_HITS_RDS) ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make(map[*HITS_SIMPLE]struct{}, size)
  p.SHits = tSet
  for i := 0; i < size; i++ {
    _elem0 := &HITS_SIMPLE{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.SHits[_elem0] = struct{}{}
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *USER_HITS_RDS) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := com_types.PRG_ID(v)
    p.NLastHitPid = temp
  }
  return nil
}

func (p *USER_HITS_RDS) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.TLastHitTime = v
  }
  return nil
}

func (p *USER_HITS_RDS) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("USER_HITS_RDS"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *USER_HITS_RDS) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sHits", thrift.SET, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sHits: ", p), err)
  }
  if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.SHits)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for v, _ := range p.SHits {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sHits: ", p), err)
  }
  return err
}

func (p *USER_HITS_RDS) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nLastHitPid", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nLastHitPid: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NLastHitPid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nLastHitPid (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nLastHitPid: ", p), err)
  }
  return err
}

func (p *USER_HITS_RDS) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tLastHitTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tLastHitTime: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.TLastHitTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tLastHitTime (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tLastHitTime: ", p), err)
  }
  return err
}

func (p *USER_HITS_RDS) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("USER_HITS_RDS(%+v)", *p)
}

// ************************************************
// 	用户历史redis存储数据结构
// 	nPid			节目或应用ID
// 	nSid			节目剧集id, 没有剧集id的就取值和节目id一致
// 	nOffset			用户观看时长
// 	tTimestamp		观看时间
// 	strSp			服务提供商
// *************************************************
// 
// Attributes:
//  - NPid
//  - NSid
//  - NOffset
//  - TTimestamp
//  - StrSp
type HISTORY_RDS struct {
  NPid       com_types.PRG_ID    `thrift:"nPid,1,required" db:"nPid" json:"nPid"`
  NSid       com_types.SERIES_ID `thrift:"nSid,2,required" db:"nSid" json:"nSid"`
  NOffset    int32               `thrift:"nOffset,3,required" db:"nOffset" json:"nOffset"`
  TTimestamp int64               `thrift:"tTimestamp,4,required" db:"tTimestamp" json:"tTimestamp"`
  StrSp      string              `thrift:"strSp,5,required" db:"strSp" json:"strSp"`
}

func NewHISTORY_RDS() *HISTORY_RDS {
  return &HISTORY_RDS{}
}

func (p *HISTORY_RDS) GetNPid() com_types.PRG_ID {
  return p.NPid
}

func (p *HISTORY_RDS) GetNSid() com_types.SERIES_ID {
  return p.NSid
}

func (p *HISTORY_RDS) GetNOffset() int32 {
  return p.NOffset
}

func (p *HISTORY_RDS) GetTTimestamp() int64 {
  return p.TTimestamp
}

func (p *HISTORY_RDS) GetStrSp() string {
  return p.StrSp
}
func (p *HISTORY_RDS) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNPid bool = false
  var issetNSid bool = false
  var issetNOffset bool = false
  var issetTTimestamp bool = false
  var issetStrSp bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNPid = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNSid = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetNOffset = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetTTimestamp = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetStrSp = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNPid {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NPid is not set"))
  }
  if !issetNSid {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSid is not set"))
  }
  if !issetNOffset {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NOffset is not set"))
  }
  if !issetTTimestamp {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TTimestamp is not set"))
  }
  if !issetStrSp {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StrSp is not set"))
  }
  return nil
}

func (p *HISTORY_RDS) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := com_types.PRG_ID(v)
    p.NPid = temp
  }
  return nil
}

func (p *HISTORY_RDS) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := com_types.SERIES_ID(v)
    p.NSid = temp
  }
  return nil
}

func (p *HISTORY_RDS) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.NOffset = v
  }
  return nil
}

func (p *HISTORY_RDS) ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.TTimestamp = v
  }
  return nil
}

func (p *HISTORY_RDS) ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.StrSp = v
  }
  return nil
}

func (p *HISTORY_RDS) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HISTORY_RDS"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
    if err := p.writeField4(oprot); err != nil {
      return err
    }
    if err := p.writeField5(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *HISTORY_RDS) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nPid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nPid: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NPid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nPid (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nPid: ", p), err)
  }
  return err
}

func (p *HISTORY_RDS) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nSid", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nSid: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NSid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nSid (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nSid: ", p), err)
  }
  return err
}

func (p *HISTORY_RDS) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nOffset", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nOffset: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NOffset)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nOffset (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nOffset: ", p), err)
  }
  return err
}

func (p *HISTORY_RDS) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tTimestamp", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tTimestamp: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.TTimestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tTimestamp (4) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tTimestamp: ", p), err)
  }
  return err
}

func (p *HISTORY_RDS) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("strSp", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:strSp: ", p), err)
  }
  if err := oprot.WriteString(string(p.StrSp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.strSp (5) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:strSp: ", p), err)
  }
  return err
}

func (p *HISTORY_RDS) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HISTORY_RDS(%+v)", *p)
}

// ************************************************
// 	用户历史数据结构
// 	nId			历史数据id
// 	userID			用户ID
// 	nPid			节目或应用ID
// 	nSid			节目剧集id, 没有剧集id的就取值和节目id一致
// 	nOffset			用户观看时长
// 	tTimestamp		观看时间
// 	strSp			服务提供商
// *************************************************
// 
// Attributes:
//  - NId
//  - UserID
//  - DataID
//  - NSid
//  - Offset
//  - Timestamp
//  - StrSp
type USER_HISTORY struct {
  NId       int64               `thrift:"nId,1,required" db:"nId" json:"nId"`
  UserID    com_types.INTDA     `thrift:"userID,2,required" db:"userID" json:"userID"`
  DataID    com_types.PRG_ID    `thrift:"dataID,3,required" db:"dataID" json:"dataID"`
  NSid      com_types.SERIES_ID `thrift:"nSid,4,required" db:"nSid" json:"nSid"`
  Offset    int32               `thrift:"offset,5,required" db:"offset" json:"offset"`
  Timestamp int64               `thrift:"timestamp,6,required" db:"timestamp" json:"timestamp"`
  StrSp     string              `thrift:"strSp,7,required" db:"strSp" json:"strSp"`
}

func NewUSER_HISTORY() *USER_HISTORY {
  return &USER_HISTORY{}
}

func (p *USER_HISTORY) GetNId() int64 {
  return p.NId
}

func (p *USER_HISTORY) GetUserID() com_types.INTDA {
  return p.UserID
}

func (p *USER_HISTORY) GetDataID() com_types.PRG_ID {
  return p.DataID
}

func (p *USER_HISTORY) GetNSid() com_types.SERIES_ID {
  return p.NSid
}

func (p *USER_HISTORY) GetOffset() int32 {
  return p.Offset
}

func (p *USER_HISTORY) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *USER_HISTORY) GetStrSp() string {
  return p.StrSp
}
func (p *USER_HISTORY) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNId bool = false
  var issetUserID bool = false
  var issetDataID bool = false
  var issetNSid bool = false
  var issetOffset bool = false
  var issetTimestamp bool = false
  var issetStrSp bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNId = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetUserID = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetDataID = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetNSid = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetOffset = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetTimestamp = true
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
      issetStrSp = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NId is not set"))
  }
  if !issetUserID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
  }
  if !issetDataID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataID is not set"))
  }
  if !issetNSid {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSid is not set"))
  }
  if !issetOffset {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Offset is not set"))
  }
  if !issetTimestamp {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Timestamp is not set"))
  }
  if !issetStrSp {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StrSp is not set"))
  }
  return nil
}

func (p *USER_HISTORY) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.NId = v
  }
  return nil
}

func (p *USER_HISTORY) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := com_types.INTDA(v)
    p.UserID = temp
  }
  return nil
}

func (p *USER_HISTORY) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := com_types.PRG_ID(v)
    p.DataID = temp
  }
  return nil
}

func (p *USER_HISTORY) ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    temp := com_types.SERIES_ID(v)
    p.NSid = temp
  }
  return nil
}

func (p *USER_HISTORY) ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.Offset = v
  }
  return nil
}

func (p *USER_HISTORY) ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.Timestamp = v
  }
  return nil
}

func (p *USER_HISTORY) ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    p.StrSp = v
  }
  return nil
}

func (p *USER_HISTORY) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("USER_HISTORY"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
    if err := p.writeField4(oprot); err != nil {
      return err
    }
    if err := p.writeField5(oprot); err != nil {
      return err
    }
    if err := p.writeField6(oprot); err != nil {
      return err
    }
    if err := p.writeField7(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *USER_HISTORY) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nId (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nId: ", p), err)
  }
  return err
}

func (p *USER_HISTORY) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userID: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userID (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userID: ", p), err)
  }
  return err
}

func (p *USER_HISTORY) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataID", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dataID: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.DataID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.dataID (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dataID: ", p), err)
  }
  return err
}

func (p *USER_HISTORY) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nSid", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nSid: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NSid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nSid (4) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nSid: ", p), err)
  }
  return err
}

func (p *USER_HISTORY) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("offset", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:offset: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.Offset)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.offset (5) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:offset: ", p), err)
  }
  return err
}

func (p *USER_HISTORY) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:timestamp: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (6) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:timestamp: ", p), err)
  }
  return err
}

func (p *USER_HISTORY) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("strSp", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:strSp: ", p), err)
  }
  if err := oprot.WriteString(string(p.StrSp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.strSp (7) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:strSp: ", p), err)
  }
  return err
}

func (p *USER_HISTORY) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("USER_HISTORY(%+v)", *p)
}

// ************************************************
// 	用户踩赞数据结构
// 	nId			踩赞id
// 	commentID		评论ID
// 	userID			用户ID
// 	my_praise_record	用户点踩点赞记录-1：没有点踩点赞 0：点踩 1：点赞
// *************************************************
// 
// Attributes:
//  - NId
//  - CommentID
//  - UserID
//  - MyPraiseRecord
type USER_PRAISE_INFO struct {
  NId            int64           `thrift:"nId,1,required" db:"nId" json:"nId"`
  CommentID      string          `thrift:"commentID,2,required" db:"commentID" json:"commentID"`
  UserID         com_types.INTDA `thrift:"userID,3,required" db:"userID" json:"userID"`
  MyPraiseRecord int32           `thrift:"my_praise_record,4,required" db:"my_praise_record" json:"my_praise_record"`
}

func NewUSER_PRAISE_INFO() *USER_PRAISE_INFO {
  return &USER_PRAISE_INFO{}
}

func (p *USER_PRAISE_INFO) GetNId() int64 {
  return p.NId
}

func (p *USER_PRAISE_INFO) GetCommentID() string {
  return p.CommentID
}

func (p *USER_PRAISE_INFO) GetUserID() com_types.INTDA {
  return p.UserID
}

func (p *USER_PRAISE_INFO) GetMyPraiseRecord() int32 {
  return p.MyPraiseRecord
}
func (p *USER_PRAISE_INFO) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNId bool = false
  var issetCommentID bool = false
  var issetUserID bool = false
  var issetMyPraiseRecord bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNId = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetCommentID = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetUserID = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetMyPraiseRecord = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NId is not set"))
  }
  if !issetCommentID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CommentID is not set"))
  }
  if !issetUserID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
  }
  if !issetMyPraiseRecord {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MyPraiseRecord is not set"))
  }
  return nil
}

func (p *USER_PRAISE_INFO) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.NId = v
  }
  return nil
}

func (p *USER_PRAISE_INFO) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.CommentID = v
  }
  return nil
}

func (p *USER_PRAISE_INFO) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := com_types.INTDA(v)
    p.UserID = temp
  }
  return nil
}

func (p *USER_PRAISE_INFO) ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.MyPraiseRecord = v
  }
  return nil
}

func (p *USER_PRAISE_INFO) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("USER_PRAISE_INFO"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
    if err := p.writeField4(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *USER_PRAISE_INFO) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nId (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nId: ", p), err)
  }
  return err
}

func (p *USER_PRAISE_INFO) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("commentID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:commentID: ", p), err)
  }
  if err := oprot.WriteString(string(p.CommentID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.commentID (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:commentID: ", p), err)
  }
  return err
}

func (p *USER_PRAISE_INFO) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userID", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userID: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userID (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userID: ", p), err)
  }
  return err
}

func (p *USER_PRAISE_INFO) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("my_praise_record", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:my_praise_record: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.MyPraiseRecord)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.my_praise_record (4) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:my_praise_record: ", p), err)
  }
  return err
}

func (p *USER_PRAISE_INFO) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("USER_PRAISE_INFO(%+v)", *p)
}

// ************************************************
// 	用户踩赞redis存储数据结构
// 	bPraise			是否是点赞
// 	nTime			操作时间
// *************************************************
// 
// Attributes:
//  - BPraise
//  - NTime
type USER_PRAISE_RDS struct {
  BPraise bool  `thrift:"bPraise,1,required" db:"bPraise" json:"bPraise"`
  NTime   int64 `thrift:"nTime,2,required" db:"nTime" json:"nTime"`
}

func NewUSER_PRAISE_RDS() *USER_PRAISE_RDS {
  return &USER_PRAISE_RDS{}
}

func (p *USER_PRAISE_RDS) GetBPraise() bool {
  return p.BPraise
}

func (p *USER_PRAISE_RDS) GetNTime() int64 {
  return p.NTime
}
func (p *USER_PRAISE_RDS) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetBPraise bool = false
  var issetNTime bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetBPraise = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNTime = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetBPraise {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BPraise is not set"))
  }
  if !issetNTime {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NTime is not set"))
  }
  return nil
}

func (p *USER_PRAISE_RDS) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.BPraise = v
  }
  return nil
}

func (p *USER_PRAISE_RDS) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.NTime = v
  }
  return nil
}

func (p *USER_PRAISE_RDS) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("USER_PRAISE_RDS"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *USER_PRAISE_RDS) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bPraise", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bPraise: ", p), err)
  }
  if err := oprot.WriteBool(bool(p.BPraise)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bPraise (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bPraise: ", p), err)
  }
  return err
}

func (p *USER_PRAISE_RDS) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nTime: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nTime (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nTime: ", p), err)
  }
  return err
}

func (p *USER_PRAISE_RDS) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("USER_PRAISE_RDS(%+v)", *p)
}

// ************************************************
// 	用户评论数据结构
// 	commentID		评论ID
// 	programID		节目ID
// 	userID			用户ID
// 	refCommentID		回复的评论ID
// 	commentTime		评论时间
// 	praise			评论被赞的次数
// 	degrade			评论被踩的次数
// 	commentSource		评论来源
// 	nReplyNum		评论回复条数
// 	content			评论内容
// *************************************************
// 
// Attributes:
//  - CommentID
//  - ProgramID
//  - UserID
//  - RefCommentID
//  - CommentTime
//  - Praise
//  - Degrade
//  - CommentSource
//  - NReplyNum
//  - Content
type USER_COMMENT_INFO struct {
  CommentID     int64            `thrift:"commentID,1,required" db:"commentID" json:"commentID"`
  ProgramID     com_types.PRG_ID `thrift:"programID,2,required" db:"programID" json:"programID"`
  UserID        com_types.INTDA  `thrift:"userID,3,required" db:"userID" json:"userID"`
  RefCommentID  int64            `thrift:"refCommentID,4,required" db:"refCommentID" json:"refCommentID"`
  CommentTime   int64            `thrift:"commentTime,5,required" db:"commentTime" json:"commentTime"`
  Praise        int32            `thrift:"praise,6,required" db:"praise" json:"praise"`
  Degrade       int32            `thrift:"degrade,7,required" db:"degrade" json:"degrade"`
  CommentSource int32            `thrift:"commentSource,8,required" db:"commentSource" json:"commentSource"`
  NReplyNum     int32            `thrift:"nReplyNum,9,required" db:"nReplyNum" json:"nReplyNum"`
  Content       string           `thrift:"content,10,required" db:"content" json:"content"`
}

func NewUSER_COMMENT_INFO() *USER_COMMENT_INFO {
  return &USER_COMMENT_INFO{}
}

func (p *USER_COMMENT_INFO) GetCommentID() int64 {
  return p.CommentID
}

func (p *USER_COMMENT_INFO) GetProgramID() com_types.PRG_ID {
  return p.ProgramID
}

func (p *USER_COMMENT_INFO) GetUserID() com_types.INTDA {
  return p.UserID
}

func (p *USER_COMMENT_INFO) GetRefCommentID() int64 {
  return p.RefCommentID
}

func (p *USER_COMMENT_INFO) GetCommentTime() int64 {
  return p.CommentTime
}

func (p *USER_COMMENT_INFO) GetPraise() int32 {
  return p.Praise
}

func (p *USER_COMMENT_INFO) GetDegrade() int32 {
  return p.Degrade
}

func (p *USER_COMMENT_INFO) GetCommentSource() int32 {
  return p.CommentSource
}

func (p *USER_COMMENT_INFO) GetNReplyNum() int32 {
  return p.NReplyNum
}

func (p *USER_COMMENT_INFO) GetContent() string {
  return p.Content
}
func (p *USER_COMMENT_INFO) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCommentID bool = false
  var issetProgramID bool = false
  var issetUserID bool = false
  var issetRefCommentID bool = false
  var issetCommentTime bool = false
  var issetPraise bool = false
  var issetDegrade bool = false
  var issetCommentSource bool = false
  var issetNReplyNum bool = false
  var issetContent bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetCommentID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetProgramID = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetUserID = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetRefCommentID = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetCommentTime = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetPraise = true
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
      issetDegrade = true
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
      issetCommentSource = true
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
      issetNReplyNum = true
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
      issetContent = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCommentID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CommentID is not set"))
  }
  if !issetProgramID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProgramID is not set"))
  }
  if !issetUserID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
  }
  if !issetRefCommentID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RefCommentID is not set"))
  }
  if !issetCommentTime {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CommentTime is not set"))
  }
  if !issetPraise {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Praise is not set"))
  }
  if !issetDegrade {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Degrade is not set"))
  }
  if !issetCommentSource {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CommentSource is not set"))
  }
  if !issetNReplyNum {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NReplyNum is not set"))
  }
  if !issetContent {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Content is not set"))
  }
  return nil
}

func (p *USER_COMMENT_INFO) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.CommentID = v
  }
  return nil
}

func (p *USER_COMMENT_INFO) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := com_types.PRG_ID(v)
    p.ProgramID = temp
  }
  return nil
}

func (p *USER_COMMENT_INFO) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := com_types.INTDA(v)
    p.UserID = temp
  }
  return nil
}

func (p *USER_COMMENT_INFO) ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.RefCommentID = v
  }
  return nil
}

func (p *USER_COMMENT_INFO) ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.CommentTime = v
  }
  return nil
}

func (p *USER_COMMENT_INFO) ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.Praise = v
  }
  return nil
}

func (p *USER_COMMENT_INFO) ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    p.Degrade = v
  }
  return nil
}

func (p *USER_COMMENT_INFO) ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.CommentSource = v
  }
  return nil
}

func (p *USER_COMMENT_INFO) ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 9: ", err)
  } else {
    p.NReplyNum = v
  }
  return nil
}

func (p *USER_COMMENT_INFO) ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 10: ", err)
  } else {
    p.Content = v
  }
  return nil
}

func (p *USER_COMMENT_INFO) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("USER_COMMENT_INFO"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
    if err := p.writeField4(oprot); err != nil {
      return err
    }
    if err := p.writeField5(oprot); err != nil {
      return err
    }
    if err := p.writeField6(oprot); err != nil {
      return err
    }
    if err := p.writeField7(oprot); err != nil {
      return err
    }
    if err := p.writeField8(oprot); err != nil {
      return err
    }
    if err := p.writeField9(oprot); err != nil {
      return err
    }
    if err := p.writeField10(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *USER_COMMENT_INFO) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("commentID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:commentID: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.CommentID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.commentID (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:commentID: ", p), err)
  }
  return err
}

func (p *USER_COMMENT_INFO) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("programID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:programID: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.ProgramID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.programID (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:programID: ", p), err)
  }
  return err
}

func (p *USER_COMMENT_INFO) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userID", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userID: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userID (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userID: ", p), err)
  }
  return err
}

func (p *USER_COMMENT_INFO) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("refCommentID", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:refCommentID: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.RefCommentID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.refCommentID (4) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:refCommentID: ", p), err)
  }
  return err
}

func (p *USER_COMMENT_INFO) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("commentTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:commentTime: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.CommentTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.commentTime (5) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:commentTime: ", p), err)
  }
  return err
}

func (p *USER_COMMENT_INFO) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("praise", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:praise: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.Praise)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.praise (6) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:praise: ", p), err)
  }
  return err
}

func (p *USER_COMMENT_INFO) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("degrade", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:degrade: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.Degrade)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.degrade (7) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:degrade: ", p), err)
  }
  return err
}

func (p *USER_COMMENT_INFO) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("commentSource", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:commentSource: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.CommentSource)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.commentSource (8) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:commentSource: ", p), err)
  }
  return err
}

func (p *USER_COMMENT_INFO) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nReplyNum", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:nReplyNum: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NReplyNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nReplyNum (9) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:nReplyNum: ", p), err)
  }
  return err
}

func (p *USER_COMMENT_INFO) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("content", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:content: ", p), err)
  }
  if err := oprot.WriteString(string(p.Content)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.content (10) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:content: ", p), err)
  }
  return err
}

func (p *USER_COMMENT_INFO) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("USER_COMMENT_INFO(%+v)", *p)
}

// ************************************************
// 	节目统计数据结构
// 	nPid			节目ID
// 	nCommentNum		评论数ID
// 	nTotalScore		节目总评分
// 	nScoreTimes		节目评分次数
// 	nFavoriteNum		节目收藏/关注次数(收藏明星叫关注)
// 	nBigenwatchNum		剧集追剧次数
// 	nReserveNum		剧集预约次数
// 	nPraiseNum		节目点赞数
// 	nDegradeNum		节目点踩数
// 	nHits			节目点击数
// *************************************************
// 
// Attributes:
//  - NPid
//  - NCommentNum
//  - NTotalScore
//  - NScoreTimes
//  - NFavoriteNum
//  - NBigenwatchNum
//  - NReserveNum
//  - NPraiseNum
//  - NDegradeNum
//  - NHits
type PROGRAM_DEMAND struct {
  NPid           com_types.PRG_ID `thrift:"nPid,1,required" db:"nPid" json:"nPid"`
  NCommentNum    int32            `thrift:"nCommentNum,2,required" db:"nCommentNum" json:"nCommentNum"`
  NTotalScore    int32            `thrift:"nTotalScore,3,required" db:"nTotalScore" json:"nTotalScore"`
  NScoreTimes    int32            `thrift:"nScoreTimes,4,required" db:"nScoreTimes" json:"nScoreTimes"`
  NFavoriteNum   int32            `thrift:"nFavoriteNum,5,required" db:"nFavoriteNum" json:"nFavoriteNum"`
  NBigenwatchNum int32            `thrift:"nBigenwatchNum,6,required" db:"nBigenwatchNum" json:"nBigenwatchNum"`
  NReserveNum    int32            `thrift:"nReserveNum,7,required" db:"nReserveNum" json:"nReserveNum"`
  NPraiseNum     int32            `thrift:"nPraiseNum,8,required" db:"nPraiseNum" json:"nPraiseNum"`
  NDegradeNum    int32            `thrift:"nDegradeNum,9,required" db:"nDegradeNum" json:"nDegradeNum"`
  NHits          int32            `thrift:"nHits,10,required" db:"nHits" json:"nHits"`
}

func NewPROGRAM_DEMAND() *PROGRAM_DEMAND {
  return &PROGRAM_DEMAND{}
}

func (p *PROGRAM_DEMAND) GetNPid() com_types.PRG_ID {
  return p.NPid
}

func (p *PROGRAM_DEMAND) GetNCommentNum() int32 {
  return p.NCommentNum
}

func (p *PROGRAM_DEMAND) GetNTotalScore() int32 {
  return p.NTotalScore
}

func (p *PROGRAM_DEMAND) GetNScoreTimes() int32 {
  return p.NScoreTimes
}

func (p *PROGRAM_DEMAND) GetNFavoriteNum() int32 {
  return p.NFavoriteNum
}

func (p *PROGRAM_DEMAND) GetNBigenwatchNum() int32 {
  return p.NBigenwatchNum
}

func (p *PROGRAM_DEMAND) GetNReserveNum() int32 {
  return p.NReserveNum
}

func (p *PROGRAM_DEMAND) GetNPraiseNum() int32 {
  return p.NPraiseNum
}

func (p *PROGRAM_DEMAND) GetNDegradeNum() int32 {
  return p.NDegradeNum
}

func (p *PROGRAM_DEMAND) GetNHits() int32 {
  return p.NHits
}
func (p *PROGRAM_DEMAND) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNPid bool = false
  var issetNCommentNum bool = false
  var issetNTotalScore bool = false
  var issetNScoreTimes bool = false
  var issetNFavoriteNum bool = false
  var issetNBigenwatchNum bool = false
  var issetNReserveNum bool = false
  var issetNPraiseNum bool = false
  var issetNDegradeNum bool = false
  var issetNHits bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNPid = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNCommentNum = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetNTotalScore = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetNScoreTimes = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetNFavoriteNum = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetNBigenwatchNum = true
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
      issetNReserveNum = true
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
      issetNPraiseNum = true
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
      issetNDegradeNum = true
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
      issetNHits = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNPid {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NPid is not set"))
  }
  if !issetNCommentNum {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NCommentNum is not set"))
  }
  if !issetNTotalScore {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NTotalScore is not set"))
  }
  if !issetNScoreTimes {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NScoreTimes is not set"))
  }
  if !issetNFavoriteNum {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NFavoriteNum is not set"))
  }
  if !issetNBigenwatchNum {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NBigenwatchNum is not set"))
  }
  if !issetNReserveNum {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NReserveNum is not set"))
  }
  if !issetNPraiseNum {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NPraiseNum is not set"))
  }
  if !issetNDegradeNum {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NDegradeNum is not set"))
  }
  if !issetNHits {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NHits is not set"))
  }
  return nil
}

func (p *PROGRAM_DEMAND) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := com_types.PRG_ID(v)
    p.NPid = temp
  }
  return nil
}

func (p *PROGRAM_DEMAND) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.NCommentNum = v
  }
  return nil
}

func (p *PROGRAM_DEMAND) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.NTotalScore = v
  }
  return nil
}

func (p *PROGRAM_DEMAND) ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.NScoreTimes = v
  }
  return nil
}

func (p *PROGRAM_DEMAND) ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.NFavoriteNum = v
  }
  return nil
}

func (p *PROGRAM_DEMAND) ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.NBigenwatchNum = v
  }
  return nil
}

func (p *PROGRAM_DEMAND) ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    p.NReserveNum = v
  }
  return nil
}

func (p *PROGRAM_DEMAND) ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.NPraiseNum = v
  }
  return nil
}

func (p *PROGRAM_DEMAND) ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 9: ", err)
  } else {
    p.NDegradeNum = v
  }
  return nil
}

func (p *PROGRAM_DEMAND) ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 10: ", err)
  } else {
    p.NHits = v
  }
  return nil
}

func (p *PROGRAM_DEMAND) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PROGRAM_DEMAND"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
    if err := p.writeField4(oprot); err != nil {
      return err
    }
    if err := p.writeField5(oprot); err != nil {
      return err
    }
    if err := p.writeField6(oprot); err != nil {
      return err
    }
    if err := p.writeField7(oprot); err != nil {
      return err
    }
    if err := p.writeField8(oprot); err != nil {
      return err
    }
    if err := p.writeField9(oprot); err != nil {
      return err
    }
    if err := p.writeField10(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *PROGRAM_DEMAND) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nPid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nPid: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NPid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nPid (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nPid: ", p), err)
  }
  return err
}

func (p *PROGRAM_DEMAND) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nCommentNum", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nCommentNum: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NCommentNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nCommentNum (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nCommentNum: ", p), err)
  }
  return err
}

func (p *PROGRAM_DEMAND) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nTotalScore", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nTotalScore: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NTotalScore)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nTotalScore (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nTotalScore: ", p), err)
  }
  return err
}

func (p *PROGRAM_DEMAND) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nScoreTimes", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nScoreTimes: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NScoreTimes)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nScoreTimes (4) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nScoreTimes: ", p), err)
  }
  return err
}

func (p *PROGRAM_DEMAND) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nFavoriteNum", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nFavoriteNum: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NFavoriteNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nFavoriteNum (5) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nFavoriteNum: ", p), err)
  }
  return err
}

func (p *PROGRAM_DEMAND) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nBigenwatchNum", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:nBigenwatchNum: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NBigenwatchNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nBigenwatchNum (6) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:nBigenwatchNum: ", p), err)
  }
  return err
}

func (p *PROGRAM_DEMAND) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nReserveNum", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:nReserveNum: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NReserveNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nReserveNum (7) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:nReserveNum: ", p), err)
  }
  return err
}

func (p *PROGRAM_DEMAND) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nPraiseNum", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:nPraiseNum: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NPraiseNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nPraiseNum (8) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:nPraiseNum: ", p), err)
  }
  return err
}

func (p *PROGRAM_DEMAND) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nDegradeNum", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:nDegradeNum: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NDegradeNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nDegradeNum (9) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:nDegradeNum: ", p), err)
  }
  return err
}

func (p *PROGRAM_DEMAND) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nHits", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:nHits: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NHits)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nHits (10) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:nHits: ", p), err)
  }
  return err
}

func (p *PROGRAM_DEMAND) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PROGRAM_DEMAND(%+v)", *p)
}

// ************************************************
// 	是否收藏数据结构
// 	bIsFavorite		是否收藏
// 	bIsBigenWatch	是否追剧
// 	bIsReserve		是否预约
// *************************************************
// 
// Attributes:
//  - BIsFavorite
//  - BIsBigenWatch
//  - BIsReserve
type ISFAVORITE struct {
  BIsFavorite   bool `thrift:"bIsFavorite,1,required" db:"bIsFavorite" json:"bIsFavorite"`
  BIsBigenWatch bool `thrift:"bIsBigenWatch,2,required" db:"bIsBigenWatch" json:"bIsBigenWatch"`
  BIsReserve    bool `thrift:"bIsReserve,3,required" db:"bIsReserve" json:"bIsReserve"`
}

func NewISFAVORITE() *ISFAVORITE {
  return &ISFAVORITE{}
}

func (p *ISFAVORITE) GetBIsFavorite() bool {
  return p.BIsFavorite
}

func (p *ISFAVORITE) GetBIsBigenWatch() bool {
  return p.BIsBigenWatch
}

func (p *ISFAVORITE) GetBIsReserve() bool {
  return p.BIsReserve
}
func (p *ISFAVORITE) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetBIsFavorite bool = false
  var issetBIsBigenWatch bool = false
  var issetBIsReserve bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetBIsFavorite = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetBIsBigenWatch = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetBIsReserve = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetBIsFavorite {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BIsFavorite is not set"))
  }
  if !issetBIsBigenWatch {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BIsBigenWatch is not set"))
  }
  if !issetBIsReserve {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BIsReserve is not set"))
  }
  return nil
}

func (p *ISFAVORITE) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.BIsFavorite = v
  }
  return nil
}

func (p *ISFAVORITE) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.BIsBigenWatch = v
  }
  return nil
}

func (p *ISFAVORITE) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.BIsReserve = v
  }
  return nil
}

func (p *ISFAVORITE) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ISFAVORITE"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *ISFAVORITE) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bIsFavorite", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bIsFavorite: ", p), err)
  }
  if err := oprot.WriteBool(bool(p.BIsFavorite)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bIsFavorite (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bIsFavorite: ", p), err)
  }
  return err
}

func (p *ISFAVORITE) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bIsBigenWatch", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bIsBigenWatch: ", p), err)
  }
  if err := oprot.WriteBool(bool(p.BIsBigenWatch)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bIsBigenWatch (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bIsBigenWatch: ", p), err)
  }
  return err
}

func (p *ISFAVORITE) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bIsReserve", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:bIsReserve: ", p), err)
  }
  if err := oprot.WriteBool(bool(p.BIsReserve)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bIsReserve (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:bIsReserve: ", p), err)
  }
  return err
}

func (p *ISFAVORITE) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ISFAVORITE(%+v)", *p)
}

// ************************************************
// 	用户节目整合数据结构
// 	stDemand			节目综合数据
// 	stIsFavs			是否收藏&关注&追剧&预约
// 	nPraiseStatus		是否点踩点赞
// 	nLastHitId			剧集中上次观看的频道
// 	nOffSet				剧集中上次观看频道的具体位置
// 	nLastHitTime		剧集中上次观看频道时间
// 	nUserScore			用户对节目的评分
// *************************************************
// 
// Attributes:
//  - StDemand
//  - StIsFavs
//  - NPraiseStatus
//  - NLastHitId
//  - NOffSet
//  - NLastHitTime
//  - NUserScore
type USER_PROGRAM struct {
  StDemand      *PROGRAM_DEMAND `thrift:"stDemand,1,required" db:"stDemand" json:"stDemand"`
  StIsFavs      *ISFAVORITE     `thrift:"stIsFavs,2,required" db:"stIsFavs" json:"stIsFavs"`
  NPraiseStatus int32           `thrift:"nPraiseStatus,3,required" db:"nPraiseStatus" json:"nPraiseStatus"`
  NLastHitId    int64           `thrift:"nLastHitId,4,required" db:"nLastHitId" json:"nLastHitId"`
  NOffSet       int32           `thrift:"nOffSet,5,required" db:"nOffSet" json:"nOffSet"`
  NLastHitTime  int64           `thrift:"nLastHitTime,6,required" db:"nLastHitTime" json:"nLastHitTime"`
  NUserScore    int32           `thrift:"nUserScore,7,required" db:"nUserScore" json:"nUserScore"`
}

func NewUSER_PROGRAM() *USER_PROGRAM {
  return &USER_PROGRAM{
    NPraiseStatus: -1,
  }
}

var USER_PROGRAM_StDemand_DEFAULT *PROGRAM_DEMAND

func (p *USER_PROGRAM) GetStDemand() *PROGRAM_DEMAND {
  if !p.IsSetStDemand() {
    return USER_PROGRAM_StDemand_DEFAULT
  }
  return p.StDemand
}

var USER_PROGRAM_StIsFavs_DEFAULT *ISFAVORITE

func (p *USER_PROGRAM) GetStIsFavs() *ISFAVORITE {
  if !p.IsSetStIsFavs() {
    return USER_PROGRAM_StIsFavs_DEFAULT
  }
  return p.StIsFavs
}

func (p *USER_PROGRAM) GetNPraiseStatus() int32 {
  return p.NPraiseStatus
}

func (p *USER_PROGRAM) GetNLastHitId() int64 {
  return p.NLastHitId
}

func (p *USER_PROGRAM) GetNOffSet() int32 {
  return p.NOffSet
}

func (p *USER_PROGRAM) GetNLastHitTime() int64 {
  return p.NLastHitTime
}

func (p *USER_PROGRAM) GetNUserScore() int32 {
  return p.NUserScore
}
func (p *USER_PROGRAM) IsSetStDemand() bool {
  return p.StDemand != nil
}

func (p *USER_PROGRAM) IsSetStIsFavs() bool {
  return p.StIsFavs != nil
}

func (p *USER_PROGRAM) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStDemand bool = false
  var issetStIsFavs bool = false
  var issetNPraiseStatus bool = false
  var issetNLastHitId bool = false
  var issetNOffSet bool = false
  var issetNLastHitTime bool = false
  var issetNUserScore bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetStDemand = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetStIsFavs = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetNPraiseStatus = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetNLastHitId = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetNOffSet = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetNLastHitTime = true
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
      issetNUserScore = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStDemand {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StDemand is not set"))
  }
  if !issetStIsFavs {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StIsFavs is not set"))
  }
  if !issetNPraiseStatus {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NPraiseStatus is not set"))
  }
  if !issetNLastHitId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NLastHitId is not set"))
  }
  if !issetNOffSet {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NOffSet is not set"))
  }
  if !issetNLastHitTime {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NLastHitTime is not set"))
  }
  if !issetNUserScore {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NUserScore is not set"))
  }
  return nil
}

func (p *USER_PROGRAM) ReadField1(iprot thrift.TProtocol) error {
  p.StDemand = &PROGRAM_DEMAND{}
  if err := p.StDemand.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StDemand), err)
  }
  return nil
}

func (p *USER_PROGRAM) ReadField2(iprot thrift.TProtocol) error {
  p.StIsFavs = &ISFAVORITE{}
  if err := p.StIsFavs.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StIsFavs), err)
  }
  return nil
}

func (p *USER_PROGRAM) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.NPraiseStatus = v
  }
  return nil
}

func (p *USER_PROGRAM) ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.NLastHitId = v
  }
  return nil
}

func (p *USER_PROGRAM) ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.NOffSet = v
  }
  return nil
}

func (p *USER_PROGRAM) ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.NLastHitTime = v
  }
  return nil
}

func (p *USER_PROGRAM) ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    p.NUserScore = v
  }
  return nil
}

func (p *USER_PROGRAM) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("USER_PROGRAM"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
    if err := p.writeField4(oprot); err != nil {
      return err
    }
    if err := p.writeField5(oprot); err != nil {
      return err
    }
    if err := p.writeField6(oprot); err != nil {
      return err
    }
    if err := p.writeField7(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *USER_PROGRAM) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stDemand", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stDemand: ", p), err)
  }
  if err := p.StDemand.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StDemand), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stDemand: ", p), err)
  }
  return err
}

func (p *USER_PROGRAM) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stIsFavs", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stIsFavs: ", p), err)
  }
  if err := p.StIsFavs.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StIsFavs), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stIsFavs: ", p), err)
  }
  return err
}

func (p *USER_PROGRAM) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nPraiseStatus", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nPraiseStatus: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NPraiseStatus)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nPraiseStatus (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nPraiseStatus: ", p), err)
  }
  return err
}

func (p *USER_PROGRAM) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nLastHitId", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nLastHitId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NLastHitId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nLastHitId (4) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nLastHitId: ", p), err)
  }
  return err
}

func (p *USER_PROGRAM) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nOffSet", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nOffSet: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NOffSet)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nOffSet (5) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nOffSet: ", p), err)
  }
  return err
}

func (p *USER_PROGRAM) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nLastHitTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:nLastHitTime: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NLastHitTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nLastHitTime (6) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:nLastHitTime: ", p), err)
  }
  return err
}

func (p *USER_PROGRAM) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nUserScore", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:nUserScore: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NUserScore)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nUserScore (7) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:nUserScore: ", p), err)
  }
  return err
}

func (p *USER_PROGRAM) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("USER_PROGRAM(%+v)", *p)
}

// ************************************************
// 	用户个性化栏目排序数据结构
// 	nIdx				用户个性化栏目排序idx
// 	bIsLock				栏目是否被锁住
// *************************************************
// 
// Attributes:
//  - NIdx
//  - BIsLock
type ColumnSetting struct {
  NIdx    int16 `thrift:"nIdx,1,required" db:"nIdx" json:"nIdx"`
  BIsLock bool  `thrift:"bIsLock,2,required" db:"bIsLock" json:"bIsLock"`
}

func NewColumnSetting() *ColumnSetting {
  return &ColumnSetting{}
}

func (p *ColumnSetting) GetNIdx() int16 {
  return p.NIdx
}

func (p *ColumnSetting) GetBIsLock() bool {
  return p.BIsLock
}
func (p *ColumnSetting) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNIdx bool = false
  var issetBIsLock bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNIdx = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetBIsLock = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNIdx {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NIdx is not set"))
  }
  if !issetBIsLock {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BIsLock is not set"))
  }
  return nil
}

func (p *ColumnSetting) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.NIdx = v
  }
  return nil
}

func (p *ColumnSetting) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.BIsLock = v
  }
  return nil
}

func (p *ColumnSetting) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ColumnSetting"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *ColumnSetting) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nIdx", thrift.I16, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nIdx: ", p), err)
  }
  if err := oprot.WriteI16(int16(p.NIdx)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nIdx (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nIdx: ", p), err)
  }
  return err
}

func (p *ColumnSetting) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bIsLock", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bIsLock: ", p), err)
  }
  if err := oprot.WriteBool(bool(p.BIsLock)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bIsLock (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bIsLock: ", p), err)
  }
  return err
}

func (p *ColumnSetting) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ColumnSetting(%+v)", *p)
}

// ************************************************
// 	分享数据结构
// 	strShareId			每条分享记录的唯一标识
// 	1、分享id格式	: FX+设备类型+用户id后四位+当前时间+用户id前四位
// 	2、当前时间格式	: MM(分钟) DD(日) HH(小时) YY(年) SS(秒) MM(月)
// 	nUserId				分享者用户id
// 	nTargetType			分享对象的id类型：1.个人；2.家庭组；3.homed好友群
// 	setTargetId			分享对象id
// 	nAssetType			分享内容的类型，与homed资产id对应，取值参照业务标准类型定义
// 	strAssetId			分享内容的homed资产id
// 	strReason			分享的原因
// 	tShareTime			分享的时间
// 	strShareInfo		第三方应用信息
// 
// *************************************************
// 
// Attributes:
//  - StrShareId
//  - NUserId
//  - NTargetType
//  - SetTargetId
//  - NAssetType
//  - StrAssetId
//  - StrReason
//  - TShareTime
//  - StrShareInfo
type SHARE_INFO struct {
  StrShareId   string             `thrift:"strShareId,1,required" db:"strShareId" json:"strShareId"`
  NUserId      com_types.INTDA    `thrift:"nUserId,2,required" db:"nUserId" json:"nUserId"`
  NTargetType  int32              `thrift:"nTargetType,3,required" db:"nTargetType" json:"nTargetType"`
  SetTargetId  map[int64]struct{} `thrift:"setTargetId,4,required" db:"setTargetId" json:"setTargetId"`
  NAssetType   int32              `thrift:"nAssetType,5,required" db:"nAssetType" json:"nAssetType"`
  StrAssetId   string             `thrift:"strAssetId,6,required" db:"strAssetId" json:"strAssetId"`
  StrReason    string             `thrift:"strReason,7,required" db:"strReason" json:"strReason"`
  TShareTime   int64              `thrift:"tShareTime,8,required" db:"tShareTime" json:"tShareTime"`
  StrShareInfo string             `thrift:"strShareInfo,9,required" db:"strShareInfo" json:"strShareInfo"`
}

func NewSHARE_INFO() *SHARE_INFO {
  return &SHARE_INFO{}
}

func (p *SHARE_INFO) GetStrShareId() string {
  return p.StrShareId
}

func (p *SHARE_INFO) GetNUserId() com_types.INTDA {
  return p.NUserId
}

func (p *SHARE_INFO) GetNTargetType() int32 {
  return p.NTargetType
}

func (p *SHARE_INFO) GetSetTargetId() map[int64]struct{} {
  return p.SetTargetId
}

func (p *SHARE_INFO) GetNAssetType() int32 {
  return p.NAssetType
}

func (p *SHARE_INFO) GetStrAssetId() string {
  return p.StrAssetId
}

func (p *SHARE_INFO) GetStrReason() string {
  return p.StrReason
}

func (p *SHARE_INFO) GetTShareTime() int64 {
  return p.TShareTime
}

func (p *SHARE_INFO) GetStrShareInfo() string {
  return p.StrShareInfo
}
func (p *SHARE_INFO) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStrShareId bool = false
  var issetNUserId bool = false
  var issetNTargetType bool = false
  var issetSetTargetId bool = false
  var issetNAssetType bool = false
  var issetStrAssetId bool = false
  var issetStrReason bool = false
  var issetTShareTime bool = false
  var issetStrShareInfo bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetStrShareId = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNUserId = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetNTargetType = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetSetTargetId = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetNAssetType = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetStrAssetId = true
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
      issetStrReason = true
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
      issetTShareTime = true
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
      issetStrShareInfo = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStrShareId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StrShareId is not set"))
  }
  if !issetNUserId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NUserId is not set"))
  }
  if !issetNTargetType {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NTargetType is not set"))
  }
  if !issetSetTargetId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SetTargetId is not set"))
  }
  if !issetNAssetType {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NAssetType is not set"))
  }
  if !issetStrAssetId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StrAssetId is not set"))
  }
  if !issetStrReason {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StrReason is not set"))
  }
  if !issetTShareTime {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TShareTime is not set"))
  }
  if !issetStrShareInfo {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StrShareInfo is not set"))
  }
  return nil
}

func (p *SHARE_INFO) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.StrShareId = v
  }
  return nil
}

func (p *SHARE_INFO) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := com_types.INTDA(v)
    p.NUserId = temp
  }
  return nil
}

func (p *SHARE_INFO) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.NTargetType = v
  }
  return nil
}

func (p *SHARE_INFO) ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make(map[int64]struct{}, size)
  p.SetTargetId = tSet
  for i := 0; i < size; i++ {
    var _elem1 int64
    if v, err := iprot.ReadI64(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem1 = v
    }
    p.SetTargetId[_elem1] = struct{}{}
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *SHARE_INFO) ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.NAssetType = v
  }
  return nil
}

func (p *SHARE_INFO) ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.StrAssetId = v
  }
  return nil
}

func (p *SHARE_INFO) ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    p.StrReason = v
  }
  return nil
}

func (p *SHARE_INFO) ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.TShareTime = v
  }
  return nil
}

func (p *SHARE_INFO) ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 9: ", err)
  } else {
    p.StrShareInfo = v
  }
  return nil
}

func (p *SHARE_INFO) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SHARE_INFO"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
    if err := p.writeField4(oprot); err != nil {
      return err
    }
    if err := p.writeField5(oprot); err != nil {
      return err
    }
    if err := p.writeField6(oprot); err != nil {
      return err
    }
    if err := p.writeField7(oprot); err != nil {
      return err
    }
    if err := p.writeField8(oprot); err != nil {
      return err
    }
    if err := p.writeField9(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *SHARE_INFO) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("strShareId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:strShareId: ", p), err)
  }
  if err := oprot.WriteString(string(p.StrShareId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.strShareId (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:strShareId: ", p), err)
  }
  return err
}

func (p *SHARE_INFO) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nUserId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nUserId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NUserId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nUserId (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nUserId: ", p), err)
  }
  return err
}

func (p *SHARE_INFO) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nTargetType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nTargetType: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NTargetType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nTargetType (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nTargetType: ", p), err)
  }
  return err
}

func (p *SHARE_INFO) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("setTargetId", thrift.SET, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:setTargetId: ", p), err)
  }
  if err := oprot.WriteSetBegin(thrift.I64, len(p.SetTargetId)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for v, _ := range p.SetTargetId {
    if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
    }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:setTargetId: ", p), err)
  }
  return err
}

func (p *SHARE_INFO) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nAssetType", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nAssetType: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NAssetType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nAssetType (5) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nAssetType: ", p), err)
  }
  return err
}

func (p *SHARE_INFO) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("strAssetId", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:strAssetId: ", p), err)
  }
  if err := oprot.WriteString(string(p.StrAssetId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.strAssetId (6) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:strAssetId: ", p), err)
  }
  return err
}

func (p *SHARE_INFO) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("strReason", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:strReason: ", p), err)
  }
  if err := oprot.WriteString(string(p.StrReason)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.strReason (7) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:strReason: ", p), err)
  }
  return err
}

func (p *SHARE_INFO) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tShareTime", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:tShareTime: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.TShareTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tShareTime (8) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:tShareTime: ", p), err)
  }
  return err
}

func (p *SHARE_INFO) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("strShareInfo", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:strShareInfo: ", p), err)
  }
  if err := oprot.WriteString(string(p.StrShareInfo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.strShareInfo (9) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:strShareInfo: ", p), err)
  }
  return err
}

func (p *SHARE_INFO) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SHARE_INFO(%+v)", *p)
}

// ************************************************
// 	用户加锁数据结构
// 	nUserId				用户id
// 	nId					id可以为频道id、应用id、业务的分类id
// 	strPwd				加锁密码
// *************************************************
// 
// Attributes:
//  - NUserId
//  - NId
//  - StrPwd
type USER_LOCK struct {
  NUserId com_types.INTDA `thrift:"nUserId,1,required" db:"nUserId" json:"nUserId"`
  NId     int64           `thrift:"nId,2,required" db:"nId" json:"nId"`
  StrPwd  string          `thrift:"strPwd,3,required" db:"strPwd" json:"strPwd"`
}

func NewUSER_LOCK() *USER_LOCK {
  return &USER_LOCK{}
}

func (p *USER_LOCK) GetNUserId() com_types.INTDA {
  return p.NUserId
}

func (p *USER_LOCK) GetNId() int64 {
  return p.NId
}

func (p *USER_LOCK) GetStrPwd() string {
  return p.StrPwd
}
func (p *USER_LOCK) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNUserId bool = false
  var issetNId bool = false
  var issetStrPwd bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNUserId = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNId = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetStrPwd = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNUserId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NUserId is not set"))
  }
  if !issetNId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NId is not set"))
  }
  if !issetStrPwd {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StrPwd is not set"))
  }
  return nil
}

func (p *USER_LOCK) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := com_types.INTDA(v)
    p.NUserId = temp
  }
  return nil
}

func (p *USER_LOCK) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.NId = v
  }
  return nil
}

func (p *USER_LOCK) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.StrPwd = v
  }
  return nil
}

func (p *USER_LOCK) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("USER_LOCK"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *USER_LOCK) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nUserId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nUserId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NUserId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nUserId (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nUserId: ", p), err)
  }
  return err
}

func (p *USER_LOCK) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nId (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nId: ", p), err)
  }
  return err
}

func (p *USER_LOCK) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("strPwd", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:strPwd: ", p), err)
  }
  if err := oprot.WriteString(string(p.StrPwd)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.strPwd (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:strPwd: ", p), err)
  }
  return err
}

func (p *USER_LOCK) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("USER_LOCK(%+v)", *p)
}

// ************************************************
// 	用户预定数据结构
// 	userID				用户id
// 	channelID			频道id
// 	eventID				节目id
// 	timestamp			预定时间
// 	starttime			节目开始时间
// 	endtime				节目结束时间
// 	eventName			节目名
// 	updateTime			redis 数据更新时间戳
// *************************************************
// 
// Attributes:
//  - UserID
//  - ChannelID
//  - EventID
//  - Timestamp
//  - Starttime
//  - Endtime
//  - EventName
//  - UpdateTime
type USER_ORDER struct {
  UserID     com_types.INTDA  `thrift:"userID,1,required" db:"userID" json:"userID"`
  ChannelID  com_types.CHL_ID `thrift:"channelID,2,required" db:"channelID" json:"channelID"`
  EventID    com_types.PRG_ID `thrift:"eventID,3,required" db:"eventID" json:"eventID"`
  Timestamp  int64            `thrift:"timestamp,4,required" db:"timestamp" json:"timestamp"`
  Starttime  int64            `thrift:"starttime,5,required" db:"starttime" json:"starttime"`
  Endtime    int64            `thrift:"endtime,6,required" db:"endtime" json:"endtime"`
  EventName  string           `thrift:"eventName,7,required" db:"eventName" json:"eventName"`
  UpdateTime int64            `thrift:"updateTime,8,required" db:"updateTime" json:"updateTime"`
}

func NewUSER_ORDER() *USER_ORDER {
  return &USER_ORDER{}
}

func (p *USER_ORDER) GetUserID() com_types.INTDA {
  return p.UserID
}

func (p *USER_ORDER) GetChannelID() com_types.CHL_ID {
  return p.ChannelID
}

func (p *USER_ORDER) GetEventID() com_types.PRG_ID {
  return p.EventID
}

func (p *USER_ORDER) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *USER_ORDER) GetStarttime() int64 {
  return p.Starttime
}

func (p *USER_ORDER) GetEndtime() int64 {
  return p.Endtime
}

func (p *USER_ORDER) GetEventName() string {
  return p.EventName
}

func (p *USER_ORDER) GetUpdateTime() int64 {
  return p.UpdateTime
}
func (p *USER_ORDER) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUserID bool = false
  var issetChannelID bool = false
  var issetEventID bool = false
  var issetTimestamp bool = false
  var issetStarttime bool = false
  var issetEndtime bool = false
  var issetEventName bool = false
  var issetUpdateTime bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetUserID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetChannelID = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetEventID = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetTimestamp = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetStarttime = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetEndtime = true
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
      issetEventName = true
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
      issetUpdateTime = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUserID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
  }
  if !issetChannelID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ChannelID is not set"))
  }
  if !issetEventID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EventID is not set"))
  }
  if !issetTimestamp {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Timestamp is not set"))
  }
  if !issetStarttime {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Starttime is not set"))
  }
  if !issetEndtime {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Endtime is not set"))
  }
  if !issetEventName {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EventName is not set"))
  }
  if !issetUpdateTime {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UpdateTime is not set"))
  }
  return nil
}

func (p *USER_ORDER) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := com_types.INTDA(v)
    p.UserID = temp
  }
  return nil
}

func (p *USER_ORDER) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := com_types.CHL_ID(v)
    p.ChannelID = temp
  }
  return nil
}

func (p *USER_ORDER) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := com_types.PRG_ID(v)
    p.EventID = temp
  }
  return nil
}

func (p *USER_ORDER) ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.Timestamp = v
  }
  return nil
}

func (p *USER_ORDER) ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.Starttime = v
  }
  return nil
}

func (p *USER_ORDER) ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.Endtime = v
  }
  return nil
}

func (p *USER_ORDER) ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    p.EventName = v
  }
  return nil
}

func (p *USER_ORDER) ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.UpdateTime = v
  }
  return nil
}

func (p *USER_ORDER) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("USER_ORDER"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
    if err := p.writeField4(oprot); err != nil {
      return err
    }
    if err := p.writeField5(oprot); err != nil {
      return err
    }
    if err := p.writeField6(oprot); err != nil {
      return err
    }
    if err := p.writeField7(oprot); err != nil {
      return err
    }
    if err := p.writeField8(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *USER_ORDER) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
  }
  return err
}

func (p *USER_ORDER) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("channelID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:channelID: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.ChannelID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.channelID (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:channelID: ", p), err)
  }
  return err
}

func (p *USER_ORDER) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("eventID", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:eventID: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.EventID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.eventID (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:eventID: ", p), err)
  }
  return err
}

func (p *USER_ORDER) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timestamp: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (4) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timestamp: ", p), err)
  }
  return err
}

func (p *USER_ORDER) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("starttime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:starttime: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.Starttime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.starttime (5) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:starttime: ", p), err)
  }
  return err
}

func (p *USER_ORDER) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endtime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:endtime: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.Endtime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.endtime (6) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:endtime: ", p), err)
  }
  return err
}

func (p *USER_ORDER) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("eventName", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:eventName: ", p), err)
  }
  if err := oprot.WriteString(string(p.EventName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.eventName (7) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:eventName: ", p), err)
  }
  return err
}

func (p *USER_ORDER) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateTime", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:updateTime: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updateTime (8) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:updateTime: ", p), err)
  }
  return err
}

func (p *USER_ORDER) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("USER_ORDER(%+v)", *p)
}

// ************************************************
// 	预定数据结构
// 	channelID			频道id
// 	eventID				节目id
// 	timestamp			预定时间
// *************************************************
// 
// Attributes:
//  - ChannelID
//  - EventID
//  - Timestamp
type ORDER struct {
  ChannelID com_types.CHL_ID `thrift:"channelID,1,required" db:"channelID" json:"channelID"`
  EventID   com_types.PRG_ID `thrift:"eventID,2,required" db:"eventID" json:"eventID"`
  Timestamp int64            `thrift:"timestamp,3,required" db:"timestamp" json:"timestamp"`
}

func NewORDER() *ORDER {
  return &ORDER{}
}

func (p *ORDER) GetChannelID() com_types.CHL_ID {
  return p.ChannelID
}

func (p *ORDER) GetEventID() com_types.PRG_ID {
  return p.EventID
}

func (p *ORDER) GetTimestamp() int64 {
  return p.Timestamp
}
func (p *ORDER) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetChannelID bool = false
  var issetEventID bool = false
  var issetTimestamp bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetChannelID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetEventID = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetTimestamp = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetChannelID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ChannelID is not set"))
  }
  if !issetEventID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EventID is not set"))
  }
  if !issetTimestamp {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Timestamp is not set"))
  }
  return nil
}

func (p *ORDER) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := com_types.CHL_ID(v)
    p.ChannelID = temp
  }
  return nil
}

func (p *ORDER) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := com_types.PRG_ID(v)
    p.EventID = temp
  }
  return nil
}

func (p *ORDER) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.Timestamp = v
  }
  return nil
}

func (p *ORDER) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ORDER"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *ORDER) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("channelID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelID: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.ChannelID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.channelID (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelID: ", p), err)
  }
  return err
}

func (p *ORDER) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("eventID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:eventID: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.EventID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.eventID (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:eventID: ", p), err)
  }
  return err
}

func (p *ORDER) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err)
  }
  return err
}

func (p *ORDER) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ORDER(%+v)", *p)
}

// ************************************************
// 	关注的明星剧集更新通知数据结构
// 	nStarId				明星id
// 	strStarName			明星名
// *************************************************
// 
// Attributes:
//  - NStarId
//  - StrStarName
type STARUPDATE struct {
  NStarId     com_types.STAR_ID `thrift:"nStarId,1,required" db:"nStarId" json:"nStarId"`
  StrStarName string            `thrift:"strStarName,2,required" db:"strStarName" json:"strStarName"`
}

func NewSTARUPDATE() *STARUPDATE {
  return &STARUPDATE{}
}

func (p *STARUPDATE) GetNStarId() com_types.STAR_ID {
  return p.NStarId
}

func (p *STARUPDATE) GetStrStarName() string {
  return p.StrStarName
}
func (p *STARUPDATE) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNStarId bool = false
  var issetStrStarName bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNStarId = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetStrStarName = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNStarId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NStarId is not set"))
  }
  if !issetStrStarName {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StrStarName is not set"))
  }
  return nil
}

func (p *STARUPDATE) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := com_types.STAR_ID(v)
    p.NStarId = temp
  }
  return nil
}

func (p *STARUPDATE) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.StrStarName = v
  }
  return nil
}

func (p *STARUPDATE) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("STARUPDATE"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *STARUPDATE) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nStarId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nStarId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NStarId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nStarId (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nStarId: ", p), err)
  }
  return err
}

func (p *STARUPDATE) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("strStarName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:strStarName: ", p), err)
  }
  if err := oprot.WriteString(string(p.StrStarName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.strStarName (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:strStarName: ", p), err)
  }
  return err
}

func (p *STARUPDATE) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("STARUPDATE(%+v)", *p)
}

// ************************************************
// 	剧集更新通知数据结构
// 	nType				更新类型,1: 追剧更新,2: 预约上新
// 	nSeriesId			剧集id
// 	strSeriesName		剧集名
// 	strNewIdx			更新集数索引(第几集)
// 	tUpdateTime			更新时间(上线时间)
// 	vecStarInfo			剧集关联的明星信息
// 	nContentType		剧集内容类型
// 	strContentTypeName	剧集内容类型中文名
// *************************************************
// 
// Attributes:
//  - NType
//  - NSeriesId
//  - StrSeriesName
//  - StrNewIdx
//  - TUpdateTime
//  - VecStarInfo
//  - NContentType
//  - StrContentTypeName
type SERIESUPDATE struct {
  NType              int16            `thrift:"nType,1,required" db:"nType" json:"nType"`
  NSeriesId          com_types.PRG_ID `thrift:"nSeriesId,2,required" db:"nSeriesId" json:"nSeriesId"`
  StrSeriesName      string           `thrift:"strSeriesName,3,required" db:"strSeriesName" json:"strSeriesName"`
  StrNewIdx          string           `thrift:"strNewIdx,4,required" db:"strNewIdx" json:"strNewIdx"`
  TUpdateTime        int64            `thrift:"tUpdateTime,5,required" db:"tUpdateTime" json:"tUpdateTime"`
  VecStarInfo        []*STARUPDATE    `thrift:"vecStarInfo,6,required" db:"vecStarInfo" json:"vecStarInfo"`
  NContentType       int32            `thrift:"nContentType,7,required" db:"nContentType" json:"nContentType"`
  StrContentTypeName string           `thrift:"strContentTypeName,8,required" db:"strContentTypeName" json:"strContentTypeName"`
}

func NewSERIESUPDATE() *SERIESUPDATE {
  return &SERIESUPDATE{}
}

func (p *SERIESUPDATE) GetNType() int16 {
  return p.NType
}

func (p *SERIESUPDATE) GetNSeriesId() com_types.PRG_ID {
  return p.NSeriesId
}

func (p *SERIESUPDATE) GetStrSeriesName() string {
  return p.StrSeriesName
}

func (p *SERIESUPDATE) GetStrNewIdx() string {
  return p.StrNewIdx
}

func (p *SERIESUPDATE) GetTUpdateTime() int64 {
  return p.TUpdateTime
}

func (p *SERIESUPDATE) GetVecStarInfo() []*STARUPDATE {
  return p.VecStarInfo
}

func (p *SERIESUPDATE) GetNContentType() int32 {
  return p.NContentType
}

func (p *SERIESUPDATE) GetStrContentTypeName() string {
  return p.StrContentTypeName
}
func (p *SERIESUPDATE) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNType bool = false
  var issetNSeriesId bool = false
  var issetStrSeriesName bool = false
  var issetStrNewIdx bool = false
  var issetTUpdateTime bool = false
  var issetVecStarInfo bool = false
  var issetNContentType bool = false
  var issetStrContentTypeName bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNType = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNSeriesId = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetStrSeriesName = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetStrNewIdx = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetTUpdateTime = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetVecStarInfo = true
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
      issetNContentType = true
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
      issetStrContentTypeName = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNType {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NType is not set"))
  }
  if !issetNSeriesId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSeriesId is not set"))
  }
  if !issetStrSeriesName {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StrSeriesName is not set"))
  }
  if !issetStrNewIdx {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StrNewIdx is not set"))
  }
  if !issetTUpdateTime {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TUpdateTime is not set"))
  }
  if !issetVecStarInfo {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecStarInfo is not set"))
  }
  if !issetNContentType {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NContentType is not set"))
  }
  if !issetStrContentTypeName {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StrContentTypeName is not set"))
  }
  return nil
}

func (p *SERIESUPDATE) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.NType = v
  }
  return nil
}

func (p *SERIESUPDATE) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := com_types.PRG_ID(v)
    p.NSeriesId = temp
  }
  return nil
}

func (p *SERIESUPDATE) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.StrSeriesName = v
  }
  return nil
}

func (p *SERIESUPDATE) ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.StrNewIdx = v
  }
  return nil
}

func (p *SERIESUPDATE) ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.TUpdateTime = v
  }
  return nil
}

func (p *SERIESUPDATE) ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*STARUPDATE, 0, size)
  p.VecStarInfo = tSlice
  for i := 0; i < size; i++ {
    _elem2 := &STARUPDATE{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.VecStarInfo = append(p.VecStarInfo, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SERIESUPDATE) ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    p.NContentType = v
  }
  return nil
}

func (p *SERIESUPDATE) ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.StrContentTypeName = v
  }
  return nil
}

func (p *SERIESUPDATE) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SERIESUPDATE"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
    if err := p.writeField4(oprot); err != nil {
      return err
    }
    if err := p.writeField5(oprot); err != nil {
      return err
    }
    if err := p.writeField6(oprot); err != nil {
      return err
    }
    if err := p.writeField7(oprot); err != nil {
      return err
    }
    if err := p.writeField8(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *SERIESUPDATE) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nType", thrift.I16, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nType: ", p), err)
  }
  if err := oprot.WriteI16(int16(p.NType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nType (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nType: ", p), err)
  }
  return err
}

func (p *SERIESUPDATE) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nSeriesId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nSeriesId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NSeriesId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nSeriesId (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nSeriesId: ", p), err)
  }
  return err
}

func (p *SERIESUPDATE) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("strSeriesName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:strSeriesName: ", p), err)
  }
  if err := oprot.WriteString(string(p.StrSeriesName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.strSeriesName (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:strSeriesName: ", p), err)
  }
  return err
}

func (p *SERIESUPDATE) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("strNewIdx", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:strNewIdx: ", p), err)
  }
  if err := oprot.WriteString(string(p.StrNewIdx)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.strNewIdx (4) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:strNewIdx: ", p), err)
  }
  return err
}

func (p *SERIESUPDATE) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tUpdateTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tUpdateTime: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.TUpdateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tUpdateTime (5) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tUpdateTime: ", p), err)
  }
  return err
}

func (p *SERIESUPDATE) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vecStarInfo", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:vecStarInfo: ", p), err)
  }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VecStarInfo)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VecStarInfo {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:vecStarInfo: ", p), err)
  }
  return err
}

func (p *SERIESUPDATE) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nContentType", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:nContentType: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NContentType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nContentType (7) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:nContentType: ", p), err)
  }
  return err
}

func (p *SERIESUPDATE) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("strContentTypeName", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:strContentTypeName: ", p), err)
  }
  if err := oprot.WriteString(string(p.StrContentTypeName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.strContentTypeName (8) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:strContentTypeName: ", p), err)
  }
  return err
}

func (p *SERIESUPDATE) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SERIESUPDATE(%+v)", *p)
}

// ************************************************
// 	用户资源投放数据结构
// 	nId					投放记录数据id
// 	nViewTimes			曝光次数
// 	nClickTimes			点击次数
// *************************************************
// 
// Attributes:
//  - NId
//  - NViewTimes
//  - NClickTimes
type USER_RESOURCE_SAMPLE struct {
  NId         int64 `thrift:"nId,1,required" db:"nId" json:"nId"`
  NViewTimes  int32 `thrift:"nViewTimes,2,required" db:"nViewTimes" json:"nViewTimes"`
  NClickTimes int32 `thrift:"nClickTimes,3,required" db:"nClickTimes" json:"nClickTimes"`
}

func NewUSER_RESOURCE_SAMPLE() *USER_RESOURCE_SAMPLE {
  return &USER_RESOURCE_SAMPLE{}
}

func (p *USER_RESOURCE_SAMPLE) GetNId() int64 {
  return p.NId
}

func (p *USER_RESOURCE_SAMPLE) GetNViewTimes() int32 {
  return p.NViewTimes
}

func (p *USER_RESOURCE_SAMPLE) GetNClickTimes() int32 {
  return p.NClickTimes
}
func (p *USER_RESOURCE_SAMPLE) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNId bool = false
  var issetNViewTimes bool = false
  var issetNClickTimes bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNId = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNViewTimes = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetNClickTimes = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NId is not set"))
  }
  if !issetNViewTimes {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NViewTimes is not set"))
  }
  if !issetNClickTimes {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NClickTimes is not set"))
  }
  return nil
}

func (p *USER_RESOURCE_SAMPLE) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.NId = v
  }
  return nil
}

func (p *USER_RESOURCE_SAMPLE) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.NViewTimes = v
  }
  return nil
}

func (p *USER_RESOURCE_SAMPLE) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.NClickTimes = v
  }
  return nil
}

func (p *USER_RESOURCE_SAMPLE) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("USER_RESOURCE_SAMPLE"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *USER_RESOURCE_SAMPLE) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nId (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nId: ", p), err)
  }
  return err
}

func (p *USER_RESOURCE_SAMPLE) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nViewTimes", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nViewTimes: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NViewTimes)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nViewTimes (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nViewTimes: ", p), err)
  }
  return err
}

func (p *USER_RESOURCE_SAMPLE) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nClickTimes", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nClickTimes: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NClickTimes)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nClickTimes (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nClickTimes: ", p), err)
  }
  return err
}

func (p *USER_RESOURCE_SAMPLE) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("USER_RESOURCE_SAMPLE(%+v)", *p)
}

// ************************************************
// 	用户投票数据结构
// 	nId					投票id
// 	nUserId				用户id
// 	nVotingId			投票活动id
// 	nDataId				被投票的媒资id
// 	nVoteNum			投票次数
// 	tUpdateTime			最近一次投票时间
// *************************************************
// 
// Attributes:
//  - NId
//  - NUserId
//  - NVotingId
//  - NDataId
//  - NVoteNum
//  - TUpdateTime
type USER_VOTE struct {
  NId         int64            `thrift:"nId,1,required" db:"nId" json:"nId"`
  NUserId     com_types.INTDA  `thrift:"nUserId,2,required" db:"nUserId" json:"nUserId"`
  NVotingId   int64            `thrift:"nVotingId,3,required" db:"nVotingId" json:"nVotingId"`
  NDataId     com_types.PRG_ID `thrift:"nDataId,4,required" db:"nDataId" json:"nDataId"`
  NVoteNum    int32            `thrift:"nVoteNum,5,required" db:"nVoteNum" json:"nVoteNum"`
  TUpdateTime int64            `thrift:"tUpdateTime,6,required" db:"tUpdateTime" json:"tUpdateTime"`
}

func NewUSER_VOTE() *USER_VOTE {
  return &USER_VOTE{}
}

func (p *USER_VOTE) GetNId() int64 {
  return p.NId
}

func (p *USER_VOTE) GetNUserId() com_types.INTDA {
  return p.NUserId
}

func (p *USER_VOTE) GetNVotingId() int64 {
  return p.NVotingId
}

func (p *USER_VOTE) GetNDataId() com_types.PRG_ID {
  return p.NDataId
}

func (p *USER_VOTE) GetNVoteNum() int32 {
  return p.NVoteNum
}

func (p *USER_VOTE) GetTUpdateTime() int64 {
  return p.TUpdateTime
}
func (p *USER_VOTE) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNId bool = false
  var issetNUserId bool = false
  var issetNVotingId bool = false
  var issetNDataId bool = false
  var issetNVoteNum bool = false
  var issetTUpdateTime bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNId = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNUserId = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetNVotingId = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetNDataId = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetNVoteNum = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetTUpdateTime = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NId is not set"))
  }
  if !issetNUserId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NUserId is not set"))
  }
  if !issetNVotingId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NVotingId is not set"))
  }
  if !issetNDataId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NDataId is not set"))
  }
  if !issetNVoteNum {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NVoteNum is not set"))
  }
  if !issetTUpdateTime {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TUpdateTime is not set"))
  }
  return nil
}

func (p *USER_VOTE) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.NId = v
  }
  return nil
}

func (p *USER_VOTE) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := com_types.INTDA(v)
    p.NUserId = temp
  }
  return nil
}

func (p *USER_VOTE) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.NVotingId = v
  }
  return nil
}

func (p *USER_VOTE) ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    temp := com_types.PRG_ID(v)
    p.NDataId = temp
  }
  return nil
}

func (p *USER_VOTE) ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.NVoteNum = v
  }
  return nil
}

func (p *USER_VOTE) ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.TUpdateTime = v
  }
  return nil
}

func (p *USER_VOTE) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("USER_VOTE"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
    if err := p.writeField4(oprot); err != nil {
      return err
    }
    if err := p.writeField5(oprot); err != nil {
      return err
    }
    if err := p.writeField6(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *USER_VOTE) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nId (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nId: ", p), err)
  }
  return err
}

func (p *USER_VOTE) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nUserId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nUserId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NUserId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nUserId (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nUserId: ", p), err)
  }
  return err
}

func (p *USER_VOTE) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nVotingId", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nVotingId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NVotingId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nVotingId (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nVotingId: ", p), err)
  }
  return err
}

func (p *USER_VOTE) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nDataId", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nDataId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NDataId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nDataId (4) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nDataId: ", p), err)
  }
  return err
}

func (p *USER_VOTE) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nVoteNum", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nVoteNum: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NVoteNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nVoteNum (5) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nVoteNum: ", p), err)
  }
  return err
}

func (p *USER_VOTE) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tUpdateTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:tUpdateTime: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.TUpdateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tUpdateTime (6) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:tUpdateTime: ", p), err)
  }
  return err
}

func (p *USER_VOTE) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("USER_VOTE(%+v)", *p)
}

// ************************************************
// 	用户搜索历史数据结构
// 	nId					搜索历史id
// 	nUid				用户id
// 	nPid				节目id
// 	strSearchName		搜索名字
// 	tTimestamp			搜索时间
// *************************************************
// 
// Attributes:
//  - NId
//  - NUid
//  - NPid
//  - StrSearchName
//  - TTimestamp
type USER_SEARCH_HISTORY struct {
  NId           int64            `thrift:"nId,1,required" db:"nId" json:"nId"`
  NUid          com_types.INTDA  `thrift:"nUid,2,required" db:"nUid" json:"nUid"`
  NPid          com_types.PRG_ID `thrift:"nPid,3,required" db:"nPid" json:"nPid"`
  StrSearchName string           `thrift:"strSearchName,4,required" db:"strSearchName" json:"strSearchName"`
  TTimestamp    int64            `thrift:"tTimestamp,5,required" db:"tTimestamp" json:"tTimestamp"`
}

func NewUSER_SEARCH_HISTORY() *USER_SEARCH_HISTORY {
  return &USER_SEARCH_HISTORY{}
}

func (p *USER_SEARCH_HISTORY) GetNId() int64 {
  return p.NId
}

func (p *USER_SEARCH_HISTORY) GetNUid() com_types.INTDA {
  return p.NUid
}

func (p *USER_SEARCH_HISTORY) GetNPid() com_types.PRG_ID {
  return p.NPid
}

func (p *USER_SEARCH_HISTORY) GetStrSearchName() string {
  return p.StrSearchName
}

func (p *USER_SEARCH_HISTORY) GetTTimestamp() int64 {
  return p.TTimestamp
}
func (p *USER_SEARCH_HISTORY) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNId bool = false
  var issetNUid bool = false
  var issetNPid bool = false
  var issetStrSearchName bool = false
  var issetTTimestamp bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNId = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNUid = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetNPid = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetStrSearchName = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetTTimestamp = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NId is not set"))
  }
  if !issetNUid {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NUid is not set"))
  }
  if !issetNPid {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NPid is not set"))
  }
  if !issetStrSearchName {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StrSearchName is not set"))
  }
  if !issetTTimestamp {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TTimestamp is not set"))
  }
  return nil
}

func (p *USER_SEARCH_HISTORY) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.NId = v
  }
  return nil
}

func (p *USER_SEARCH_HISTORY) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := com_types.INTDA(v)
    p.NUid = temp
  }
  return nil
}

func (p *USER_SEARCH_HISTORY) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := com_types.PRG_ID(v)
    p.NPid = temp
  }
  return nil
}

func (p *USER_SEARCH_HISTORY) ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.StrSearchName = v
  }
  return nil
}

func (p *USER_SEARCH_HISTORY) ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.TTimestamp = v
  }
  return nil
}

func (p *USER_SEARCH_HISTORY) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("USER_SEARCH_HISTORY"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
    if err := p.writeField4(oprot); err != nil {
      return err
    }
    if err := p.writeField5(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *USER_SEARCH_HISTORY) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nId (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nId: ", p), err)
  }
  return err
}

func (p *USER_SEARCH_HISTORY) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nUid", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nUid: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NUid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nUid (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nUid: ", p), err)
  }
  return err
}

func (p *USER_SEARCH_HISTORY) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nPid", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nPid: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NPid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nPid (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nPid: ", p), err)
  }
  return err
}

func (p *USER_SEARCH_HISTORY) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("strSearchName", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:strSearchName: ", p), err)
  }
  if err := oprot.WriteString(string(p.StrSearchName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.strSearchName (4) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:strSearchName: ", p), err)
  }
  return err
}

func (p *USER_SEARCH_HISTORY) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tTimestamp", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tTimestamp: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.TTimestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tTimestamp (5) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tTimestamp: ", p), err)
  }
  return err
}

func (p *USER_SEARCH_HISTORY) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("USER_SEARCH_HISTORY(%+v)", *p)
}

// Attributes:
//  - ERankType
//  - EOp
//  - EPeriod
//  - NFirstIdx
//  - NSecondIdx
//  - NRanking
type RankInfo struct {
  ERankType  int32 `thrift:"eRankType,1,required" db:"eRankType" json:"eRankType"`
  EOp        int32 `thrift:"eOp,2,required" db:"eOp" json:"eOp"`
  EPeriod    int32 `thrift:"ePeriod,3,required" db:"ePeriod" json:"ePeriod"`
  NFirstIdx  int32 `thrift:"nFirstIdx,4,required" db:"nFirstIdx" json:"nFirstIdx"`
  NSecondIdx int32 `thrift:"nSecondIdx,5,required" db:"nSecondIdx" json:"nSecondIdx"`
  NRanking   int32 `thrift:"nRanking,6,required" db:"nRanking" json:"nRanking"`
}

func NewRankInfo() *RankInfo {
  return &RankInfo{}
}

func (p *RankInfo) GetERankType() int32 {
  return p.ERankType
}

func (p *RankInfo) GetEOp() int32 {
  return p.EOp
}

func (p *RankInfo) GetEPeriod() int32 {
  return p.EPeriod
}

func (p *RankInfo) GetNFirstIdx() int32 {
  return p.NFirstIdx
}

func (p *RankInfo) GetNSecondIdx() int32 {
  return p.NSecondIdx
}

func (p *RankInfo) GetNRanking() int32 {
  return p.NRanking
}
func (p *RankInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetERankType bool = false
  var issetEOp bool = false
  var issetEPeriod bool = false
  var issetNFirstIdx bool = false
  var issetNSecondIdx bool = false
  var issetNRanking bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetERankType = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetEOp = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetEPeriod = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetNFirstIdx = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetNSecondIdx = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetNRanking = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetERankType {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ERankType is not set"))
  }
  if !issetEOp {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EOp is not set"))
  }
  if !issetEPeriod {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EPeriod is not set"))
  }
  if !issetNFirstIdx {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NFirstIdx is not set"))
  }
  if !issetNSecondIdx {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSecondIdx is not set"))
  }
  if !issetNRanking {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NRanking is not set"))
  }
  return nil
}

func (p *RankInfo) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.ERankType = v
  }
  return nil
}

func (p *RankInfo) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.EOp = v
  }
  return nil
}

func (p *RankInfo) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.EPeriod = v
  }
  return nil
}

func (p *RankInfo) ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.NFirstIdx = v
  }
  return nil
}

func (p *RankInfo) ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.NSecondIdx = v
  }
  return nil
}

func (p *RankInfo) ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.NRanking = v
  }
  return nil
}

func (p *RankInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RankInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
    if err := p.writeField4(oprot); err != nil {
      return err
    }
    if err := p.writeField5(oprot); err != nil {
      return err
    }
    if err := p.writeField6(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *RankInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("eRankType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:eRankType: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.ERankType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.eRankType (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:eRankType: ", p), err)
  }
  return err
}

func (p *RankInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("eOp", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:eOp: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.EOp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.eOp (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:eOp: ", p), err)
  }
  return err
}

func (p *RankInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ePeriod", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ePeriod: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.EPeriod)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ePeriod (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ePeriod: ", p), err)
  }
  return err
}

func (p *RankInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nFirstIdx", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nFirstIdx: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NFirstIdx)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nFirstIdx (4) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nFirstIdx: ", p), err)
  }
  return err
}

func (p *RankInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nSecondIdx", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nSecondIdx: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NSecondIdx)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nSecondIdx (5) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nSecondIdx: ", p), err)
  }
  return err
}

func (p *RankInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nRanking", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:nRanking: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NRanking)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nRanking (6) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:nRanking: ", p), err)
  }
  return err
}

func (p *RankInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RankInfo(%+v)", *p)
}

// Attributes:
//  - NPid
//  - NNum
type RankItem struct {
  NPid com_types.PRG_ID `thrift:"nPid,1,required" db:"nPid" json:"nPid"`
  NNum int32            `thrift:"nNum,2,required" db:"nNum" json:"nNum"`
}

func NewRankItem() *RankItem {
  return &RankItem{}
}

func (p *RankItem) GetNPid() com_types.PRG_ID {
  return p.NPid
}

func (p *RankItem) GetNNum() int32 {
  return p.NNum
}
func (p *RankItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNPid bool = false
  var issetNNum bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNPid = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNNum = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNPid {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NPid is not set"))
  }
  if !issetNNum {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NNum is not set"))
  }
  return nil
}

func (p *RankItem) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := com_types.PRG_ID(v)
    p.NPid = temp
  }
  return nil
}

func (p *RankItem) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.NNum = v
  }
  return nil
}

func (p *RankItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RankItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *RankItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nPid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nPid: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NPid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nPid (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nPid: ", p), err)
  }
  return err
}

func (p *RankItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nNum", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nNum: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nNum (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nNum: ", p), err)
  }
  return err
}

func (p *RankItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RankItem(%+v)", *p)
}

// Attributes:
//  - NSubjId
//  - StrValue
type GuessSubjSingle struct {
  NSubjId  com_types.SUBJECT_ID `thrift:"nSubjId,1,required" db:"nSubjId" json:"nSubjId"`
  StrValue string               `thrift:"strValue,2,required" db:"strValue" json:"strValue"`
}

func NewGuessSubjSingle() *GuessSubjSingle {
  return &GuessSubjSingle{}
}

func (p *GuessSubjSingle) GetNSubjId() com_types.SUBJECT_ID {
  return p.NSubjId
}

func (p *GuessSubjSingle) GetStrValue() string {
  return p.StrValue
}
func (p *GuessSubjSingle) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNSubjId bool = false
  var issetStrValue bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNSubjId = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetStrValue = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNSubjId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSubjId is not set"))
  }
  if !issetStrValue {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StrValue is not set"))
  }
  return nil
}

func (p *GuessSubjSingle) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := com_types.SUBJECT_ID(v)
    p.NSubjId = temp
  }
  return nil
}

func (p *GuessSubjSingle) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.StrValue = v
  }
  return nil
}

func (p *GuessSubjSingle) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GuessSubjSingle"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *GuessSubjSingle) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nSubjId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nSubjId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NSubjId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nSubjId (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nSubjId: ", p), err)
  }
  return err
}

func (p *GuessSubjSingle) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("strValue", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:strValue: ", p), err)
  }
  if err := oprot.WriteString(string(p.StrValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.strValue (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:strValue: ", p), err)
  }
  return err
}

func (p *GuessSubjSingle) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GuessSubjSingle(%+v)", *p)
}

// ************************************************
// 	redis广播消息公共字段
// 	nLength				总长度(序列化之后的长度)
// 	nCmdID				命令ID
// 	nSubCmdID			子命令ID
// 	nSendSrvTypeID		是哪个SrvTypeID发出的消息
// *************************************************
// 
// Attributes:
//  - NLength
//  - NCmdID
//  - NSubCmdID
//  - NSendSrvTypeID
//  - NUserId
//  - NResourceId
//  - StUSample
type RDSPKG_USER_RESOURCE struct {
  NLength        int32                 `thrift:"nLength,1,required" db:"nLength" json:"nLength"`
  NCmdID         int32                 `thrift:"nCmdID,2,required" db:"nCmdID" json:"nCmdID"`
  NSubCmdID      int32                 `thrift:"nSubCmdID,3,required" db:"nSubCmdID" json:"nSubCmdID"`
  NSendSrvTypeID int32                 `thrift:"nSendSrvTypeID,4,required" db:"nSendSrvTypeID" json:"nSendSrvTypeID"`
  NUserId        com_types.INTDA       `thrift:"nUserId,5,required" db:"nUserId" json:"nUserId"`
  NResourceId    int64                 `thrift:"nResourceId,6,required" db:"nResourceId" json:"nResourceId"`
  StUSample      *USER_RESOURCE_SAMPLE `thrift:"stUSample,7,required" db:"stUSample" json:"stUSample"`
}

func NewRDSPKG_USER_RESOURCE() *RDSPKG_USER_RESOURCE {
  return &RDSPKG_USER_RESOURCE{
    NCmdID: 2510,
  }
}

func (p *RDSPKG_USER_RESOURCE) GetNLength() int32 {
  return p.NLength
}

func (p *RDSPKG_USER_RESOURCE) GetNCmdID() int32 {
  return p.NCmdID
}

func (p *RDSPKG_USER_RESOURCE) GetNSubCmdID() int32 {
  return p.NSubCmdID
}

func (p *RDSPKG_USER_RESOURCE) GetNSendSrvTypeID() int32 {
  return p.NSendSrvTypeID
}

func (p *RDSPKG_USER_RESOURCE) GetNUserId() com_types.INTDA {
  return p.NUserId
}

func (p *RDSPKG_USER_RESOURCE) GetNResourceId() int64 {
  return p.NResourceId
}

var RDSPKG_USER_RESOURCE_StUSample_DEFAULT *USER_RESOURCE_SAMPLE

func (p *RDSPKG_USER_RESOURCE) GetStUSample() *USER_RESOURCE_SAMPLE {
  if !p.IsSetStUSample() {
    return RDSPKG_USER_RESOURCE_StUSample_DEFAULT
  }
  return p.StUSample
}
func (p *RDSPKG_USER_RESOURCE) IsSetStUSample() bool {
  return p.StUSample != nil
}

func (p *RDSPKG_USER_RESOURCE) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNLength bool = false
  var issetNCmdID bool = false
  var issetNSubCmdID bool = false
  var issetNSendSrvTypeID bool = false
  var issetNUserId bool = false
  var issetNResourceId bool = false
  var issetStUSample bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNLength = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNCmdID = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetNSubCmdID = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetNSendSrvTypeID = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetNUserId = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetNResourceId = true
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
      issetStUSample = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNLength {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NLength is not set"))
  }
  if !issetNCmdID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NCmdID is not set"))
  }
  if !issetNSubCmdID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSubCmdID is not set"))
  }
  if !issetNSendSrvTypeID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSendSrvTypeID is not set"))
  }
  if !issetNUserId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NUserId is not set"))
  }
  if !issetNResourceId {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NResourceId is not set"))
  }
  if !issetStUSample {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StUSample is not set"))
  }
  return nil
}

func (p *RDSPKG_USER_RESOURCE) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.NLength = v
  }
  return nil
}

func (p *RDSPKG_USER_RESOURCE) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.NCmdID = v
  }
  return nil
}

func (p *RDSPKG_USER_RESOURCE) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.NSubCmdID = v
  }
  return nil
}

func (p *RDSPKG_USER_RESOURCE) ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.NSendSrvTypeID = v
  }
  return nil
}

func (p *RDSPKG_USER_RESOURCE) ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    temp := com_types.INTDA(v)
    p.NUserId = temp
  }
  return nil
}

func (p *RDSPKG_USER_RESOURCE) ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.NResourceId = v
  }
  return nil
}

func (p *RDSPKG_USER_RESOURCE) ReadField7(iprot thrift.TProtocol) error {
  p.StUSample = &USER_RESOURCE_SAMPLE{}
  if err := p.StUSample.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StUSample), err)
  }
  return nil
}

func (p *RDSPKG_USER_RESOURCE) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RDSPKG_USER_RESOURCE"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
    if err := p.writeField4(oprot); err != nil {
      return err
    }
    if err := p.writeField5(oprot); err != nil {
      return err
    }
    if err := p.writeField6(oprot); err != nil {
      return err
    }
    if err := p.writeField7(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *RDSPKG_USER_RESOURCE) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nLength", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nLength: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NLength)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nLength (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nLength: ", p), err)
  }
  return err
}

func (p *RDSPKG_USER_RESOURCE) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nCmdID", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nCmdID: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NCmdID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nCmdID (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nCmdID: ", p), err)
  }
  return err
}

func (p *RDSPKG_USER_RESOURCE) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nSubCmdID", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nSubCmdID: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NSubCmdID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nSubCmdID (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nSubCmdID: ", p), err)
  }
  return err
}

func (p *RDSPKG_USER_RESOURCE) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nSendSrvTypeID", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nSendSrvTypeID: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NSendSrvTypeID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nSendSrvTypeID (4) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nSendSrvTypeID: ", p), err)
  }
  return err
}

func (p *RDSPKG_USER_RESOURCE) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nUserId", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nUserId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NUserId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nUserId (5) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nUserId: ", p), err)
  }
  return err
}

func (p *RDSPKG_USER_RESOURCE) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nResourceId", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:nResourceId: ", p), err)
  }
  if err := oprot.WriteI64(int64(p.NResourceId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nResourceId (6) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:nResourceId: ", p), err)
  }
  return err
}

func (p *RDSPKG_USER_RESOURCE) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stUSample", thrift.STRUCT, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:stUSample: ", p), err)
  }
  if err := p.StUSample.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StUSample), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:stUSample: ", p), err)
  }
  return err
}

func (p *RDSPKG_USER_RESOURCE) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RDSPKG_USER_RESOURCE(%+v)", *p)
}

// Attributes:
//  - NLength
//  - NCmdID
//  - NSubCmdID
//  - NSendSrvTypeID
//  - VecHitsPids
//  - VecPraisePids
type RDSPKG_LOOP_HITS_PROGRAMS struct {
  NLength        int32   `thrift:"nLength,1,required" db:"nLength" json:"nLength"`
  NCmdID         int32   `thrift:"nCmdID,2,required" db:"nCmdID" json:"nCmdID"`
  NSubCmdID      int32   `thrift:"nSubCmdID,3,required" db:"nSubCmdID" json:"nSubCmdID"`
  NSendSrvTypeID int32   `thrift:"nSendSrvTypeID,4,required" db:"nSendSrvTypeID" json:"nSendSrvTypeID"`
  VecHitsPids    []int64 `thrift:"vecHitsPids,5,required" db:"vecHitsPids" json:"vecHitsPids"`
  VecPraisePids  []int64 `thrift:"vecPraisePids,6,required" db:"vecPraisePids" json:"vecPraisePids"`
}

func NewRDSPKG_LOOP_HITS_PROGRAMS() *RDSPKG_LOOP_HITS_PROGRAMS {
  return &RDSPKG_LOOP_HITS_PROGRAMS{
    NCmdID: 2512,
  }
}

func (p *RDSPKG_LOOP_HITS_PROGRAMS) GetNLength() int32 {
  return p.NLength
}

func (p *RDSPKG_LOOP_HITS_PROGRAMS) GetNCmdID() int32 {
  return p.NCmdID
}

func (p *RDSPKG_LOOP_HITS_PROGRAMS) GetNSubCmdID() int32 {
  return p.NSubCmdID
}

func (p *RDSPKG_LOOP_HITS_PROGRAMS) GetNSendSrvTypeID() int32 {
  return p.NSendSrvTypeID
}

func (p *RDSPKG_LOOP_HITS_PROGRAMS) GetVecHitsPids() []int64 {
  return p.VecHitsPids
}

func (p *RDSPKG_LOOP_HITS_PROGRAMS) GetVecPraisePids() []int64 {
  return p.VecPraisePids
}
func (p *RDSPKG_LOOP_HITS_PROGRAMS) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNLength bool = false
  var issetNCmdID bool = false
  var issetNSubCmdID bool = false
  var issetNSendSrvTypeID bool = false
  var issetVecHitsPids bool = false
  var issetVecPraisePids bool = false

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP {
      break
    }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNLength = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNCmdID = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetNSubCmdID = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetNSendSrvTypeID = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetVecHitsPids = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetVecPraisePids = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNLength {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NLength is not set"))
  }
  if !issetNCmdID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NCmdID is not set"))
  }
  if !issetNSubCmdID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSubCmdID is not set"))
  }
  if !issetNSendSrvTypeID {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSendSrvTypeID is not set"))
  }
  if !issetVecHitsPids {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecHitsPids is not set"))
  }
  if !issetVecPraisePids {
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VecPraisePids is not set"))
  }
  return nil
}

func (p *RDSPKG_LOOP_HITS_PROGRAMS) ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.NLength = v
  }
  return nil
}

func (p *RDSPKG_LOOP_HITS_PROGRAMS) ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.NCmdID = v
  }
  return nil
}

func (p *RDSPKG_LOOP_HITS_PROGRAMS) ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.NSubCmdID = v
  }
  return nil
}

func (p *RDSPKG_LOOP_HITS_PROGRAMS) ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.NSendSrvTypeID = v
  }
  return nil
}

func (p *RDSPKG_LOOP_HITS_PROGRAMS) ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.VecHitsPids = tSlice
  for i := 0; i < size; i++ {
    var _elem3 int64
    if v, err := iprot.ReadI64(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem3 = v
    }
    p.VecHitsPids = append(p.VecHitsPids, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RDSPKG_LOOP_HITS_PROGRAMS) ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.VecPraisePids = tSlice
  for i := 0; i < size; i++ {
    var _elem4 int64
    if v, err := iprot.ReadI64(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem4 = v
    }
    p.VecPraisePids = append(p.VecPraisePids, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RDSPKG_LOOP_HITS_PROGRAMS) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RDSPKG_LOOP_HITS_PROGRAMS"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
  }
  if p != nil {
    if err := p.writeField1(oprot); err != nil {
      return err
    }
    if err := p.writeField2(oprot); err != nil {
      return err
    }
    if err := p.writeField3(oprot); err != nil {
      return err
    }
    if err := p.writeField4(oprot); err != nil {
      return err
    }
    if err := p.writeField5(oprot); err != nil {
      return err
    }
    if err := p.writeField6(oprot); err != nil {
      return err
    }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err)
  }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err)
  }
  return nil
}

func (p *RDSPKG_LOOP_HITS_PROGRAMS) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nLength", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nLength: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NLength)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nLength (1) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nLength: ", p), err)
  }
  return err
}

func (p *RDSPKG_LOOP_HITS_PROGRAMS) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nCmdID", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nCmdID: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NCmdID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nCmdID (2) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nCmdID: ", p), err)
  }
  return err
}

func (p *RDSPKG_LOOP_HITS_PROGRAMS) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nSubCmdID", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nSubCmdID: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NSubCmdID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nSubCmdID (3) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nSubCmdID: ", p), err)
  }
  return err
}

func (p *RDSPKG_LOOP_HITS_PROGRAMS) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nSendSrvTypeID", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nSendSrvTypeID: ", p), err)
  }
  if err := oprot.WriteI32(int32(p.NSendSrvTypeID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nSendSrvTypeID (4) field write error: ", p), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nSendSrvTypeID: ", p), err)
  }
  return err
}

func (p *RDSPKG_LOOP_HITS_PROGRAMS) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vecHitsPids", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:vecHitsPids: ", p), err)
  }
  if err := oprot.WriteListBegin(thrift.I64, len(p.VecHitsPids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VecHitsPids {
    if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:vecHitsPids: ", p), err)
  }
  return err
}

func (p *RDSPKG_LOOP_HITS_PROGRAMS) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vecPraisePids", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:vecPraisePids: ", p), err)
  }
  if err := oprot.WriteListBegin(thrift.I64, len(p.VecPraisePids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VecPraisePids {
    if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:vecPraisePids: ", p), err)
  }
  return err
}

func (p *RDSPKG_LOOP_HITS_PROGRAMS) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RDSPKG_LOOP_HITS_PROGRAMS(%+v)", *p)
}

