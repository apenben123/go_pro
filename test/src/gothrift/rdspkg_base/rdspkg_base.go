// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rdspkg_base

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type XtEnumRedisCmdID int64
const (
  XtEnumRedisCmdID_SYN_LITTLE_MSG XtEnumRedisCmdID = 1
  XtEnumRedisCmdID_SYN_USER_STATUS XtEnumRedisCmdID = 10
  XtEnumRedisCmdID_SYN_USER_MSG_COUNT XtEnumRedisCmdID = 20
  XtEnumRedisCmdID_SYN_USER_DIR XtEnumRedisCmdID = 30
  XtEnumRedisCmdID_SYN_SYSTEM_SETTING_DATA XtEnumRedisCmdID = 40
  XtEnumRedisCmdID_SYN_ACCOUNT_CREATE XtEnumRedisCmdID = 100
  XtEnumRedisCmdID_SYN_ACCOUNT_DEL XtEnumRedisCmdID = 101
  XtEnumRedisCmdID_SYN_ACCOUNT_STYLE_CREATE XtEnumRedisCmdID = 102
  XtEnumRedisCmdID_SYN_ACCOUNT_STYLE_DEL XtEnumRedisCmdID = 103
  XtEnumRedisCmdID_SYN_ACCOUNT_ICON_UPDATE XtEnumRedisCmdID = 104
  XtEnumRedisCmdID_SYN_ACCOUNT_ICON_DEL XtEnumRedisCmdID = 105
  XtEnumRedisCmdID_SYN_MEMBER_CREATE XtEnumRedisCmdID = 110
  XtEnumRedisCmdID_SYN_MEMBER_DEL XtEnumRedisCmdID = 111
  XtEnumRedisCmdID_SYN_MEMBER_ACCOUNT_CREATE XtEnumRedisCmdID = 120
  XtEnumRedisCmdID_SYN_MEMBER_ACCOUNT_DEL XtEnumRedisCmdID = 121
  XtEnumRedisCmdID_SYN_DA_BOSS_CREATE XtEnumRedisCmdID = 122
  XtEnumRedisCmdID_SYN_GROUP_PORTAL_INFO XtEnumRedisCmdID = 125
  XtEnumRedisCmdID_SYN_HOME_CREATE XtEnumRedisCmdID = 130
  XtEnumRedisCmdID_SYN_HOME_DEL XtEnumRedisCmdID = 131
  XtEnumRedisCmdID_SYN_HOME_MEMBER_CREATE XtEnumRedisCmdID = 140
  XtEnumRedisCmdID_SYN_HOME_MEMBER_DEL XtEnumRedisCmdID = 141
  XtEnumRedisCmdID_SYN_ADDRESS_CREATE XtEnumRedisCmdID = 150
  XtEnumRedisCmdID_SYN_HOME_ADDRESS_CREATE XtEnumRedisCmdID = 160
  XtEnumRedisCmdID_SYN_ROLE_INFO XtEnumRedisCmdID = 165
  XtEnumRedisCmdID_SYN_DEVICE_CREATE XtEnumRedisCmdID = 170
  XtEnumRedisCmdID_SYN_DEVICE_ACCOUNT_DEL XtEnumRedisCmdID = 175
  XtEnumRedisCmdID_SYN_ADDRESS_DEVICE_CREATE XtEnumRedisCmdID = 180
  XtEnumRedisCmdID_SYN_PORTAL_GROUP_INFO XtEnumRedisCmdID = 181
  XtEnumRedisCmdID_SYN_PORTAL_MODEL_INFO XtEnumRedisCmdID = 182
  XtEnumRedisCmdID_SYN_USER_PORTAL_LINK XtEnumRedisCmdID = 183
  XtEnumRedisCmdID_SYN_TARGET_THEME_DATA XtEnumRedisCmdID = 184
  XtEnumRedisCmdID_SYN_ICON_CREATE XtEnumRedisCmdID = 190
  XtEnumRedisCmdID_SYN_ASSET_INFO XtEnumRedisCmdID = 191
  XtEnumRedisCmdID_SYN_USER_LABEL_INFO XtEnumRedisCmdID = 192
  XtEnumRedisCmdID_SYN_USER_THIRD_AUTH XtEnumRedisCmdID = 193
  XtEnumRedisCmdID_SYN_BUSINESS_RECORD XtEnumRedisCmdID = 194
  XtEnumRedisCmdID_SYN_RIGHT_INFO XtEnumRedisCmdID = 195
  XtEnumRedisCmdID_SYN_OPERATOR_MGR_INFO XtEnumRedisCmdID = 196
  XtEnumRedisCmdID_SYN_CHARGE_SYS_INFO XtEnumRedisCmdID = 197
  XtEnumRedisCmdID_SYN_ACCOUNT_TOKEN_MGR_INFO XtEnumRedisCmdID = 198
  XtEnumRedisCmdID_SYN_USER_GROUP_INFO XtEnumRedisCmdID = 199
  XtEnumRedisCmdID_SYN_APP_DATA XtEnumRedisCmdID = 220
  XtEnumRedisCmdID_SYN_APP_EDU_DATA XtEnumRedisCmdID = 231
  XtEnumRedisCmdID_SYN_CHANNEL_STORE XtEnumRedisCmdID = 300
  XtEnumRedisCmdID_SYN_VIDEO_INFO XtEnumRedisCmdID = 310
  XtEnumRedisCmdID_SYN_VIDEO_EXTERN_INFO XtEnumRedisCmdID = 320
  XtEnumRedisCmdID_DTVS_SYN_CHANNEL_PROGRAM_INFO XtEnumRedisCmdID = 330
  XtEnumRedisCmdID_DTVS_SYN_CHANNEL_HIS_PROGRAM_INFO XtEnumRedisCmdID = 340
  XtEnumRedisCmdID_DTVS_SYN_USER_SCORE_INFO XtEnumRedisCmdID = 350
  XtEnumRedisCmdID_SYN_PROGRAM_PROMOTION_INFO XtEnumRedisCmdID = 360
  XtEnumRedisCmdID_SYN_PROGRAM_PROMOTION XtEnumRedisCmdID = 361
  XtEnumRedisCmdID_SYN_WEATHER_INFO XtEnumRedisCmdID = 370
  XtEnumRedisCmdID_SYN_BARRAGE_INFO XtEnumRedisCmdID = 371
  XtEnumRedisCmdID_SYN_VIDEO_SERIES_ID_INFO XtEnumRedisCmdID = 380
  XtEnumRedisCmdID_SYN_VIDEO_SERIES_ID_EXTERN_INFO XtEnumRedisCmdID = 390
  XtEnumRedisCmdID_SYN_EVENT_SERIES_ID_INFO XtEnumRedisCmdID = 400
  XtEnumRedisCmdID_SYN_EVENT_SERIES_ID_EXTERN_INFO XtEnumRedisCmdID = 410
  XtEnumRedisCmdID_DTVS_SYN_EVENT_SERIES_BASIC_INFO XtEnumRedisCmdID = 411
  XtEnumRedisCmdID_SYN_PROGRAM_COMPOSITE_INFO XtEnumRedisCmdID = 420
  XtEnumRedisCmdID_DTVS_SYN_PROGRAM_DEMAND_INFO XtEnumRedisCmdID = 430
  XtEnumRedisCmdID_DTVS_SYN_PROGRAM_RANK_INFO XtEnumRedisCmdID = 431
  XtEnumRedisCmdID_DTVS_SYN_CHANNEL_SHOW_RULE XtEnumRedisCmdID = 440
  XtEnumRedisCmdID_DTVS_SYN_CORE_MARK_INFO XtEnumRedisCmdID = 450
  XtEnumRedisCmdID_DTVS_SYN_USER_FAVORITE_INFO XtEnumRedisCmdID = 460
  XtEnumRedisCmdID_DTVS_SYN_USER_SETTING_INFO XtEnumRedisCmdID = 470
  XtEnumRedisCmdID_DTVS_SYN_WATCHING_CHANNEL_INFO XtEnumRedisCmdID = 480
  XtEnumRedisCmdID_DTVS_SYN_USER_HISTORY_INFO XtEnumRedisCmdID = 490
  XtEnumRedisCmdID_DTVS_SYN_USER_SEARCH_HISTORY_INFO XtEnumRedisCmdID = 492
  XtEnumRedisCmdID_DTVS_SYN_USER_HITS_INFO XtEnumRedisCmdID = 495
  XtEnumRedisCmdID_DTVS_SYN_USER_LOCK_INFO XtEnumRedisCmdID = 500
  XtEnumRedisCmdID_DTVS_SYN_USER_CHANNEL_PERSONAL XtEnumRedisCmdID = 510
  XtEnumRedisCmdID_DTVS_SYN_PROGRAM_GROUP_INFO XtEnumRedisCmdID = 520
  XtEnumRedisCmdID_DTVS_SYN_PROGRAM_PACKAGE_INFO XtEnumRedisCmdID = 530
  XtEnumRedisCmdID_DTVS_SYN_PROGRAM_PRICE_INFO XtEnumRedisCmdID = 540
  XtEnumRedisCmdID_SYN_MUSIC_STORE XtEnumRedisCmdID = 550
  XtEnumRedisCmdID_DTVS_SYN_USER_ORDER_INFO XtEnumRedisCmdID = 560
  XtEnumRedisCmdID_DTVS_SYN_CHANNEL_GROUP_INFO XtEnumRedisCmdID = 570
  XtEnumRedisCmdID_DTVS_SYN_CHANNEL_GROUP_DESC XtEnumRedisCmdID = 580
  XtEnumRedisCmdID_SYN_SEARCH_HOT_KEY_INFO XtEnumRedisCmdID = 590
  XtEnumRedisCmdID_DTVS_SYN_USER_PRAISE_INFO XtEnumRedisCmdID = 600
  XtEnumRedisCmdID_DTVS_SYN_USER_COMMENT_INFO XtEnumRedisCmdID = 605
  XtEnumRedisCmdID_DTVS_SYN_LABEL_CHANGE_INFO XtEnumRedisCmdID = 610
  XtEnumRedisCmdID_DTVS_SYN_MONITOR_STORE XtEnumRedisCmdID = 620
  XtEnumRedisCmdID_DTVS_SYN_MONITOR_GROUP_STORE XtEnumRedisCmdID = 630
  XtEnumRedisCmdID_DTVS_SYN_MONITOR_GROUP_INFO XtEnumRedisCmdID = 640
  XtEnumRedisCmdID_DTVS_SYN_COLUMN_INFO XtEnumRedisCmdID = 650
  XtEnumRedisCmdID_DTVS_SYN_COLUMN_PROGRAM XtEnumRedisCmdID = 660
  XtEnumRedisCmdID_DTVS_SYN_COLUMN_PROGRAM_LIST XtEnumRedisCmdID = 661
  XtEnumRedisCmdID_DTVS_SYN_MOSAIC_CHANNEL_INFO XtEnumRedisCmdID = 670
  XtEnumRedisCmdID_DTVS_SYN_PROGRAM_GROUP_MAP_INFO XtEnumRedisCmdID = 680
  XtEnumRedisCmdID_DTVS_SYN_COLUMN_RIGHT_INFO XtEnumRedisCmdID = 690
  XtEnumRedisCmdID_DTVS_SYN_PROGRAM_HITS_INFO XtEnumRedisCmdID = 700
  XtEnumRedisCmdID_DTVS_SYN_USER_LOCAL_CHANNEL XtEnumRedisCmdID = 710
  XtEnumRedisCmdID_SYN_BUSINESS_PARTNER XtEnumRedisCmdID = 720
  XtEnumRedisCmdID_DTVS_SYNC_RECORD_CHANNEL_INFO XtEnumRedisCmdID = 730
  XtEnumRedisCmdID_DTVS_SYNC_RECORD_SERVER_INFO XtEnumRedisCmdID = 731
  XtEnumRedisCmdID_SYN_SENSITIVE_WORD_INFO XtEnumRedisCmdID = 740
  XtEnumRedisCmdID_SYN_POLYPHONE_DATA XtEnumRedisCmdID = 741
  XtEnumRedisCmdID_DTVS_SYN_PROGRAM_RECORD XtEnumRedisCmdID = 750
  XtEnumRedisCmdID_SYN_STAR_INFO XtEnumRedisCmdID = 760
  XtEnumRedisCmdID_SYN_BAIKE_RELATION XtEnumRedisCmdID = 761
  XtEnumRedisCmdID_DTVS_SYN_DUPLICATE_PROGRAM XtEnumRedisCmdID = 770
  XtEnumRedisCmdID_SYN_VIDEO_SERIES_EDUCATION_INFO XtEnumRedisCmdID = 780
  XtEnumRedisCmdID_SYN_VIDEO_SERIES_MUSIC_INFO XtEnumRedisCmdID = 790
  XtEnumRedisCmdID_DTVS_SYN_STREAM_DATA_INFO XtEnumRedisCmdID = 825
  XtEnumRedisCmdID_SYN_TOURISM_ROUTE_INFO XtEnumRedisCmdID = 800
  XtEnumRedisCmdID_SYN_TOURISM_TICKET_INFO XtEnumRedisCmdID = 810
  XtEnumRedisCmdID_SYN_QAM_AREACODE_INFO XtEnumRedisCmdID = 820
  XtEnumRedisCmdID_DTVS_SYN_SUBJECT_INFO XtEnumRedisCmdID = 830
  XtEnumRedisCmdID_DTVS_SYN_SUBJECT_PROGRAM XtEnumRedisCmdID = 831
  XtEnumRedisCmdID_DTVS_SYN_PLAYLIST_INFO XtEnumRedisCmdID = 832
  XtEnumRedisCmdID_DTVS_SYN_PLAYLIST_PROGRAM XtEnumRedisCmdID = 833
  XtEnumRedisCmdID_DTVS_SYN_CHANNEL_LIMIT_INFO XtEnumRedisCmdID = 840
  XtEnumRedisCmdID_SYN_MEDIA_TYPE_INFO XtEnumRedisCmdID = 850
  XtEnumRedisCmdID_SYN_FILTER_INFO XtEnumRedisCmdID = 870
  XtEnumRedisCmdID_DTVS_SYN_LIVE_ROOM_INFO XtEnumRedisCmdID = 880
  XtEnumRedisCmdID_DTVS_SYN_LIVE_PROGRAM_INFO XtEnumRedisCmdID = 885
  XtEnumRedisCmdID_ILOG_SYN_LIVE_SESSION XtEnumRedisCmdID = 886
  XtEnumRedisCmdID_SYN_TEMPLATE_INFO XtEnumRedisCmdID = 890
  XtEnumRedisCmdID_DTVS_SYN_FILLPAD_INFO XtEnumRedisCmdID = 895
  XtEnumRedisCmdID_SYN_CONFIG_TAG_INFO XtEnumRedisCmdID = 900
  XtEnumRedisCmdID_SYN_USER_LABEL_MGR XtEnumRedisCmdID = 901
  XtEnumRedisCmdID_SYN_MEDIA_LABEL_INFO XtEnumRedisCmdID = 902
  XtEnumRedisCmdID_SYN_PUBLIC_RESOURCE_INFO XtEnumRedisCmdID = 903
  XtEnumRedisCmdID_SYN_VIDEO_SPORT_INFO XtEnumRedisCmdID = 904
  XtEnumRedisCmdID_DTVS_SYN_USER_PROFILE_INFO XtEnumRedisCmdID = 905
  XtEnumRedisCmdID_SYN_VIDEO_SERIES_EXTEND_INFO XtEnumRedisCmdID = 906
  XtEnumRedisCmdID_SYN_VIDEO_STREAM_INFO XtEnumRedisCmdID = 908
  XtEnumRedisCmdID_SYN_HOME_TYPE_INFO XtEnumRedisCmdID = 909
  XtEnumRedisCmdID_SYN_SERIES_VIDEO_INDEX XtEnumRedisCmdID = 910
  XtEnumRedisCmdID_SYN_MEDIA_TAGTYPE_INFO_MGR XtEnumRedisCmdID = 911
  XtEnumRedisCmdID_SYN_MEDIA_VISIBLE_INFO_MGR XtEnumRedisCmdID = 912
  XtEnumRedisCmdID_SYN_PROGRAM_REFERENCE_INFO XtEnumRedisCmdID = 913
  XtEnumRedisCmdID_SYN_SERIES_VIDEO_INDEX_MULTI XtEnumRedisCmdID = 914
  XtEnumRedisCmdID_DTVS_SYN_SUBJECT_SCHEDULE XtEnumRedisCmdID = 915
  XtEnumRedisCmdID_SYN_VIDEO_SERIES_SPEC_INFO XtEnumRedisCmdID = 920
  XtEnumRedisCmdID_SYN_VIDEO_SERIES_INDEX_SPEC_INFO XtEnumRedisCmdID = 921
  XtEnumRedisCmdID_SYN_T_ACCOUNT_LOGIN_HISTORY XtEnumRedisCmdID = 1000
  XtEnumRedisCmdID_SYN_WEBSOCKET_MSG XtEnumRedisCmdID = 1001
  XtEnumRedisCmdID_SYN_WEBSOCKET_CONNECT_STATUS XtEnumRedisCmdID = 1010
  XtEnumRedisCmdID_ILOGMASTER_SYN_SAVE_AV_FILE XtEnumRedisCmdID = 2011
  XtEnumRedisCmdID_ILOGMASTER_SYN_SAVE_AV_SUBFILE XtEnumRedisCmdID = 2012
  XtEnumRedisCmdID_ILOGMASTER_SYN_BLACK_CHANNEL XtEnumRedisCmdID = 2013
  XtEnumRedisCmdID_ILOGMASTER_SYN_SAVE_TRANSMIT_FILE XtEnumRedisCmdID = 2014
  XtEnumRedisCmdID_SYN_PROCESS_INFO XtEnumRedisCmdID = 2015
  XtEnumRedisCmdID_SYS_ACTIVE_SERVER_INFO XtEnumRedisCmdID = 2016
  XtEnumRedisCmdID_TSG_SYN_movie XtEnumRedisCmdID = 2020
  XtEnumRedisCmdID_TSG_SYN_poster_preview_dir XtEnumRedisCmdID = 2021
  XtEnumRedisCmdID_TSG_SYN_poster_preview_file XtEnumRedisCmdID = 2022
  XtEnumRedisCmdID_SYN_TEMP_GROUP XtEnumRedisCmdID = 2100
  XtEnumRedisCmdID_SYN_LAST_GROUP XtEnumRedisCmdID = 2101
  XtEnumRedisCmdID_SYN_EDTV_TEMPLATE_DATA XtEnumRedisCmdID = 2102
  XtEnumRedisCmdID_SYN_EDTV_INTERACTION_DATA XtEnumRedisCmdID = 2103
  XtEnumRedisCmdID_SYN_EDTV_RELATION_DATA XtEnumRedisCmdID = 2104
  XtEnumRedisCmdID_SYN_EDTV_FEEDBACK_DATA XtEnumRedisCmdID = 2105
  XtEnumRedisCmdID_SYN_MSGS_NOTICE_COUNT_DATA XtEnumRedisCmdID = 2150
  XtEnumRedisCmdID_SYN_MSGS_NOTICE_TABLE_DATA XtEnumRedisCmdID = 2151
  XtEnumRedisCmdID_SYN_MSGS_NOTICE_TYPE_DATA XtEnumRedisCmdID = 2152
  XtEnumRedisCmdID_SYN_SUBSCRIBER_LASTEST_MSGS XtEnumRedisCmdID = 2153
  XtEnumRedisCmdID_SYN_COMMON_SEARCH XtEnumRedisCmdID = 2201
  XtEnumRedisCmdID_SYN_SHARE_INFO XtEnumRedisCmdID = 2202
  XtEnumRedisCmdID_SYN_USER_PLAYLIST_INFO XtEnumRedisCmdID = 2203
  XtEnumRedisCmdID_SYN_USER_PLAYLIST_PROGRAM_INFO XtEnumRedisCmdID = 2204
  XtEnumRedisCmdID_SYN_SERVER_STATUS XtEnumRedisCmdID = 2205
  XtEnumRedisCmdID_SYN_SHOPPING_INFO XtEnumRedisCmdID = 2207
  XtEnumRedisCmdID_SYN_AD_POLICY XtEnumRedisCmdID = 2208
  XtEnumRedisCmdID_SYN_TROLLEY_INFO XtEnumRedisCmdID = 2209
  XtEnumRedisCmdID_SYN_USER_UPLOAD_RECORD XtEnumRedisCmdID = 2220
  XtEnumRedisCmdID_SYN_TRANSCODE_TEMPLATE_INFO XtEnumRedisCmdID = 2221
  XtEnumRedisCmdID_SYN_PLAYC_INFO XtEnumRedisCmdID = 2222
  XtEnumRedisCmdID_SYN_OLUSER_INFO XtEnumRedisCmdID = 2223
  XtEnumRedisCmdID_SYN_PRO_STATISTICS_INFO XtEnumRedisCmdID = 2224
  XtEnumRedisCmdID_SYN_HLSSTAT_INFO XtEnumRedisCmdID = 2225
  XtEnumRedisCmdID_SYN_HLSVP_INFO XtEnumRedisCmdID = 2226
  XtEnumRedisCmdID_SYN_SERIES_STAR_ID_MAP XtEnumRedisCmdID = 2228
  XtEnumRedisCmdID_SYN_TRANSCODE_CONTROL_INFO XtEnumRedisCmdID = 2230
  XtEnumRedisCmdID_SYN_AD_STRATEGY XtEnumRedisCmdID = 2231
  XtEnumRedisCmdID_SYN_HOT_WORD_UPATE XtEnumRedisCmdID = 2240
  XtEnumRedisCmdID_SYN_ONE_BINARY_SRV XtEnumRedisCmdID = 2320
  XtEnumRedisCmdID_SYN_ONE_RPC_SRV XtEnumRedisCmdID = 2321
  XtEnumRedisCmdID_SYN_CLOUD_INFO XtEnumRedisCmdID = 2500
  XtEnumRedisCmdID_SYN_IAIPROXY_INFO XtEnumRedisCmdID = 2501
  XtEnumRedisCmdID_IUCT_SYN_USER_SUBSCRIBE_INFO XtEnumRedisCmdID = 2505
  XtEnumRedisCmdID_IUCT_SYN_USER_RESOURCE_INFO XtEnumRedisCmdID = 2510
  XtEnumRedisCmdID_IUCT_SYN_USER_VOTE_INFO XtEnumRedisCmdID = 2511
  XtEnumRedisCmdID_IUCT_SYN_LOOP_HITS_PROGRAMS XtEnumRedisCmdID = 2512
  XtEnumRedisCmdID_IUGS_SYN_GROUP_NOTIFY XtEnumRedisCmdID = 2520
  XtEnumRedisCmdID_SYN_RECOMMEND_VERIFY_MODEL_INFO XtEnumRedisCmdID = 2530
  XtEnumRedisCmdID_THRIFT_SYN_CHANNEL_STORE XtEnumRedisCmdID = 3000
)

func (p XtEnumRedisCmdID) String() string {
  switch p {
  case XtEnumRedisCmdID_SYN_LITTLE_MSG: return "SYN_LITTLE_MSG"
  case XtEnumRedisCmdID_SYN_USER_STATUS: return "SYN_USER_STATUS"
  case XtEnumRedisCmdID_SYN_USER_MSG_COUNT: return "SYN_USER_MSG_COUNT"
  case XtEnumRedisCmdID_SYN_USER_DIR: return "SYN_USER_DIR"
  case XtEnumRedisCmdID_SYN_SYSTEM_SETTING_DATA: return "SYN_SYSTEM_SETTING_DATA"
  case XtEnumRedisCmdID_SYN_ACCOUNT_CREATE: return "SYN_ACCOUNT_CREATE"
  case XtEnumRedisCmdID_SYN_ACCOUNT_DEL: return "SYN_ACCOUNT_DEL"
  case XtEnumRedisCmdID_SYN_ACCOUNT_STYLE_CREATE: return "SYN_ACCOUNT_STYLE_CREATE"
  case XtEnumRedisCmdID_SYN_ACCOUNT_STYLE_DEL: return "SYN_ACCOUNT_STYLE_DEL"
  case XtEnumRedisCmdID_SYN_ACCOUNT_ICON_UPDATE: return "SYN_ACCOUNT_ICON_UPDATE"
  case XtEnumRedisCmdID_SYN_ACCOUNT_ICON_DEL: return "SYN_ACCOUNT_ICON_DEL"
  case XtEnumRedisCmdID_SYN_MEMBER_CREATE: return "SYN_MEMBER_CREATE"
  case XtEnumRedisCmdID_SYN_MEMBER_DEL: return "SYN_MEMBER_DEL"
  case XtEnumRedisCmdID_SYN_MEMBER_ACCOUNT_CREATE: return "SYN_MEMBER_ACCOUNT_CREATE"
  case XtEnumRedisCmdID_SYN_MEMBER_ACCOUNT_DEL: return "SYN_MEMBER_ACCOUNT_DEL"
  case XtEnumRedisCmdID_SYN_DA_BOSS_CREATE: return "SYN_DA_BOSS_CREATE"
  case XtEnumRedisCmdID_SYN_GROUP_PORTAL_INFO: return "SYN_GROUP_PORTAL_INFO"
  case XtEnumRedisCmdID_SYN_HOME_CREATE: return "SYN_HOME_CREATE"
  case XtEnumRedisCmdID_SYN_HOME_DEL: return "SYN_HOME_DEL"
  case XtEnumRedisCmdID_SYN_HOME_MEMBER_CREATE: return "SYN_HOME_MEMBER_CREATE"
  case XtEnumRedisCmdID_SYN_HOME_MEMBER_DEL: return "SYN_HOME_MEMBER_DEL"
  case XtEnumRedisCmdID_SYN_ADDRESS_CREATE: return "SYN_ADDRESS_CREATE"
  case XtEnumRedisCmdID_SYN_HOME_ADDRESS_CREATE: return "SYN_HOME_ADDRESS_CREATE"
  case XtEnumRedisCmdID_SYN_ROLE_INFO: return "SYN_ROLE_INFO"
  case XtEnumRedisCmdID_SYN_DEVICE_CREATE: return "SYN_DEVICE_CREATE"
  case XtEnumRedisCmdID_SYN_DEVICE_ACCOUNT_DEL: return "SYN_DEVICE_ACCOUNT_DEL"
  case XtEnumRedisCmdID_SYN_ADDRESS_DEVICE_CREATE: return "SYN_ADDRESS_DEVICE_CREATE"
  case XtEnumRedisCmdID_SYN_PORTAL_GROUP_INFO: return "SYN_PORTAL_GROUP_INFO"
  case XtEnumRedisCmdID_SYN_PORTAL_MODEL_INFO: return "SYN_PORTAL_MODEL_INFO"
  case XtEnumRedisCmdID_SYN_USER_PORTAL_LINK: return "SYN_USER_PORTAL_LINK"
  case XtEnumRedisCmdID_SYN_TARGET_THEME_DATA: return "SYN_TARGET_THEME_DATA"
  case XtEnumRedisCmdID_SYN_ICON_CREATE: return "SYN_ICON_CREATE"
  case XtEnumRedisCmdID_SYN_ASSET_INFO: return "SYN_ASSET_INFO"
  case XtEnumRedisCmdID_SYN_USER_LABEL_INFO: return "SYN_USER_LABEL_INFO"
  case XtEnumRedisCmdID_SYN_USER_THIRD_AUTH: return "SYN_USER_THIRD_AUTH"
  case XtEnumRedisCmdID_SYN_BUSINESS_RECORD: return "SYN_BUSINESS_RECORD"
  case XtEnumRedisCmdID_SYN_RIGHT_INFO: return "SYN_RIGHT_INFO"
  case XtEnumRedisCmdID_SYN_OPERATOR_MGR_INFO: return "SYN_OPERATOR_MGR_INFO"
  case XtEnumRedisCmdID_SYN_CHARGE_SYS_INFO: return "SYN_CHARGE_SYS_INFO"
  case XtEnumRedisCmdID_SYN_ACCOUNT_TOKEN_MGR_INFO: return "SYN_ACCOUNT_TOKEN_MGR_INFO"
  case XtEnumRedisCmdID_SYN_USER_GROUP_INFO: return "SYN_USER_GROUP_INFO"
  case XtEnumRedisCmdID_SYN_APP_DATA: return "SYN_APP_DATA"
  case XtEnumRedisCmdID_SYN_APP_EDU_DATA: return "SYN_APP_EDU_DATA"
  case XtEnumRedisCmdID_SYN_CHANNEL_STORE: return "SYN_CHANNEL_STORE"
  case XtEnumRedisCmdID_SYN_VIDEO_INFO: return "SYN_VIDEO_INFO"
  case XtEnumRedisCmdID_SYN_VIDEO_EXTERN_INFO: return "SYN_VIDEO_EXTERN_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_CHANNEL_PROGRAM_INFO: return "DTVS_SYN_CHANNEL_PROGRAM_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_CHANNEL_HIS_PROGRAM_INFO: return "DTVS_SYN_CHANNEL_HIS_PROGRAM_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_USER_SCORE_INFO: return "DTVS_SYN_USER_SCORE_INFO"
  case XtEnumRedisCmdID_SYN_PROGRAM_PROMOTION_INFO: return "SYN_PROGRAM_PROMOTION_INFO"
  case XtEnumRedisCmdID_SYN_PROGRAM_PROMOTION: return "SYN_PROGRAM_PROMOTION"
  case XtEnumRedisCmdID_SYN_WEATHER_INFO: return "SYN_WEATHER_INFO"
  case XtEnumRedisCmdID_SYN_BARRAGE_INFO: return "SYN_BARRAGE_INFO"
  case XtEnumRedisCmdID_SYN_VIDEO_SERIES_ID_INFO: return "SYN_VIDEO_SERIES_ID_INFO"
  case XtEnumRedisCmdID_SYN_VIDEO_SERIES_ID_EXTERN_INFO: return "SYN_VIDEO_SERIES_ID_EXTERN_INFO"
  case XtEnumRedisCmdID_SYN_EVENT_SERIES_ID_INFO: return "SYN_EVENT_SERIES_ID_INFO"
  case XtEnumRedisCmdID_SYN_EVENT_SERIES_ID_EXTERN_INFO: return "SYN_EVENT_SERIES_ID_EXTERN_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_EVENT_SERIES_BASIC_INFO: return "DTVS_SYN_EVENT_SERIES_BASIC_INFO"
  case XtEnumRedisCmdID_SYN_PROGRAM_COMPOSITE_INFO: return "SYN_PROGRAM_COMPOSITE_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_PROGRAM_DEMAND_INFO: return "DTVS_SYN_PROGRAM_DEMAND_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_PROGRAM_RANK_INFO: return "DTVS_SYN_PROGRAM_RANK_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_CHANNEL_SHOW_RULE: return "DTVS_SYN_CHANNEL_SHOW_RULE"
  case XtEnumRedisCmdID_DTVS_SYN_CORE_MARK_INFO: return "DTVS_SYN_CORE_MARK_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_USER_FAVORITE_INFO: return "DTVS_SYN_USER_FAVORITE_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_USER_SETTING_INFO: return "DTVS_SYN_USER_SETTING_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_WATCHING_CHANNEL_INFO: return "DTVS_SYN_WATCHING_CHANNEL_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_USER_HISTORY_INFO: return "DTVS_SYN_USER_HISTORY_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_USER_SEARCH_HISTORY_INFO: return "DTVS_SYN_USER_SEARCH_HISTORY_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_USER_HITS_INFO: return "DTVS_SYN_USER_HITS_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_USER_LOCK_INFO: return "DTVS_SYN_USER_LOCK_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_USER_CHANNEL_PERSONAL: return "DTVS_SYN_USER_CHANNEL_PERSONAL"
  case XtEnumRedisCmdID_DTVS_SYN_PROGRAM_GROUP_INFO: return "DTVS_SYN_PROGRAM_GROUP_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_PROGRAM_PACKAGE_INFO: return "DTVS_SYN_PROGRAM_PACKAGE_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_PROGRAM_PRICE_INFO: return "DTVS_SYN_PROGRAM_PRICE_INFO"
  case XtEnumRedisCmdID_SYN_MUSIC_STORE: return "SYN_MUSIC_STORE"
  case XtEnumRedisCmdID_DTVS_SYN_USER_ORDER_INFO: return "DTVS_SYN_USER_ORDER_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_CHANNEL_GROUP_INFO: return "DTVS_SYN_CHANNEL_GROUP_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_CHANNEL_GROUP_DESC: return "DTVS_SYN_CHANNEL_GROUP_DESC"
  case XtEnumRedisCmdID_SYN_SEARCH_HOT_KEY_INFO: return "SYN_SEARCH_HOT_KEY_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_USER_PRAISE_INFO: return "DTVS_SYN_USER_PRAISE_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_USER_COMMENT_INFO: return "DTVS_SYN_USER_COMMENT_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_LABEL_CHANGE_INFO: return "DTVS_SYN_LABEL_CHANGE_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_MONITOR_STORE: return "DTVS_SYN_MONITOR_STORE"
  case XtEnumRedisCmdID_DTVS_SYN_MONITOR_GROUP_STORE: return "DTVS_SYN_MONITOR_GROUP_STORE"
  case XtEnumRedisCmdID_DTVS_SYN_MONITOR_GROUP_INFO: return "DTVS_SYN_MONITOR_GROUP_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_COLUMN_INFO: return "DTVS_SYN_COLUMN_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_COLUMN_PROGRAM: return "DTVS_SYN_COLUMN_PROGRAM"
  case XtEnumRedisCmdID_DTVS_SYN_COLUMN_PROGRAM_LIST: return "DTVS_SYN_COLUMN_PROGRAM_LIST"
  case XtEnumRedisCmdID_DTVS_SYN_MOSAIC_CHANNEL_INFO: return "DTVS_SYN_MOSAIC_CHANNEL_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_PROGRAM_GROUP_MAP_INFO: return "DTVS_SYN_PROGRAM_GROUP_MAP_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_COLUMN_RIGHT_INFO: return "DTVS_SYN_COLUMN_RIGHT_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_PROGRAM_HITS_INFO: return "DTVS_SYN_PROGRAM_HITS_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_USER_LOCAL_CHANNEL: return "DTVS_SYN_USER_LOCAL_CHANNEL"
  case XtEnumRedisCmdID_SYN_BUSINESS_PARTNER: return "SYN_BUSINESS_PARTNER"
  case XtEnumRedisCmdID_DTVS_SYNC_RECORD_CHANNEL_INFO: return "DTVS_SYNC_RECORD_CHANNEL_INFO"
  case XtEnumRedisCmdID_DTVS_SYNC_RECORD_SERVER_INFO: return "DTVS_SYNC_RECORD_SERVER_INFO"
  case XtEnumRedisCmdID_SYN_SENSITIVE_WORD_INFO: return "SYN_SENSITIVE_WORD_INFO"
  case XtEnumRedisCmdID_SYN_POLYPHONE_DATA: return "SYN_POLYPHONE_DATA"
  case XtEnumRedisCmdID_DTVS_SYN_PROGRAM_RECORD: return "DTVS_SYN_PROGRAM_RECORD"
  case XtEnumRedisCmdID_SYN_STAR_INFO: return "SYN_STAR_INFO"
  case XtEnumRedisCmdID_SYN_BAIKE_RELATION: return "SYN_BAIKE_RELATION"
  case XtEnumRedisCmdID_DTVS_SYN_DUPLICATE_PROGRAM: return "DTVS_SYN_DUPLICATE_PROGRAM"
  case XtEnumRedisCmdID_SYN_VIDEO_SERIES_EDUCATION_INFO: return "SYN_VIDEO_SERIES_EDUCATION_INFO"
  case XtEnumRedisCmdID_SYN_VIDEO_SERIES_MUSIC_INFO: return "SYN_VIDEO_SERIES_MUSIC_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_STREAM_DATA_INFO: return "DTVS_SYN_STREAM_DATA_INFO"
  case XtEnumRedisCmdID_SYN_TOURISM_ROUTE_INFO: return "SYN_TOURISM_ROUTE_INFO"
  case XtEnumRedisCmdID_SYN_TOURISM_TICKET_INFO: return "SYN_TOURISM_TICKET_INFO"
  case XtEnumRedisCmdID_SYN_QAM_AREACODE_INFO: return "SYN_QAM_AREACODE_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_SUBJECT_INFO: return "DTVS_SYN_SUBJECT_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_SUBJECT_PROGRAM: return "DTVS_SYN_SUBJECT_PROGRAM"
  case XtEnumRedisCmdID_DTVS_SYN_PLAYLIST_INFO: return "DTVS_SYN_PLAYLIST_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_PLAYLIST_PROGRAM: return "DTVS_SYN_PLAYLIST_PROGRAM"
  case XtEnumRedisCmdID_DTVS_SYN_CHANNEL_LIMIT_INFO: return "DTVS_SYN_CHANNEL_LIMIT_INFO"
  case XtEnumRedisCmdID_SYN_MEDIA_TYPE_INFO: return "SYN_MEDIA_TYPE_INFO"
  case XtEnumRedisCmdID_SYN_FILTER_INFO: return "SYN_FILTER_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_LIVE_ROOM_INFO: return "DTVS_SYN_LIVE_ROOM_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_LIVE_PROGRAM_INFO: return "DTVS_SYN_LIVE_PROGRAM_INFO"
  case XtEnumRedisCmdID_ILOG_SYN_LIVE_SESSION: return "ILOG_SYN_LIVE_SESSION"
  case XtEnumRedisCmdID_SYN_TEMPLATE_INFO: return "SYN_TEMPLATE_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_FILLPAD_INFO: return "DTVS_SYN_FILLPAD_INFO"
  case XtEnumRedisCmdID_SYN_CONFIG_TAG_INFO: return "SYN_CONFIG_TAG_INFO"
  case XtEnumRedisCmdID_SYN_USER_LABEL_MGR: return "SYN_USER_LABEL_MGR"
  case XtEnumRedisCmdID_SYN_MEDIA_LABEL_INFO: return "SYN_MEDIA_LABEL_INFO"
  case XtEnumRedisCmdID_SYN_PUBLIC_RESOURCE_INFO: return "SYN_PUBLIC_RESOURCE_INFO"
  case XtEnumRedisCmdID_SYN_VIDEO_SPORT_INFO: return "SYN_VIDEO_SPORT_INFO"
  case XtEnumRedisCmdID_DTVS_SYN_USER_PROFILE_INFO: return "DTVS_SYN_USER_PROFILE_INFO"
  case XtEnumRedisCmdID_SYN_VIDEO_SERIES_EXTEND_INFO: return "SYN_VIDEO_SERIES_EXTEND_INFO"
  case XtEnumRedisCmdID_SYN_VIDEO_STREAM_INFO: return "SYN_VIDEO_STREAM_INFO"
  case XtEnumRedisCmdID_SYN_HOME_TYPE_INFO: return "SYN_HOME_TYPE_INFO"
  case XtEnumRedisCmdID_SYN_SERIES_VIDEO_INDEX: return "SYN_SERIES_VIDEO_INDEX"
  case XtEnumRedisCmdID_SYN_MEDIA_TAGTYPE_INFO_MGR: return "SYN_MEDIA_TAGTYPE_INFO_MGR"
  case XtEnumRedisCmdID_SYN_MEDIA_VISIBLE_INFO_MGR: return "SYN_MEDIA_VISIBLE_INFO_MGR"
  case XtEnumRedisCmdID_SYN_PROGRAM_REFERENCE_INFO: return "SYN_PROGRAM_REFERENCE_INFO"
  case XtEnumRedisCmdID_SYN_SERIES_VIDEO_INDEX_MULTI: return "SYN_SERIES_VIDEO_INDEX_MULTI"
  case XtEnumRedisCmdID_DTVS_SYN_SUBJECT_SCHEDULE: return "DTVS_SYN_SUBJECT_SCHEDULE"
  case XtEnumRedisCmdID_SYN_VIDEO_SERIES_SPEC_INFO: return "SYN_VIDEO_SERIES_SPEC_INFO"
  case XtEnumRedisCmdID_SYN_VIDEO_SERIES_INDEX_SPEC_INFO: return "SYN_VIDEO_SERIES_INDEX_SPEC_INFO"
  case XtEnumRedisCmdID_SYN_T_ACCOUNT_LOGIN_HISTORY: return "SYN_T_ACCOUNT_LOGIN_HISTORY"
  case XtEnumRedisCmdID_SYN_WEBSOCKET_MSG: return "SYN_WEBSOCKET_MSG"
  case XtEnumRedisCmdID_SYN_WEBSOCKET_CONNECT_STATUS: return "SYN_WEBSOCKET_CONNECT_STATUS"
  case XtEnumRedisCmdID_ILOGMASTER_SYN_SAVE_AV_FILE: return "ILOGMASTER_SYN_SAVE_AV_FILE"
  case XtEnumRedisCmdID_ILOGMASTER_SYN_SAVE_AV_SUBFILE: return "ILOGMASTER_SYN_SAVE_AV_SUBFILE"
  case XtEnumRedisCmdID_ILOGMASTER_SYN_BLACK_CHANNEL: return "ILOGMASTER_SYN_BLACK_CHANNEL"
  case XtEnumRedisCmdID_ILOGMASTER_SYN_SAVE_TRANSMIT_FILE: return "ILOGMASTER_SYN_SAVE_TRANSMIT_FILE"
  case XtEnumRedisCmdID_SYN_PROCESS_INFO: return "SYN_PROCESS_INFO"
  case XtEnumRedisCmdID_SYS_ACTIVE_SERVER_INFO: return "SYS_ACTIVE_SERVER_INFO"
  case XtEnumRedisCmdID_TSG_SYN_movie: return "TSG_SYN_movie"
  case XtEnumRedisCmdID_TSG_SYN_poster_preview_dir: return "TSG_SYN_poster_preview_dir"
  case XtEnumRedisCmdID_TSG_SYN_poster_preview_file: return "TSG_SYN_poster_preview_file"
  case XtEnumRedisCmdID_SYN_TEMP_GROUP: return "SYN_TEMP_GROUP"
  case XtEnumRedisCmdID_SYN_LAST_GROUP: return "SYN_LAST_GROUP"
  case XtEnumRedisCmdID_SYN_EDTV_TEMPLATE_DATA: return "SYN_EDTV_TEMPLATE_DATA"
  case XtEnumRedisCmdID_SYN_EDTV_INTERACTION_DATA: return "SYN_EDTV_INTERACTION_DATA"
  case XtEnumRedisCmdID_SYN_EDTV_RELATION_DATA: return "SYN_EDTV_RELATION_DATA"
  case XtEnumRedisCmdID_SYN_EDTV_FEEDBACK_DATA: return "SYN_EDTV_FEEDBACK_DATA"
  case XtEnumRedisCmdID_SYN_MSGS_NOTICE_COUNT_DATA: return "SYN_MSGS_NOTICE_COUNT_DATA"
  case XtEnumRedisCmdID_SYN_MSGS_NOTICE_TABLE_DATA: return "SYN_MSGS_NOTICE_TABLE_DATA"
  case XtEnumRedisCmdID_SYN_MSGS_NOTICE_TYPE_DATA: return "SYN_MSGS_NOTICE_TYPE_DATA"
  case XtEnumRedisCmdID_SYN_SUBSCRIBER_LASTEST_MSGS: return "SYN_SUBSCRIBER_LASTEST_MSGS"
  case XtEnumRedisCmdID_SYN_COMMON_SEARCH: return "SYN_COMMON_SEARCH"
  case XtEnumRedisCmdID_SYN_SHARE_INFO: return "SYN_SHARE_INFO"
  case XtEnumRedisCmdID_SYN_USER_PLAYLIST_INFO: return "SYN_USER_PLAYLIST_INFO"
  case XtEnumRedisCmdID_SYN_USER_PLAYLIST_PROGRAM_INFO: return "SYN_USER_PLAYLIST_PROGRAM_INFO"
  case XtEnumRedisCmdID_SYN_SERVER_STATUS: return "SYN_SERVER_STATUS"
  case XtEnumRedisCmdID_SYN_SHOPPING_INFO: return "SYN_SHOPPING_INFO"
  case XtEnumRedisCmdID_SYN_AD_POLICY: return "SYN_AD_POLICY"
  case XtEnumRedisCmdID_SYN_TROLLEY_INFO: return "SYN_TROLLEY_INFO"
  case XtEnumRedisCmdID_SYN_USER_UPLOAD_RECORD: return "SYN_USER_UPLOAD_RECORD"
  case XtEnumRedisCmdID_SYN_TRANSCODE_TEMPLATE_INFO: return "SYN_TRANSCODE_TEMPLATE_INFO"
  case XtEnumRedisCmdID_SYN_PLAYC_INFO: return "SYN_PLAYC_INFO"
  case XtEnumRedisCmdID_SYN_OLUSER_INFO: return "SYN_OLUSER_INFO"
  case XtEnumRedisCmdID_SYN_PRO_STATISTICS_INFO: return "SYN_PRO_STATISTICS_INFO"
  case XtEnumRedisCmdID_SYN_HLSSTAT_INFO: return "SYN_HLSSTAT_INFO"
  case XtEnumRedisCmdID_SYN_HLSVP_INFO: return "SYN_HLSVP_INFO"
  case XtEnumRedisCmdID_SYN_SERIES_STAR_ID_MAP: return "SYN_SERIES_STAR_ID_MAP"
  case XtEnumRedisCmdID_SYN_TRANSCODE_CONTROL_INFO: return "SYN_TRANSCODE_CONTROL_INFO"
  case XtEnumRedisCmdID_SYN_AD_STRATEGY: return "SYN_AD_STRATEGY"
  case XtEnumRedisCmdID_SYN_HOT_WORD_UPATE: return "SYN_HOT_WORD_UPATE"
  case XtEnumRedisCmdID_SYN_ONE_BINARY_SRV: return "SYN_ONE_BINARY_SRV"
  case XtEnumRedisCmdID_SYN_ONE_RPC_SRV: return "SYN_ONE_RPC_SRV"
  case XtEnumRedisCmdID_SYN_CLOUD_INFO: return "SYN_CLOUD_INFO"
  case XtEnumRedisCmdID_SYN_IAIPROXY_INFO: return "SYN_IAIPROXY_INFO"
  case XtEnumRedisCmdID_IUCT_SYN_USER_SUBSCRIBE_INFO: return "IUCT_SYN_USER_SUBSCRIBE_INFO"
  case XtEnumRedisCmdID_IUCT_SYN_USER_RESOURCE_INFO: return "IUCT_SYN_USER_RESOURCE_INFO"
  case XtEnumRedisCmdID_IUCT_SYN_USER_VOTE_INFO: return "IUCT_SYN_USER_VOTE_INFO"
  case XtEnumRedisCmdID_IUCT_SYN_LOOP_HITS_PROGRAMS: return "IUCT_SYN_LOOP_HITS_PROGRAMS"
  case XtEnumRedisCmdID_IUGS_SYN_GROUP_NOTIFY: return "IUGS_SYN_GROUP_NOTIFY"
  case XtEnumRedisCmdID_SYN_RECOMMEND_VERIFY_MODEL_INFO: return "SYN_RECOMMEND_VERIFY_MODEL_INFO"
  case XtEnumRedisCmdID_THRIFT_SYN_CHANNEL_STORE: return "THRIFT_SYN_CHANNEL_STORE"
  }
  return "<UNSET>"
}

func XtEnumRedisCmdIDFromString(s string) (XtEnumRedisCmdID, error) {
  switch s {
  case "SYN_LITTLE_MSG": return XtEnumRedisCmdID_SYN_LITTLE_MSG, nil 
  case "SYN_USER_STATUS": return XtEnumRedisCmdID_SYN_USER_STATUS, nil 
  case "SYN_USER_MSG_COUNT": return XtEnumRedisCmdID_SYN_USER_MSG_COUNT, nil 
  case "SYN_USER_DIR": return XtEnumRedisCmdID_SYN_USER_DIR, nil 
  case "SYN_SYSTEM_SETTING_DATA": return XtEnumRedisCmdID_SYN_SYSTEM_SETTING_DATA, nil 
  case "SYN_ACCOUNT_CREATE": return XtEnumRedisCmdID_SYN_ACCOUNT_CREATE, nil 
  case "SYN_ACCOUNT_DEL": return XtEnumRedisCmdID_SYN_ACCOUNT_DEL, nil 
  case "SYN_ACCOUNT_STYLE_CREATE": return XtEnumRedisCmdID_SYN_ACCOUNT_STYLE_CREATE, nil 
  case "SYN_ACCOUNT_STYLE_DEL": return XtEnumRedisCmdID_SYN_ACCOUNT_STYLE_DEL, nil 
  case "SYN_ACCOUNT_ICON_UPDATE": return XtEnumRedisCmdID_SYN_ACCOUNT_ICON_UPDATE, nil 
  case "SYN_ACCOUNT_ICON_DEL": return XtEnumRedisCmdID_SYN_ACCOUNT_ICON_DEL, nil 
  case "SYN_MEMBER_CREATE": return XtEnumRedisCmdID_SYN_MEMBER_CREATE, nil 
  case "SYN_MEMBER_DEL": return XtEnumRedisCmdID_SYN_MEMBER_DEL, nil 
  case "SYN_MEMBER_ACCOUNT_CREATE": return XtEnumRedisCmdID_SYN_MEMBER_ACCOUNT_CREATE, nil 
  case "SYN_MEMBER_ACCOUNT_DEL": return XtEnumRedisCmdID_SYN_MEMBER_ACCOUNT_DEL, nil 
  case "SYN_DA_BOSS_CREATE": return XtEnumRedisCmdID_SYN_DA_BOSS_CREATE, nil 
  case "SYN_GROUP_PORTAL_INFO": return XtEnumRedisCmdID_SYN_GROUP_PORTAL_INFO, nil 
  case "SYN_HOME_CREATE": return XtEnumRedisCmdID_SYN_HOME_CREATE, nil 
  case "SYN_HOME_DEL": return XtEnumRedisCmdID_SYN_HOME_DEL, nil 
  case "SYN_HOME_MEMBER_CREATE": return XtEnumRedisCmdID_SYN_HOME_MEMBER_CREATE, nil 
  case "SYN_HOME_MEMBER_DEL": return XtEnumRedisCmdID_SYN_HOME_MEMBER_DEL, nil 
  case "SYN_ADDRESS_CREATE": return XtEnumRedisCmdID_SYN_ADDRESS_CREATE, nil 
  case "SYN_HOME_ADDRESS_CREATE": return XtEnumRedisCmdID_SYN_HOME_ADDRESS_CREATE, nil 
  case "SYN_ROLE_INFO": return XtEnumRedisCmdID_SYN_ROLE_INFO, nil 
  case "SYN_DEVICE_CREATE": return XtEnumRedisCmdID_SYN_DEVICE_CREATE, nil 
  case "SYN_DEVICE_ACCOUNT_DEL": return XtEnumRedisCmdID_SYN_DEVICE_ACCOUNT_DEL, nil 
  case "SYN_ADDRESS_DEVICE_CREATE": return XtEnumRedisCmdID_SYN_ADDRESS_DEVICE_CREATE, nil 
  case "SYN_PORTAL_GROUP_INFO": return XtEnumRedisCmdID_SYN_PORTAL_GROUP_INFO, nil 
  case "SYN_PORTAL_MODEL_INFO": return XtEnumRedisCmdID_SYN_PORTAL_MODEL_INFO, nil 
  case "SYN_USER_PORTAL_LINK": return XtEnumRedisCmdID_SYN_USER_PORTAL_LINK, nil 
  case "SYN_TARGET_THEME_DATA": return XtEnumRedisCmdID_SYN_TARGET_THEME_DATA, nil 
  case "SYN_ICON_CREATE": return XtEnumRedisCmdID_SYN_ICON_CREATE, nil 
  case "SYN_ASSET_INFO": return XtEnumRedisCmdID_SYN_ASSET_INFO, nil 
  case "SYN_USER_LABEL_INFO": return XtEnumRedisCmdID_SYN_USER_LABEL_INFO, nil 
  case "SYN_USER_THIRD_AUTH": return XtEnumRedisCmdID_SYN_USER_THIRD_AUTH, nil 
  case "SYN_BUSINESS_RECORD": return XtEnumRedisCmdID_SYN_BUSINESS_RECORD, nil 
  case "SYN_RIGHT_INFO": return XtEnumRedisCmdID_SYN_RIGHT_INFO, nil 
  case "SYN_OPERATOR_MGR_INFO": return XtEnumRedisCmdID_SYN_OPERATOR_MGR_INFO, nil 
  case "SYN_CHARGE_SYS_INFO": return XtEnumRedisCmdID_SYN_CHARGE_SYS_INFO, nil 
  case "SYN_ACCOUNT_TOKEN_MGR_INFO": return XtEnumRedisCmdID_SYN_ACCOUNT_TOKEN_MGR_INFO, nil 
  case "SYN_USER_GROUP_INFO": return XtEnumRedisCmdID_SYN_USER_GROUP_INFO, nil 
  case "SYN_APP_DATA": return XtEnumRedisCmdID_SYN_APP_DATA, nil 
  case "SYN_APP_EDU_DATA": return XtEnumRedisCmdID_SYN_APP_EDU_DATA, nil 
  case "SYN_CHANNEL_STORE": return XtEnumRedisCmdID_SYN_CHANNEL_STORE, nil 
  case "SYN_VIDEO_INFO": return XtEnumRedisCmdID_SYN_VIDEO_INFO, nil 
  case "SYN_VIDEO_EXTERN_INFO": return XtEnumRedisCmdID_SYN_VIDEO_EXTERN_INFO, nil 
  case "DTVS_SYN_CHANNEL_PROGRAM_INFO": return XtEnumRedisCmdID_DTVS_SYN_CHANNEL_PROGRAM_INFO, nil 
  case "DTVS_SYN_CHANNEL_HIS_PROGRAM_INFO": return XtEnumRedisCmdID_DTVS_SYN_CHANNEL_HIS_PROGRAM_INFO, nil 
  case "DTVS_SYN_USER_SCORE_INFO": return XtEnumRedisCmdID_DTVS_SYN_USER_SCORE_INFO, nil 
  case "SYN_PROGRAM_PROMOTION_INFO": return XtEnumRedisCmdID_SYN_PROGRAM_PROMOTION_INFO, nil 
  case "SYN_PROGRAM_PROMOTION": return XtEnumRedisCmdID_SYN_PROGRAM_PROMOTION, nil 
  case "SYN_WEATHER_INFO": return XtEnumRedisCmdID_SYN_WEATHER_INFO, nil 
  case "SYN_BARRAGE_INFO": return XtEnumRedisCmdID_SYN_BARRAGE_INFO, nil 
  case "SYN_VIDEO_SERIES_ID_INFO": return XtEnumRedisCmdID_SYN_VIDEO_SERIES_ID_INFO, nil 
  case "SYN_VIDEO_SERIES_ID_EXTERN_INFO": return XtEnumRedisCmdID_SYN_VIDEO_SERIES_ID_EXTERN_INFO, nil 
  case "SYN_EVENT_SERIES_ID_INFO": return XtEnumRedisCmdID_SYN_EVENT_SERIES_ID_INFO, nil 
  case "SYN_EVENT_SERIES_ID_EXTERN_INFO": return XtEnumRedisCmdID_SYN_EVENT_SERIES_ID_EXTERN_INFO, nil 
  case "DTVS_SYN_EVENT_SERIES_BASIC_INFO": return XtEnumRedisCmdID_DTVS_SYN_EVENT_SERIES_BASIC_INFO, nil 
  case "SYN_PROGRAM_COMPOSITE_INFO": return XtEnumRedisCmdID_SYN_PROGRAM_COMPOSITE_INFO, nil 
  case "DTVS_SYN_PROGRAM_DEMAND_INFO": return XtEnumRedisCmdID_DTVS_SYN_PROGRAM_DEMAND_INFO, nil 
  case "DTVS_SYN_PROGRAM_RANK_INFO": return XtEnumRedisCmdID_DTVS_SYN_PROGRAM_RANK_INFO, nil 
  case "DTVS_SYN_CHANNEL_SHOW_RULE": return XtEnumRedisCmdID_DTVS_SYN_CHANNEL_SHOW_RULE, nil 
  case "DTVS_SYN_CORE_MARK_INFO": return XtEnumRedisCmdID_DTVS_SYN_CORE_MARK_INFO, nil 
  case "DTVS_SYN_USER_FAVORITE_INFO": return XtEnumRedisCmdID_DTVS_SYN_USER_FAVORITE_INFO, nil 
  case "DTVS_SYN_USER_SETTING_INFO": return XtEnumRedisCmdID_DTVS_SYN_USER_SETTING_INFO, nil 
  case "DTVS_SYN_WATCHING_CHANNEL_INFO": return XtEnumRedisCmdID_DTVS_SYN_WATCHING_CHANNEL_INFO, nil 
  case "DTVS_SYN_USER_HISTORY_INFO": return XtEnumRedisCmdID_DTVS_SYN_USER_HISTORY_INFO, nil 
  case "DTVS_SYN_USER_SEARCH_HISTORY_INFO": return XtEnumRedisCmdID_DTVS_SYN_USER_SEARCH_HISTORY_INFO, nil 
  case "DTVS_SYN_USER_HITS_INFO": return XtEnumRedisCmdID_DTVS_SYN_USER_HITS_INFO, nil 
  case "DTVS_SYN_USER_LOCK_INFO": return XtEnumRedisCmdID_DTVS_SYN_USER_LOCK_INFO, nil 
  case "DTVS_SYN_USER_CHANNEL_PERSONAL": return XtEnumRedisCmdID_DTVS_SYN_USER_CHANNEL_PERSONAL, nil 
  case "DTVS_SYN_PROGRAM_GROUP_INFO": return XtEnumRedisCmdID_DTVS_SYN_PROGRAM_GROUP_INFO, nil 
  case "DTVS_SYN_PROGRAM_PACKAGE_INFO": return XtEnumRedisCmdID_DTVS_SYN_PROGRAM_PACKAGE_INFO, nil 
  case "DTVS_SYN_PROGRAM_PRICE_INFO": return XtEnumRedisCmdID_DTVS_SYN_PROGRAM_PRICE_INFO, nil 
  case "SYN_MUSIC_STORE": return XtEnumRedisCmdID_SYN_MUSIC_STORE, nil 
  case "DTVS_SYN_USER_ORDER_INFO": return XtEnumRedisCmdID_DTVS_SYN_USER_ORDER_INFO, nil 
  case "DTVS_SYN_CHANNEL_GROUP_INFO": return XtEnumRedisCmdID_DTVS_SYN_CHANNEL_GROUP_INFO, nil 
  case "DTVS_SYN_CHANNEL_GROUP_DESC": return XtEnumRedisCmdID_DTVS_SYN_CHANNEL_GROUP_DESC, nil 
  case "SYN_SEARCH_HOT_KEY_INFO": return XtEnumRedisCmdID_SYN_SEARCH_HOT_KEY_INFO, nil 
  case "DTVS_SYN_USER_PRAISE_INFO": return XtEnumRedisCmdID_DTVS_SYN_USER_PRAISE_INFO, nil 
  case "DTVS_SYN_USER_COMMENT_INFO": return XtEnumRedisCmdID_DTVS_SYN_USER_COMMENT_INFO, nil 
  case "DTVS_SYN_LABEL_CHANGE_INFO": return XtEnumRedisCmdID_DTVS_SYN_LABEL_CHANGE_INFO, nil 
  case "DTVS_SYN_MONITOR_STORE": return XtEnumRedisCmdID_DTVS_SYN_MONITOR_STORE, nil 
  case "DTVS_SYN_MONITOR_GROUP_STORE": return XtEnumRedisCmdID_DTVS_SYN_MONITOR_GROUP_STORE, nil 
  case "DTVS_SYN_MONITOR_GROUP_INFO": return XtEnumRedisCmdID_DTVS_SYN_MONITOR_GROUP_INFO, nil 
  case "DTVS_SYN_COLUMN_INFO": return XtEnumRedisCmdID_DTVS_SYN_COLUMN_INFO, nil 
  case "DTVS_SYN_COLUMN_PROGRAM": return XtEnumRedisCmdID_DTVS_SYN_COLUMN_PROGRAM, nil 
  case "DTVS_SYN_COLUMN_PROGRAM_LIST": return XtEnumRedisCmdID_DTVS_SYN_COLUMN_PROGRAM_LIST, nil 
  case "DTVS_SYN_MOSAIC_CHANNEL_INFO": return XtEnumRedisCmdID_DTVS_SYN_MOSAIC_CHANNEL_INFO, nil 
  case "DTVS_SYN_PROGRAM_GROUP_MAP_INFO": return XtEnumRedisCmdID_DTVS_SYN_PROGRAM_GROUP_MAP_INFO, nil 
  case "DTVS_SYN_COLUMN_RIGHT_INFO": return XtEnumRedisCmdID_DTVS_SYN_COLUMN_RIGHT_INFO, nil 
  case "DTVS_SYN_PROGRAM_HITS_INFO": return XtEnumRedisCmdID_DTVS_SYN_PROGRAM_HITS_INFO, nil 
  case "DTVS_SYN_USER_LOCAL_CHANNEL": return XtEnumRedisCmdID_DTVS_SYN_USER_LOCAL_CHANNEL, nil 
  case "SYN_BUSINESS_PARTNER": return XtEnumRedisCmdID_SYN_BUSINESS_PARTNER, nil 
  case "DTVS_SYNC_RECORD_CHANNEL_INFO": return XtEnumRedisCmdID_DTVS_SYNC_RECORD_CHANNEL_INFO, nil 
  case "DTVS_SYNC_RECORD_SERVER_INFO": return XtEnumRedisCmdID_DTVS_SYNC_RECORD_SERVER_INFO, nil 
  case "SYN_SENSITIVE_WORD_INFO": return XtEnumRedisCmdID_SYN_SENSITIVE_WORD_INFO, nil 
  case "SYN_POLYPHONE_DATA": return XtEnumRedisCmdID_SYN_POLYPHONE_DATA, nil 
  case "DTVS_SYN_PROGRAM_RECORD": return XtEnumRedisCmdID_DTVS_SYN_PROGRAM_RECORD, nil 
  case "SYN_STAR_INFO": return XtEnumRedisCmdID_SYN_STAR_INFO, nil 
  case "SYN_BAIKE_RELATION": return XtEnumRedisCmdID_SYN_BAIKE_RELATION, nil 
  case "DTVS_SYN_DUPLICATE_PROGRAM": return XtEnumRedisCmdID_DTVS_SYN_DUPLICATE_PROGRAM, nil 
  case "SYN_VIDEO_SERIES_EDUCATION_INFO": return XtEnumRedisCmdID_SYN_VIDEO_SERIES_EDUCATION_INFO, nil 
  case "SYN_VIDEO_SERIES_MUSIC_INFO": return XtEnumRedisCmdID_SYN_VIDEO_SERIES_MUSIC_INFO, nil 
  case "DTVS_SYN_STREAM_DATA_INFO": return XtEnumRedisCmdID_DTVS_SYN_STREAM_DATA_INFO, nil 
  case "SYN_TOURISM_ROUTE_INFO": return XtEnumRedisCmdID_SYN_TOURISM_ROUTE_INFO, nil 
  case "SYN_TOURISM_TICKET_INFO": return XtEnumRedisCmdID_SYN_TOURISM_TICKET_INFO, nil 
  case "SYN_QAM_AREACODE_INFO": return XtEnumRedisCmdID_SYN_QAM_AREACODE_INFO, nil 
  case "DTVS_SYN_SUBJECT_INFO": return XtEnumRedisCmdID_DTVS_SYN_SUBJECT_INFO, nil 
  case "DTVS_SYN_SUBJECT_PROGRAM": return XtEnumRedisCmdID_DTVS_SYN_SUBJECT_PROGRAM, nil 
  case "DTVS_SYN_PLAYLIST_INFO": return XtEnumRedisCmdID_DTVS_SYN_PLAYLIST_INFO, nil 
  case "DTVS_SYN_PLAYLIST_PROGRAM": return XtEnumRedisCmdID_DTVS_SYN_PLAYLIST_PROGRAM, nil 
  case "DTVS_SYN_CHANNEL_LIMIT_INFO": return XtEnumRedisCmdID_DTVS_SYN_CHANNEL_LIMIT_INFO, nil 
  case "SYN_MEDIA_TYPE_INFO": return XtEnumRedisCmdID_SYN_MEDIA_TYPE_INFO, nil 
  case "SYN_FILTER_INFO": return XtEnumRedisCmdID_SYN_FILTER_INFO, nil 
  case "DTVS_SYN_LIVE_ROOM_INFO": return XtEnumRedisCmdID_DTVS_SYN_LIVE_ROOM_INFO, nil 
  case "DTVS_SYN_LIVE_PROGRAM_INFO": return XtEnumRedisCmdID_DTVS_SYN_LIVE_PROGRAM_INFO, nil 
  case "ILOG_SYN_LIVE_SESSION": return XtEnumRedisCmdID_ILOG_SYN_LIVE_SESSION, nil 
  case "SYN_TEMPLATE_INFO": return XtEnumRedisCmdID_SYN_TEMPLATE_INFO, nil 
  case "DTVS_SYN_FILLPAD_INFO": return XtEnumRedisCmdID_DTVS_SYN_FILLPAD_INFO, nil 
  case "SYN_CONFIG_TAG_INFO": return XtEnumRedisCmdID_SYN_CONFIG_TAG_INFO, nil 
  case "SYN_USER_LABEL_MGR": return XtEnumRedisCmdID_SYN_USER_LABEL_MGR, nil 
  case "SYN_MEDIA_LABEL_INFO": return XtEnumRedisCmdID_SYN_MEDIA_LABEL_INFO, nil 
  case "SYN_PUBLIC_RESOURCE_INFO": return XtEnumRedisCmdID_SYN_PUBLIC_RESOURCE_INFO, nil 
  case "SYN_VIDEO_SPORT_INFO": return XtEnumRedisCmdID_SYN_VIDEO_SPORT_INFO, nil 
  case "DTVS_SYN_USER_PROFILE_INFO": return XtEnumRedisCmdID_DTVS_SYN_USER_PROFILE_INFO, nil 
  case "SYN_VIDEO_SERIES_EXTEND_INFO": return XtEnumRedisCmdID_SYN_VIDEO_SERIES_EXTEND_INFO, nil 
  case "SYN_VIDEO_STREAM_INFO": return XtEnumRedisCmdID_SYN_VIDEO_STREAM_INFO, nil 
  case "SYN_HOME_TYPE_INFO": return XtEnumRedisCmdID_SYN_HOME_TYPE_INFO, nil 
  case "SYN_SERIES_VIDEO_INDEX": return XtEnumRedisCmdID_SYN_SERIES_VIDEO_INDEX, nil 
  case "SYN_MEDIA_TAGTYPE_INFO_MGR": return XtEnumRedisCmdID_SYN_MEDIA_TAGTYPE_INFO_MGR, nil 
  case "SYN_MEDIA_VISIBLE_INFO_MGR": return XtEnumRedisCmdID_SYN_MEDIA_VISIBLE_INFO_MGR, nil 
  case "SYN_PROGRAM_REFERENCE_INFO": return XtEnumRedisCmdID_SYN_PROGRAM_REFERENCE_INFO, nil 
  case "SYN_SERIES_VIDEO_INDEX_MULTI": return XtEnumRedisCmdID_SYN_SERIES_VIDEO_INDEX_MULTI, nil 
  case "DTVS_SYN_SUBJECT_SCHEDULE": return XtEnumRedisCmdID_DTVS_SYN_SUBJECT_SCHEDULE, nil 
  case "SYN_VIDEO_SERIES_SPEC_INFO": return XtEnumRedisCmdID_SYN_VIDEO_SERIES_SPEC_INFO, nil 
  case "SYN_VIDEO_SERIES_INDEX_SPEC_INFO": return XtEnumRedisCmdID_SYN_VIDEO_SERIES_INDEX_SPEC_INFO, nil 
  case "SYN_T_ACCOUNT_LOGIN_HISTORY": return XtEnumRedisCmdID_SYN_T_ACCOUNT_LOGIN_HISTORY, nil 
  case "SYN_WEBSOCKET_MSG": return XtEnumRedisCmdID_SYN_WEBSOCKET_MSG, nil 
  case "SYN_WEBSOCKET_CONNECT_STATUS": return XtEnumRedisCmdID_SYN_WEBSOCKET_CONNECT_STATUS, nil 
  case "ILOGMASTER_SYN_SAVE_AV_FILE": return XtEnumRedisCmdID_ILOGMASTER_SYN_SAVE_AV_FILE, nil 
  case "ILOGMASTER_SYN_SAVE_AV_SUBFILE": return XtEnumRedisCmdID_ILOGMASTER_SYN_SAVE_AV_SUBFILE, nil 
  case "ILOGMASTER_SYN_BLACK_CHANNEL": return XtEnumRedisCmdID_ILOGMASTER_SYN_BLACK_CHANNEL, nil 
  case "ILOGMASTER_SYN_SAVE_TRANSMIT_FILE": return XtEnumRedisCmdID_ILOGMASTER_SYN_SAVE_TRANSMIT_FILE, nil 
  case "SYN_PROCESS_INFO": return XtEnumRedisCmdID_SYN_PROCESS_INFO, nil 
  case "SYS_ACTIVE_SERVER_INFO": return XtEnumRedisCmdID_SYS_ACTIVE_SERVER_INFO, nil 
  case "TSG_SYN_movie": return XtEnumRedisCmdID_TSG_SYN_movie, nil 
  case "TSG_SYN_poster_preview_dir": return XtEnumRedisCmdID_TSG_SYN_poster_preview_dir, nil 
  case "TSG_SYN_poster_preview_file": return XtEnumRedisCmdID_TSG_SYN_poster_preview_file, nil 
  case "SYN_TEMP_GROUP": return XtEnumRedisCmdID_SYN_TEMP_GROUP, nil 
  case "SYN_LAST_GROUP": return XtEnumRedisCmdID_SYN_LAST_GROUP, nil 
  case "SYN_EDTV_TEMPLATE_DATA": return XtEnumRedisCmdID_SYN_EDTV_TEMPLATE_DATA, nil 
  case "SYN_EDTV_INTERACTION_DATA": return XtEnumRedisCmdID_SYN_EDTV_INTERACTION_DATA, nil 
  case "SYN_EDTV_RELATION_DATA": return XtEnumRedisCmdID_SYN_EDTV_RELATION_DATA, nil 
  case "SYN_EDTV_FEEDBACK_DATA": return XtEnumRedisCmdID_SYN_EDTV_FEEDBACK_DATA, nil 
  case "SYN_MSGS_NOTICE_COUNT_DATA": return XtEnumRedisCmdID_SYN_MSGS_NOTICE_COUNT_DATA, nil 
  case "SYN_MSGS_NOTICE_TABLE_DATA": return XtEnumRedisCmdID_SYN_MSGS_NOTICE_TABLE_DATA, nil 
  case "SYN_MSGS_NOTICE_TYPE_DATA": return XtEnumRedisCmdID_SYN_MSGS_NOTICE_TYPE_DATA, nil 
  case "SYN_SUBSCRIBER_LASTEST_MSGS": return XtEnumRedisCmdID_SYN_SUBSCRIBER_LASTEST_MSGS, nil 
  case "SYN_COMMON_SEARCH": return XtEnumRedisCmdID_SYN_COMMON_SEARCH, nil 
  case "SYN_SHARE_INFO": return XtEnumRedisCmdID_SYN_SHARE_INFO, nil 
  case "SYN_USER_PLAYLIST_INFO": return XtEnumRedisCmdID_SYN_USER_PLAYLIST_INFO, nil 
  case "SYN_USER_PLAYLIST_PROGRAM_INFO": return XtEnumRedisCmdID_SYN_USER_PLAYLIST_PROGRAM_INFO, nil 
  case "SYN_SERVER_STATUS": return XtEnumRedisCmdID_SYN_SERVER_STATUS, nil 
  case "SYN_SHOPPING_INFO": return XtEnumRedisCmdID_SYN_SHOPPING_INFO, nil 
  case "SYN_AD_POLICY": return XtEnumRedisCmdID_SYN_AD_POLICY, nil 
  case "SYN_TROLLEY_INFO": return XtEnumRedisCmdID_SYN_TROLLEY_INFO, nil 
  case "SYN_USER_UPLOAD_RECORD": return XtEnumRedisCmdID_SYN_USER_UPLOAD_RECORD, nil 
  case "SYN_TRANSCODE_TEMPLATE_INFO": return XtEnumRedisCmdID_SYN_TRANSCODE_TEMPLATE_INFO, nil 
  case "SYN_PLAYC_INFO": return XtEnumRedisCmdID_SYN_PLAYC_INFO, nil 
  case "SYN_OLUSER_INFO": return XtEnumRedisCmdID_SYN_OLUSER_INFO, nil 
  case "SYN_PRO_STATISTICS_INFO": return XtEnumRedisCmdID_SYN_PRO_STATISTICS_INFO, nil 
  case "SYN_HLSSTAT_INFO": return XtEnumRedisCmdID_SYN_HLSSTAT_INFO, nil 
  case "SYN_HLSVP_INFO": return XtEnumRedisCmdID_SYN_HLSVP_INFO, nil 
  case "SYN_SERIES_STAR_ID_MAP": return XtEnumRedisCmdID_SYN_SERIES_STAR_ID_MAP, nil 
  case "SYN_TRANSCODE_CONTROL_INFO": return XtEnumRedisCmdID_SYN_TRANSCODE_CONTROL_INFO, nil 
  case "SYN_AD_STRATEGY": return XtEnumRedisCmdID_SYN_AD_STRATEGY, nil 
  case "SYN_HOT_WORD_UPATE": return XtEnumRedisCmdID_SYN_HOT_WORD_UPATE, nil 
  case "SYN_ONE_BINARY_SRV": return XtEnumRedisCmdID_SYN_ONE_BINARY_SRV, nil 
  case "SYN_ONE_RPC_SRV": return XtEnumRedisCmdID_SYN_ONE_RPC_SRV, nil 
  case "SYN_CLOUD_INFO": return XtEnumRedisCmdID_SYN_CLOUD_INFO, nil 
  case "SYN_IAIPROXY_INFO": return XtEnumRedisCmdID_SYN_IAIPROXY_INFO, nil 
  case "IUCT_SYN_USER_SUBSCRIBE_INFO": return XtEnumRedisCmdID_IUCT_SYN_USER_SUBSCRIBE_INFO, nil 
  case "IUCT_SYN_USER_RESOURCE_INFO": return XtEnumRedisCmdID_IUCT_SYN_USER_RESOURCE_INFO, nil 
  case "IUCT_SYN_USER_VOTE_INFO": return XtEnumRedisCmdID_IUCT_SYN_USER_VOTE_INFO, nil 
  case "IUCT_SYN_LOOP_HITS_PROGRAMS": return XtEnumRedisCmdID_IUCT_SYN_LOOP_HITS_PROGRAMS, nil 
  case "IUGS_SYN_GROUP_NOTIFY": return XtEnumRedisCmdID_IUGS_SYN_GROUP_NOTIFY, nil 
  case "SYN_RECOMMEND_VERIFY_MODEL_INFO": return XtEnumRedisCmdID_SYN_RECOMMEND_VERIFY_MODEL_INFO, nil 
  case "THRIFT_SYN_CHANNEL_STORE": return XtEnumRedisCmdID_THRIFT_SYN_CHANNEL_STORE, nil 
  }
  return XtEnumRedisCmdID(0), fmt.Errorf("not a valid XtEnumRedisCmdID string")
}


func XtEnumRedisCmdIDPtr(v XtEnumRedisCmdID) *XtEnumRedisCmdID { return &v }

func (p XtEnumRedisCmdID) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *XtEnumRedisCmdID) UnmarshalText(text []byte) error {
q, err := XtEnumRedisCmdIDFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *XtEnumRedisCmdID) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = XtEnumRedisCmdID(v)
return nil
}

func (p * XtEnumRedisCmdID) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EComSubcmd int64
const (
  EComSubcmd_SYN_ADD EComSubcmd = 0
  EComSubcmd_SYN_DEL EComSubcmd = 1
  EComSubcmd_SYN_MOD EComSubcmd = 2
  EComSubcmd_SYN_CMD EComSubcmd = 3
)

func (p EComSubcmd) String() string {
  switch p {
  case EComSubcmd_SYN_ADD: return "SYN_ADD"
  case EComSubcmd_SYN_DEL: return "SYN_DEL"
  case EComSubcmd_SYN_MOD: return "SYN_MOD"
  case EComSubcmd_SYN_CMD: return "SYN_CMD"
  }
  return "<UNSET>"
}

func EComSubcmdFromString(s string) (EComSubcmd, error) {
  switch s {
  case "SYN_ADD": return EComSubcmd_SYN_ADD, nil 
  case "SYN_DEL": return EComSubcmd_SYN_DEL, nil 
  case "SYN_MOD": return EComSubcmd_SYN_MOD, nil 
  case "SYN_CMD": return EComSubcmd_SYN_CMD, nil 
  }
  return EComSubcmd(0), fmt.Errorf("not a valid EComSubcmd string")
}


func EComSubcmdPtr(v EComSubcmd) *EComSubcmd { return &v }

func (p EComSubcmd) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EComSubcmd) UnmarshalText(text []byte) error {
q, err := EComSubcmdFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EComSubcmd) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EComSubcmd(v)
return nil
}

func (p * EComSubcmd) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SyncIaiproxySubcmd int64
const (
  SyncIaiproxySubcmd_SYNC_AIPROXY_SUBJECT_ADD SyncIaiproxySubcmd = 1
  SyncIaiproxySubcmd_SYNC_AIPROXY_VIDEO_ADD SyncIaiproxySubcmd = 2
)

func (p SyncIaiproxySubcmd) String() string {
  switch p {
  case SyncIaiproxySubcmd_SYNC_AIPROXY_SUBJECT_ADD: return "SYNC_AIPROXY_SUBJECT_ADD"
  case SyncIaiproxySubcmd_SYNC_AIPROXY_VIDEO_ADD: return "SYNC_AIPROXY_VIDEO_ADD"
  }
  return "<UNSET>"
}

func SyncIaiproxySubcmdFromString(s string) (SyncIaiproxySubcmd, error) {
  switch s {
  case "SYNC_AIPROXY_SUBJECT_ADD": return SyncIaiproxySubcmd_SYNC_AIPROXY_SUBJECT_ADD, nil 
  case "SYNC_AIPROXY_VIDEO_ADD": return SyncIaiproxySubcmd_SYNC_AIPROXY_VIDEO_ADD, nil 
  }
  return SyncIaiproxySubcmd(0), fmt.Errorf("not a valid SyncIaiproxySubcmd string")
}


func SyncIaiproxySubcmdPtr(v SyncIaiproxySubcmd) *SyncIaiproxySubcmd { return &v }

func (p SyncIaiproxySubcmd) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SyncIaiproxySubcmd) UnmarshalText(text []byte) error {
q, err := SyncIaiproxySubcmdFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SyncIaiproxySubcmd) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SyncIaiproxySubcmd(v)
return nil
}

func (p * SyncIaiproxySubcmd) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SynIlogAdPolicySubcmd int64
const (
  SynIlogAdPolicySubcmd_SYN_ADD SynIlogAdPolicySubcmd = 0
  SynIlogAdPolicySubcmd_SYN_DEL SynIlogAdPolicySubcmd = 1
  SynIlogAdPolicySubcmd_SYN_MOD SynIlogAdPolicySubcmd = 2
  SynIlogAdPolicySubcmd_SYN_COUNT SynIlogAdPolicySubcmd = 3
)

func (p SynIlogAdPolicySubcmd) String() string {
  switch p {
  case SynIlogAdPolicySubcmd_SYN_ADD: return "SYN_ADD"
  case SynIlogAdPolicySubcmd_SYN_DEL: return "SYN_DEL"
  case SynIlogAdPolicySubcmd_SYN_MOD: return "SYN_MOD"
  case SynIlogAdPolicySubcmd_SYN_COUNT: return "SYN_COUNT"
  }
  return "<UNSET>"
}

func SynIlogAdPolicySubcmdFromString(s string) (SynIlogAdPolicySubcmd, error) {
  switch s {
  case "SYN_ADD": return SynIlogAdPolicySubcmd_SYN_ADD, nil 
  case "SYN_DEL": return SynIlogAdPolicySubcmd_SYN_DEL, nil 
  case "SYN_MOD": return SynIlogAdPolicySubcmd_SYN_MOD, nil 
  case "SYN_COUNT": return SynIlogAdPolicySubcmd_SYN_COUNT, nil 
  }
  return SynIlogAdPolicySubcmd(0), fmt.Errorf("not a valid SynIlogAdPolicySubcmd string")
}


func SynIlogAdPolicySubcmdPtr(v SynIlogAdPolicySubcmd) *SynIlogAdPolicySubcmd { return &v }

func (p SynIlogAdPolicySubcmd) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SynIlogAdPolicySubcmd) UnmarshalText(text []byte) error {
q, err := SynIlogAdPolicySubcmdFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SynIlogAdPolicySubcmd) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SynIlogAdPolicySubcmd(v)
return nil
}

func (p * SynIlogAdPolicySubcmd) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SynDtvsShoppingSubcmd int64
const (
  SynDtvsShoppingSubcmd_SYN_SHOPPING_PROVIDER_ADD SynDtvsShoppingSubcmd = 0
  SynDtvsShoppingSubcmd_SYN_SHOPPING_PROVIDER_DEL SynDtvsShoppingSubcmd = 1
  SynDtvsShoppingSubcmd_SYN_SHOPPING_PROVIDER_MOD SynDtvsShoppingSubcmd = 2
  SynDtvsShoppingSubcmd_SYN_SHOPPING_SHOP_ADD SynDtvsShoppingSubcmd = 3
  SynDtvsShoppingSubcmd_SYN_SHOPPING_SHOP_DEL SynDtvsShoppingSubcmd = 4
  SynDtvsShoppingSubcmd_SYN_SHOPPING_SHOP_MOD SynDtvsShoppingSubcmd = 5
  SynDtvsShoppingSubcmd_SYN_SHOPPING_PROMO_ADD SynDtvsShoppingSubcmd = 6
  SynDtvsShoppingSubcmd_SYN_SHOPPING_PROMO_DEL SynDtvsShoppingSubcmd = 7
  SynDtvsShoppingSubcmd_SYN_SHOPPING_PROMO_MOD SynDtvsShoppingSubcmd = 8
  SynDtvsShoppingSubcmd_SYN_SHOPPING_PRODUCT_ADD SynDtvsShoppingSubcmd = 9
  SynDtvsShoppingSubcmd_SYN_SHOPPING_PRODUCT_DEL SynDtvsShoppingSubcmd = 10
  SynDtvsShoppingSubcmd_SYN_SHOPPING_PRODUCT_MOD SynDtvsShoppingSubcmd = 11
  SynDtvsShoppingSubcmd_SYN_SHOPPING_OTHER_PRODUCT_ADD SynDtvsShoppingSubcmd = 12
  SynDtvsShoppingSubcmd_SYN_SHOPPING_OTHER_PRODUCT_DEL SynDtvsShoppingSubcmd = 13
  SynDtvsShoppingSubcmd_SYN_SHOPPING_OTHER_PRODUCT_MOD SynDtvsShoppingSubcmd = 14
  SynDtvsShoppingSubcmd_SYN_SHOPPING_MAIN_PRODUCT_ADD SynDtvsShoppingSubcmd = 15
  SynDtvsShoppingSubcmd_SYN_SHOPPING_MAIN_PRODUCT_DEL SynDtvsShoppingSubcmd = 16
  SynDtvsShoppingSubcmd_SYN_SHOPPING_MAIN_PRODUCT_MOD SynDtvsShoppingSubcmd = 17
  SynDtvsShoppingSubcmd_SYN_SHOPPING_COMMENT_ADD SynDtvsShoppingSubcmd = 18
  SynDtvsShoppingSubcmd_SYN_SHOPPING_COMMENT_DEL SynDtvsShoppingSubcmd = 19
  SynDtvsShoppingSubcmd_SYN_SHOPPING_COMMENT_MOD SynDtvsShoppingSubcmd = 20
  SynDtvsShoppingSubcmd_SYN_SHOPPING_CATEGORY_ADD SynDtvsShoppingSubcmd = 21
  SynDtvsShoppingSubcmd_SYN_SHOPPING_CATEGORY_DEL SynDtvsShoppingSubcmd = 22
  SynDtvsShoppingSubcmd_SYN_SHOPPING_CATEGORY_MOD SynDtvsShoppingSubcmd = 23
  SynDtvsShoppingSubcmd_SYN_SHOPPING_PROMO_CATEGORY_ADD SynDtvsShoppingSubcmd = 24
  SynDtvsShoppingSubcmd_SYN_SHOPPING_PROMO_CATEGORY_DEL SynDtvsShoppingSubcmd = 25
  SynDtvsShoppingSubcmd_SYN_SHOPPING_PROMO_CATEGORY_MOD SynDtvsShoppingSubcmd = 26
)

func (p SynDtvsShoppingSubcmd) String() string {
  switch p {
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_PROVIDER_ADD: return "SYN_SHOPPING_PROVIDER_ADD"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_PROVIDER_DEL: return "SYN_SHOPPING_PROVIDER_DEL"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_PROVIDER_MOD: return "SYN_SHOPPING_PROVIDER_MOD"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_SHOP_ADD: return "SYN_SHOPPING_SHOP_ADD"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_SHOP_DEL: return "SYN_SHOPPING_SHOP_DEL"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_SHOP_MOD: return "SYN_SHOPPING_SHOP_MOD"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_PROMO_ADD: return "SYN_SHOPPING_PROMO_ADD"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_PROMO_DEL: return "SYN_SHOPPING_PROMO_DEL"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_PROMO_MOD: return "SYN_SHOPPING_PROMO_MOD"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_PRODUCT_ADD: return "SYN_SHOPPING_PRODUCT_ADD"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_PRODUCT_DEL: return "SYN_SHOPPING_PRODUCT_DEL"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_PRODUCT_MOD: return "SYN_SHOPPING_PRODUCT_MOD"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_OTHER_PRODUCT_ADD: return "SYN_SHOPPING_OTHER_PRODUCT_ADD"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_OTHER_PRODUCT_DEL: return "SYN_SHOPPING_OTHER_PRODUCT_DEL"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_OTHER_PRODUCT_MOD: return "SYN_SHOPPING_OTHER_PRODUCT_MOD"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_MAIN_PRODUCT_ADD: return "SYN_SHOPPING_MAIN_PRODUCT_ADD"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_MAIN_PRODUCT_DEL: return "SYN_SHOPPING_MAIN_PRODUCT_DEL"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_MAIN_PRODUCT_MOD: return "SYN_SHOPPING_MAIN_PRODUCT_MOD"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_COMMENT_ADD: return "SYN_SHOPPING_COMMENT_ADD"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_COMMENT_DEL: return "SYN_SHOPPING_COMMENT_DEL"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_COMMENT_MOD: return "SYN_SHOPPING_COMMENT_MOD"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_CATEGORY_ADD: return "SYN_SHOPPING_CATEGORY_ADD"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_CATEGORY_DEL: return "SYN_SHOPPING_CATEGORY_DEL"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_CATEGORY_MOD: return "SYN_SHOPPING_CATEGORY_MOD"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_PROMO_CATEGORY_ADD: return "SYN_SHOPPING_PROMO_CATEGORY_ADD"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_PROMO_CATEGORY_DEL: return "SYN_SHOPPING_PROMO_CATEGORY_DEL"
  case SynDtvsShoppingSubcmd_SYN_SHOPPING_PROMO_CATEGORY_MOD: return "SYN_SHOPPING_PROMO_CATEGORY_MOD"
  }
  return "<UNSET>"
}

func SynDtvsShoppingSubcmdFromString(s string) (SynDtvsShoppingSubcmd, error) {
  switch s {
  case "SYN_SHOPPING_PROVIDER_ADD": return SynDtvsShoppingSubcmd_SYN_SHOPPING_PROVIDER_ADD, nil 
  case "SYN_SHOPPING_PROVIDER_DEL": return SynDtvsShoppingSubcmd_SYN_SHOPPING_PROVIDER_DEL, nil 
  case "SYN_SHOPPING_PROVIDER_MOD": return SynDtvsShoppingSubcmd_SYN_SHOPPING_PROVIDER_MOD, nil 
  case "SYN_SHOPPING_SHOP_ADD": return SynDtvsShoppingSubcmd_SYN_SHOPPING_SHOP_ADD, nil 
  case "SYN_SHOPPING_SHOP_DEL": return SynDtvsShoppingSubcmd_SYN_SHOPPING_SHOP_DEL, nil 
  case "SYN_SHOPPING_SHOP_MOD": return SynDtvsShoppingSubcmd_SYN_SHOPPING_SHOP_MOD, nil 
  case "SYN_SHOPPING_PROMO_ADD": return SynDtvsShoppingSubcmd_SYN_SHOPPING_PROMO_ADD, nil 
  case "SYN_SHOPPING_PROMO_DEL": return SynDtvsShoppingSubcmd_SYN_SHOPPING_PROMO_DEL, nil 
  case "SYN_SHOPPING_PROMO_MOD": return SynDtvsShoppingSubcmd_SYN_SHOPPING_PROMO_MOD, nil 
  case "SYN_SHOPPING_PRODUCT_ADD": return SynDtvsShoppingSubcmd_SYN_SHOPPING_PRODUCT_ADD, nil 
  case "SYN_SHOPPING_PRODUCT_DEL": return SynDtvsShoppingSubcmd_SYN_SHOPPING_PRODUCT_DEL, nil 
  case "SYN_SHOPPING_PRODUCT_MOD": return SynDtvsShoppingSubcmd_SYN_SHOPPING_PRODUCT_MOD, nil 
  case "SYN_SHOPPING_OTHER_PRODUCT_ADD": return SynDtvsShoppingSubcmd_SYN_SHOPPING_OTHER_PRODUCT_ADD, nil 
  case "SYN_SHOPPING_OTHER_PRODUCT_DEL": return SynDtvsShoppingSubcmd_SYN_SHOPPING_OTHER_PRODUCT_DEL, nil 
  case "SYN_SHOPPING_OTHER_PRODUCT_MOD": return SynDtvsShoppingSubcmd_SYN_SHOPPING_OTHER_PRODUCT_MOD, nil 
  case "SYN_SHOPPING_MAIN_PRODUCT_ADD": return SynDtvsShoppingSubcmd_SYN_SHOPPING_MAIN_PRODUCT_ADD, nil 
  case "SYN_SHOPPING_MAIN_PRODUCT_DEL": return SynDtvsShoppingSubcmd_SYN_SHOPPING_MAIN_PRODUCT_DEL, nil 
  case "SYN_SHOPPING_MAIN_PRODUCT_MOD": return SynDtvsShoppingSubcmd_SYN_SHOPPING_MAIN_PRODUCT_MOD, nil 
  case "SYN_SHOPPING_COMMENT_ADD": return SynDtvsShoppingSubcmd_SYN_SHOPPING_COMMENT_ADD, nil 
  case "SYN_SHOPPING_COMMENT_DEL": return SynDtvsShoppingSubcmd_SYN_SHOPPING_COMMENT_DEL, nil 
  case "SYN_SHOPPING_COMMENT_MOD": return SynDtvsShoppingSubcmd_SYN_SHOPPING_COMMENT_MOD, nil 
  case "SYN_SHOPPING_CATEGORY_ADD": return SynDtvsShoppingSubcmd_SYN_SHOPPING_CATEGORY_ADD, nil 
  case "SYN_SHOPPING_CATEGORY_DEL": return SynDtvsShoppingSubcmd_SYN_SHOPPING_CATEGORY_DEL, nil 
  case "SYN_SHOPPING_CATEGORY_MOD": return SynDtvsShoppingSubcmd_SYN_SHOPPING_CATEGORY_MOD, nil 
  case "SYN_SHOPPING_PROMO_CATEGORY_ADD": return SynDtvsShoppingSubcmd_SYN_SHOPPING_PROMO_CATEGORY_ADD, nil 
  case "SYN_SHOPPING_PROMO_CATEGORY_DEL": return SynDtvsShoppingSubcmd_SYN_SHOPPING_PROMO_CATEGORY_DEL, nil 
  case "SYN_SHOPPING_PROMO_CATEGORY_MOD": return SynDtvsShoppingSubcmd_SYN_SHOPPING_PROMO_CATEGORY_MOD, nil 
  }
  return SynDtvsShoppingSubcmd(0), fmt.Errorf("not a valid SynDtvsShoppingSubcmd string")
}


func SynDtvsShoppingSubcmdPtr(v SynDtvsShoppingSubcmd) *SynDtvsShoppingSubcmd { return &v }

func (p SynDtvsShoppingSubcmd) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SynDtvsShoppingSubcmd) UnmarshalText(text []byte) error {
q, err := SynDtvsShoppingSubcmdFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SynDtvsShoppingSubcmd) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SynDtvsShoppingSubcmd(v)
return nil
}

func (p * SynDtvsShoppingSubcmd) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SynDtvsSeriesIdInfoSubcmd int64
const (
  SynDtvsSeriesIdInfoSubcmd_EVENT_SERIES_OP_EX_ADD SynDtvsSeriesIdInfoSubcmd = 1
  SynDtvsSeriesIdInfoSubcmd_EVENT_SERIES_OP_EX_DEL SynDtvsSeriesIdInfoSubcmd = 2
  SynDtvsSeriesIdInfoSubcmd_EVENT_SERIES_OP_EX_MOD SynDtvsSeriesIdInfoSubcmd = 3
  SynDtvsSeriesIdInfoSubcmd_EVENT_SERIES_OP_STATUS_EX_MOD SynDtvsSeriesIdInfoSubcmd = 4
  SynDtvsSeriesIdInfoSubcmd_EVENT_SERIES_OP_ADD SynDtvsSeriesIdInfoSubcmd = 5
  SynDtvsSeriesIdInfoSubcmd_EVENT_SERIES_OP_DEL SynDtvsSeriesIdInfoSubcmd = 6
  SynDtvsSeriesIdInfoSubcmd_EVENT_SERIES_OP_PIC_DEL SynDtvsSeriesIdInfoSubcmd = 7
)

func (p SynDtvsSeriesIdInfoSubcmd) String() string {
  switch p {
  case SynDtvsSeriesIdInfoSubcmd_EVENT_SERIES_OP_EX_ADD: return "EVENT_SERIES_OP_EX_ADD"
  case SynDtvsSeriesIdInfoSubcmd_EVENT_SERIES_OP_EX_DEL: return "EVENT_SERIES_OP_EX_DEL"
  case SynDtvsSeriesIdInfoSubcmd_EVENT_SERIES_OP_EX_MOD: return "EVENT_SERIES_OP_EX_MOD"
  case SynDtvsSeriesIdInfoSubcmd_EVENT_SERIES_OP_STATUS_EX_MOD: return "EVENT_SERIES_OP_STATUS_EX_MOD"
  case SynDtvsSeriesIdInfoSubcmd_EVENT_SERIES_OP_ADD: return "EVENT_SERIES_OP_ADD"
  case SynDtvsSeriesIdInfoSubcmd_EVENT_SERIES_OP_DEL: return "EVENT_SERIES_OP_DEL"
  case SynDtvsSeriesIdInfoSubcmd_EVENT_SERIES_OP_PIC_DEL: return "EVENT_SERIES_OP_PIC_DEL"
  }
  return "<UNSET>"
}

func SynDtvsSeriesIdInfoSubcmdFromString(s string) (SynDtvsSeriesIdInfoSubcmd, error) {
  switch s {
  case "EVENT_SERIES_OP_EX_ADD": return SynDtvsSeriesIdInfoSubcmd_EVENT_SERIES_OP_EX_ADD, nil 
  case "EVENT_SERIES_OP_EX_DEL": return SynDtvsSeriesIdInfoSubcmd_EVENT_SERIES_OP_EX_DEL, nil 
  case "EVENT_SERIES_OP_EX_MOD": return SynDtvsSeriesIdInfoSubcmd_EVENT_SERIES_OP_EX_MOD, nil 
  case "EVENT_SERIES_OP_STATUS_EX_MOD": return SynDtvsSeriesIdInfoSubcmd_EVENT_SERIES_OP_STATUS_EX_MOD, nil 
  case "EVENT_SERIES_OP_ADD": return SynDtvsSeriesIdInfoSubcmd_EVENT_SERIES_OP_ADD, nil 
  case "EVENT_SERIES_OP_DEL": return SynDtvsSeriesIdInfoSubcmd_EVENT_SERIES_OP_DEL, nil 
  case "EVENT_SERIES_OP_PIC_DEL": return SynDtvsSeriesIdInfoSubcmd_EVENT_SERIES_OP_PIC_DEL, nil 
  }
  return SynDtvsSeriesIdInfoSubcmd(0), fmt.Errorf("not a valid SynDtvsSeriesIdInfoSubcmd string")
}


func SynDtvsSeriesIdInfoSubcmdPtr(v SynDtvsSeriesIdInfoSubcmd) *SynDtvsSeriesIdInfoSubcmd { return &v }

func (p SynDtvsSeriesIdInfoSubcmd) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SynDtvsSeriesIdInfoSubcmd) UnmarshalText(text []byte) error {
q, err := SynDtvsSeriesIdInfoSubcmdFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SynDtvsSeriesIdInfoSubcmd) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SynDtvsSeriesIdInfoSubcmd(v)
return nil
}

func (p * SynDtvsSeriesIdInfoSubcmd) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SyncDtvsProgramPromotionInfoSubcmd int64
const (
  SyncDtvsProgramPromotionInfoSubcmd_SYN_PROGRAM_PROMOTION_ADD SyncDtvsProgramPromotionInfoSubcmd = 0
  SyncDtvsProgramPromotionInfoSubcmd_SYN_PROGRAM_PROMOTION_MOD SyncDtvsProgramPromotionInfoSubcmd = 1
  SyncDtvsProgramPromotionInfoSubcmd_SYN_PROGRAM_PROMOTION_DEL SyncDtvsProgramPromotionInfoSubcmd = 2
  SyncDtvsProgramPromotionInfoSubcmd_SYN_SUBMIT_PROGRAM_PROMOTION SyncDtvsProgramPromotionInfoSubcmd = 3
  SyncDtvsProgramPromotionInfoSubcmd_SYN_RELEASE_PROGRAM_PROMOTION SyncDtvsProgramPromotionInfoSubcmd = 4
  SyncDtvsProgramPromotionInfoSubcmd_SYN_PROMOTION_PROPERTY_MOD SyncDtvsProgramPromotionInfoSubcmd = 5
)

func (p SyncDtvsProgramPromotionInfoSubcmd) String() string {
  switch p {
  case SyncDtvsProgramPromotionInfoSubcmd_SYN_PROGRAM_PROMOTION_ADD: return "SYN_PROGRAM_PROMOTION_ADD"
  case SyncDtvsProgramPromotionInfoSubcmd_SYN_PROGRAM_PROMOTION_MOD: return "SYN_PROGRAM_PROMOTION_MOD"
  case SyncDtvsProgramPromotionInfoSubcmd_SYN_PROGRAM_PROMOTION_DEL: return "SYN_PROGRAM_PROMOTION_DEL"
  case SyncDtvsProgramPromotionInfoSubcmd_SYN_SUBMIT_PROGRAM_PROMOTION: return "SYN_SUBMIT_PROGRAM_PROMOTION"
  case SyncDtvsProgramPromotionInfoSubcmd_SYN_RELEASE_PROGRAM_PROMOTION: return "SYN_RELEASE_PROGRAM_PROMOTION"
  case SyncDtvsProgramPromotionInfoSubcmd_SYN_PROMOTION_PROPERTY_MOD: return "SYN_PROMOTION_PROPERTY_MOD"
  }
  return "<UNSET>"
}

func SyncDtvsProgramPromotionInfoSubcmdFromString(s string) (SyncDtvsProgramPromotionInfoSubcmd, error) {
  switch s {
  case "SYN_PROGRAM_PROMOTION_ADD": return SyncDtvsProgramPromotionInfoSubcmd_SYN_PROGRAM_PROMOTION_ADD, nil 
  case "SYN_PROGRAM_PROMOTION_MOD": return SyncDtvsProgramPromotionInfoSubcmd_SYN_PROGRAM_PROMOTION_MOD, nil 
  case "SYN_PROGRAM_PROMOTION_DEL": return SyncDtvsProgramPromotionInfoSubcmd_SYN_PROGRAM_PROMOTION_DEL, nil 
  case "SYN_SUBMIT_PROGRAM_PROMOTION": return SyncDtvsProgramPromotionInfoSubcmd_SYN_SUBMIT_PROGRAM_PROMOTION, nil 
  case "SYN_RELEASE_PROGRAM_PROMOTION": return SyncDtvsProgramPromotionInfoSubcmd_SYN_RELEASE_PROGRAM_PROMOTION, nil 
  case "SYN_PROMOTION_PROPERTY_MOD": return SyncDtvsProgramPromotionInfoSubcmd_SYN_PROMOTION_PROPERTY_MOD, nil 
  }
  return SyncDtvsProgramPromotionInfoSubcmd(0), fmt.Errorf("not a valid SyncDtvsProgramPromotionInfoSubcmd string")
}


func SyncDtvsProgramPromotionInfoSubcmdPtr(v SyncDtvsProgramPromotionInfoSubcmd) *SyncDtvsProgramPromotionInfoSubcmd { return &v }

func (p SyncDtvsProgramPromotionInfoSubcmd) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SyncDtvsProgramPromotionInfoSubcmd) UnmarshalText(text []byte) error {
q, err := SyncDtvsProgramPromotionInfoSubcmdFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SyncDtvsProgramPromotionInfoSubcmd) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SyncDtvsProgramPromotionInfoSubcmd(v)
return nil
}

func (p * SyncDtvsProgramPromotionInfoSubcmd) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SyncRecommendVerifyModelSubcmd int64
const (
  SyncRecommendVerifyModelSubcmd_SYN_RECOMMEND_RELEASE SyncRecommendVerifyModelSubcmd = 0
  SyncRecommendVerifyModelSubcmd_SYN_RECOMMEND_DEL SyncRecommendVerifyModelSubcmd = 1
)

func (p SyncRecommendVerifyModelSubcmd) String() string {
  switch p {
  case SyncRecommendVerifyModelSubcmd_SYN_RECOMMEND_RELEASE: return "SYN_RECOMMEND_RELEASE"
  case SyncRecommendVerifyModelSubcmd_SYN_RECOMMEND_DEL: return "SYN_RECOMMEND_DEL"
  }
  return "<UNSET>"
}

func SyncRecommendVerifyModelSubcmdFromString(s string) (SyncRecommendVerifyModelSubcmd, error) {
  switch s {
  case "SYN_RECOMMEND_RELEASE": return SyncRecommendVerifyModelSubcmd_SYN_RECOMMEND_RELEASE, nil 
  case "SYN_RECOMMEND_DEL": return SyncRecommendVerifyModelSubcmd_SYN_RECOMMEND_DEL, nil 
  }
  return SyncRecommendVerifyModelSubcmd(0), fmt.Errorf("not a valid SyncRecommendVerifyModelSubcmd string")
}


func SyncRecommendVerifyModelSubcmdPtr(v SyncRecommendVerifyModelSubcmd) *SyncRecommendVerifyModelSubcmd { return &v }

func (p SyncRecommendVerifyModelSubcmd) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SyncRecommendVerifyModelSubcmd) UnmarshalText(text []byte) error {
q, err := SyncRecommendVerifyModelSubcmdFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SyncRecommendVerifyModelSubcmd) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SyncRecommendVerifyModelSubcmd(v)
return nil
}

func (p * SyncRecommendVerifyModelSubcmd) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SyncDtvsMusicStoreInfoSubcmd int64
const (
  SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_INFO_ADD SyncDtvsMusicStoreInfoSubcmd = 0
  SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_INFO_DEL SyncDtvsMusicStoreInfoSubcmd = 1
  SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_INFO_MOD SyncDtvsMusicStoreInfoSubcmd = 2
  SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_INFO_STATUS_MOD SyncDtvsMusicStoreInfoSubcmd = 3
  SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_SINGER_INFO_ADD SyncDtvsMusicStoreInfoSubcmd = 5
  SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_SINGER_INFO_MOD SyncDtvsMusicStoreInfoSubcmd = 6
  SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_SINGER_INFO_DEL SyncDtvsMusicStoreInfoSubcmd = 7
  SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_ALBUM_INFO_ADD SyncDtvsMusicStoreInfoSubcmd = 10
  SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_ALBUM_INFO_DEL SyncDtvsMusicStoreInfoSubcmd = 11
  SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_ALBUM_INFO_MOD SyncDtvsMusicStoreInfoSubcmd = 12
  SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_ALBUM_INFO_STATUS_MOD SyncDtvsMusicStoreInfoSubcmd = 13
  SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_POSTER_ADD SyncDtvsMusicStoreInfoSubcmd = 15
  SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_POSTER_DEL SyncDtvsMusicStoreInfoSubcmd = 16
)

func (p SyncDtvsMusicStoreInfoSubcmd) String() string {
  switch p {
  case SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_INFO_ADD: return "SYN_MUSIC_INFO_ADD"
  case SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_INFO_DEL: return "SYN_MUSIC_INFO_DEL"
  case SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_INFO_MOD: return "SYN_MUSIC_INFO_MOD"
  case SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_INFO_STATUS_MOD: return "SYN_MUSIC_INFO_STATUS_MOD"
  case SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_SINGER_INFO_ADD: return "SYN_MUSIC_SINGER_INFO_ADD"
  case SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_SINGER_INFO_MOD: return "SYN_MUSIC_SINGER_INFO_MOD"
  case SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_SINGER_INFO_DEL: return "SYN_MUSIC_SINGER_INFO_DEL"
  case SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_ALBUM_INFO_ADD: return "SYN_MUSIC_ALBUM_INFO_ADD"
  case SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_ALBUM_INFO_DEL: return "SYN_MUSIC_ALBUM_INFO_DEL"
  case SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_ALBUM_INFO_MOD: return "SYN_MUSIC_ALBUM_INFO_MOD"
  case SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_ALBUM_INFO_STATUS_MOD: return "SYN_MUSIC_ALBUM_INFO_STATUS_MOD"
  case SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_POSTER_ADD: return "SYN_MUSIC_POSTER_ADD"
  case SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_POSTER_DEL: return "SYN_MUSIC_POSTER_DEL"
  }
  return "<UNSET>"
}

func SyncDtvsMusicStoreInfoSubcmdFromString(s string) (SyncDtvsMusicStoreInfoSubcmd, error) {
  switch s {
  case "SYN_MUSIC_INFO_ADD": return SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_INFO_ADD, nil 
  case "SYN_MUSIC_INFO_DEL": return SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_INFO_DEL, nil 
  case "SYN_MUSIC_INFO_MOD": return SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_INFO_MOD, nil 
  case "SYN_MUSIC_INFO_STATUS_MOD": return SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_INFO_STATUS_MOD, nil 
  case "SYN_MUSIC_SINGER_INFO_ADD": return SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_SINGER_INFO_ADD, nil 
  case "SYN_MUSIC_SINGER_INFO_MOD": return SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_SINGER_INFO_MOD, nil 
  case "SYN_MUSIC_SINGER_INFO_DEL": return SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_SINGER_INFO_DEL, nil 
  case "SYN_MUSIC_ALBUM_INFO_ADD": return SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_ALBUM_INFO_ADD, nil 
  case "SYN_MUSIC_ALBUM_INFO_DEL": return SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_ALBUM_INFO_DEL, nil 
  case "SYN_MUSIC_ALBUM_INFO_MOD": return SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_ALBUM_INFO_MOD, nil 
  case "SYN_MUSIC_ALBUM_INFO_STATUS_MOD": return SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_ALBUM_INFO_STATUS_MOD, nil 
  case "SYN_MUSIC_POSTER_ADD": return SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_POSTER_ADD, nil 
  case "SYN_MUSIC_POSTER_DEL": return SyncDtvsMusicStoreInfoSubcmd_SYN_MUSIC_POSTER_DEL, nil 
  }
  return SyncDtvsMusicStoreInfoSubcmd(0), fmt.Errorf("not a valid SyncDtvsMusicStoreInfoSubcmd string")
}


func SyncDtvsMusicStoreInfoSubcmdPtr(v SyncDtvsMusicStoreInfoSubcmd) *SyncDtvsMusicStoreInfoSubcmd { return &v }

func (p SyncDtvsMusicStoreInfoSubcmd) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SyncDtvsMusicStoreInfoSubcmd) UnmarshalText(text []byte) error {
q, err := SyncDtvsMusicStoreInfoSubcmdFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SyncDtvsMusicStoreInfoSubcmd) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SyncDtvsMusicStoreInfoSubcmd(v)
return nil
}

func (p * SyncDtvsMusicStoreInfoSubcmd) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SynLittleMsgSubcmd int64
const (
  SynLittleMsgSubcmd_ILOGMASTER_START SynLittleMsgSubcmd = 3
  SynLittleMsgSubcmd_SYN_NEWS_ADD SynLittleMsgSubcmd = 390
  SynLittleMsgSubcmd_SYN_NEWS_DEL SynLittleMsgSubcmd = 391
  SynLittleMsgSubcmd_SYN_COLUMN_ADD SynLittleMsgSubcmd = 392
  SynLittleMsgSubcmd_SYN_COLUMN_DEL SynLittleMsgSubcmd = 393
)

func (p SynLittleMsgSubcmd) String() string {
  switch p {
  case SynLittleMsgSubcmd_ILOGMASTER_START: return "ILOGMASTER_START"
  case SynLittleMsgSubcmd_SYN_NEWS_ADD: return "SYN_NEWS_ADD"
  case SynLittleMsgSubcmd_SYN_NEWS_DEL: return "SYN_NEWS_DEL"
  case SynLittleMsgSubcmd_SYN_COLUMN_ADD: return "SYN_COLUMN_ADD"
  case SynLittleMsgSubcmd_SYN_COLUMN_DEL: return "SYN_COLUMN_DEL"
  }
  return "<UNSET>"
}

func SynLittleMsgSubcmdFromString(s string) (SynLittleMsgSubcmd, error) {
  switch s {
  case "ILOGMASTER_START": return SynLittleMsgSubcmd_ILOGMASTER_START, nil 
  case "SYN_NEWS_ADD": return SynLittleMsgSubcmd_SYN_NEWS_ADD, nil 
  case "SYN_NEWS_DEL": return SynLittleMsgSubcmd_SYN_NEWS_DEL, nil 
  case "SYN_COLUMN_ADD": return SynLittleMsgSubcmd_SYN_COLUMN_ADD, nil 
  case "SYN_COLUMN_DEL": return SynLittleMsgSubcmd_SYN_COLUMN_DEL, nil 
  }
  return SynLittleMsgSubcmd(0), fmt.Errorf("not a valid SynLittleMsgSubcmd string")
}


func SynLittleMsgSubcmdPtr(v SynLittleMsgSubcmd) *SynLittleMsgSubcmd { return &v }

func (p SynLittleMsgSubcmd) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SynLittleMsgSubcmd) UnmarshalText(text []byte) error {
q, err := SynLittleMsgSubcmdFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SynLittleMsgSubcmd) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SynLittleMsgSubcmd(v)
return nil
}

func (p * SynLittleMsgSubcmd) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type XtTsgMsgCategory int64
const (
  XtTsgMsgCategory_TSG_BLACK_INFO XtTsgMsgCategory = 1
  XtTsgMsgCategory_TSG_POSTER_INFO XtTsgMsgCategory = 2
  XtTsgMsgCategory_TSG_BLACK_AND_POSTER_INFO XtTsgMsgCategory = 3
  XtTsgMsgCategory_TSG_VIDEO_THUMBNAIL_DIR_INFO XtTsgMsgCategory = 4
  XtTsgMsgCategory_TSG_MOVIE_POSTER_REQUEST XtTsgMsgCategory = 5
  XtTsgMsgCategory_TSG_MOVIE_POSTER_RESPONSE XtTsgMsgCategory = 6
  XtTsgMsgCategory_TSG_STANDARD_POSTER_INFO XtTsgMsgCategory = 7
  XtTsgMsgCategory_TSG_NONSTANDARD_POSTER_INFO XtTsgMsgCategory = 8
  XtTsgMsgCategory_TSG_THUMBNAIL_PKG_INFO XtTsgMsgCategory = 9
  XtTsgMsgCategory_TSG_NEW_MOVIE_POSTER_RESPONSE XtTsgMsgCategory = 10
  XtTsgMsgCategory_TSG_IDX_REQUEST XtTsgMsgCategory = 20
  XtTsgMsgCategory_TSG_IDX_RESPONSE XtTsgMsgCategory = 21
  XtTsgMsgCategory_TSG_GEN_POSTER_REQUEST XtTsgMsgCategory = 30
  XtTsgMsgCategory_TSG_GEN_POSTER_RESPONSE XtTsgMsgCategory = 31
  XtTsgMsgCategory_TSG_GEN_THUMBNAIL_REQUEST XtTsgMsgCategory = 32
  XtTsgMsgCategory_TSG_GEN_THUMBNAIL_RESPONSE XtTsgMsgCategory = 33
  XtTsgMsgCategory_TSG_GEN_IDX_REQUEST XtTsgMsgCategory = 34
  XtTsgMsgCategory_TSG_GEN_IDX_RESPONSE XtTsgMsgCategory = 35
  XtTsgMsgCategory_TSG_GEN_POSTER_THUMBNAIL_IDX_REQUEST XtTsgMsgCategory = 36
  XtTsgMsgCategory_TSG_GEN_POSTER_THUMBNAIL_IDX_RESPONSE XtTsgMsgCategory = 37
  XtTsgMsgCategory_TSG_REPORT_VIDEO_STATUS_REQUEST XtTsgMsgCategory = 38
  XtTsgMsgCategory_TSG_REPORT_VIDEO_STATUS_RESPONSE XtTsgMsgCategory = 39
  XtTsgMsgCategory_TSG_NOTIFY_DELETE_TASK_REQUEST XtTsgMsgCategory = 40
  XtTsgMsgCategory_TSG_NOTIFY_DELETE_TASK_RESPONSE XtTsgMsgCategory = 41
  XtTsgMsgCategory_TSG_POSTER_THUMBNAIL_IDX_PROGRESS_REQUEST XtTsgMsgCategory = 42
  XtTsgMsgCategory_TSG_POSTER_THUMBNAIL_IDX_PROGRESS_RESPONSE XtTsgMsgCategory = 43
  XtTsgMsgCategory_TSG_REGEN_RECORD_THUMBNAIL_REQUEST XtTsgMsgCategory = 44
  XtTsgMsgCategory_TSG_REGEN_RECORD_THUMBNAIL_RESPONSE XtTsgMsgCategory = 45
  XtTsgMsgCategory_TSG_REGEN_RECORD_THUMBNAIL_PROGRESS_REQUEST XtTsgMsgCategory = 46
  XtTsgMsgCategory_TSG_REGEN_RECORD_THUMBNAIL_PROGRESS_RESPONSE XtTsgMsgCategory = 47
  XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_RECORD_TS_REQUEST XtTsgMsgCategory = 48
  XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_RECORD_TS_RESPONSE XtTsgMsgCategory = 49
  XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_RECORD_TS_PROGRESS_REQUEST XtTsgMsgCategory = 50
  XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_RECORD_TS_PROGRESS_RESPONSE XtTsgMsgCategory = 51
  XtTsgMsgCategory_TSG_TRANS_RECORD_POSTER_SIZE_REQUEST XtTsgMsgCategory = 52
  XtTsgMsgCategory_TSG_TRANS_RECORD_POSTER_SIZE_RESPONSE XtTsgMsgCategory = 53
  XtTsgMsgCategory_TSG_TRANS_RECORD_POSTER_SIZE_PROGRESS_REQUEST XtTsgMsgCategory = 54
  XtTsgMsgCategory_TSG_TRANS_RECORD_POSTER_SIZE_PROGRESS_RESPONSE XtTsgMsgCategory = 55
  XtTsgMsgCategory_TSG_REGEN_MOVIE_THUMBNAIL_OR_POSTER_REQUEST XtTsgMsgCategory = 56
  XtTsgMsgCategory_TSG_REGEN_MOVIE_THUMBNAIL_OR_POSTER_RESPONSE XtTsgMsgCategory = 57
  XtTsgMsgCategory_TSG_REGEN_MOVIE_THUMBNAIL_OR_POSTER_PROGRESS_REQUEST XtTsgMsgCategory = 58
  XtTsgMsgCategory_TSG_REGEN_MOVIE_THUMBNAIL_OR_POSTER_PROGRESS_RESPONSE XtTsgMsgCategory = 59
  XtTsgMsgCategory_TSG_GEN_MUTLI_FILE_EXTERN_INFO_REQUEST XtTsgMsgCategory = 60
  XtTsgMsgCategory_TSG_GEN_MUTLI_FILE_EXTERN_INFO_RESPONSE XtTsgMsgCategory = 61
  XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_MOVIE_REQUEST XtTsgMsgCategory = 62
  XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_MOVIE_RESPONSE XtTsgMsgCategory = 63
  XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_MOVIE_PROGRESS_REQUEST XtTsgMsgCategory = 64
  XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_MOVIE_PROGRESS_RESPONSE XtTsgMsgCategory = 65
  XtTsgMsgCategory_TSG_IMPORT_LOOKBACK_STREAM_REQUEST XtTsgMsgCategory = 66
  XtTsgMsgCategory_TSG_IMPORT_LOOKBACK_STREAM_RESPONSE XtTsgMsgCategory = 67
  XtTsgMsgCategory_TSG_SUPPLEMENT_MUTLI_FILE_EXTERN_INFO_REQUEST XtTsgMsgCategory = 68
  XtTsgMsgCategory_TSG_SUPPLEMENT_MUTLI_FILE_EXTERN_INFO_RESPONSE XtTsgMsgCategory = 69
  XtTsgMsgCategory_TSG_UPDATE_SAMPLE_INFO_REQUEST XtTsgMsgCategory = 70
  XtTsgMsgCategory_TSG_UPDATE_SAMPLE_INFO_RESPONSE XtTsgMsgCategory = 71
  XtTsgMsgCategory_TSG_PROGRAM_DETECT_INFO_REQUEST XtTsgMsgCategory = 72
  XtTsgMsgCategory_TSG_PROGRAM_DETECT_INFO_RESPONSE XtTsgMsgCategory = 73
  XtTsgMsgCategory_TSG_RECOVER_TS_TOTAL_IDX_REQUEST XtTsgMsgCategory = 74
  XtTsgMsgCategory_TSG_RECOVER_TS_TOTAL_IDX_RESPONSE XtTsgMsgCategory = 75
  XtTsgMsgCategory_TSG_PROGDETECT_CONTROL_INFO_REQUST XtTsgMsgCategory = 76
  XtTsgMsgCategory_TSG_REPLACE_LOOKBACK_STREAM_REQUEST XtTsgMsgCategory = 77
  XtTsgMsgCategory_TSG_REPLACE_LOOKBACK_STREAM_RESPONSE XtTsgMsgCategory = 78
  XtTsgMsgCategory_TSG_DELETE_TASK_REQUEST XtTsgMsgCategory = 79
  XtTsgMsgCategory_TSG_DELETE_TASK_RESPONSE XtTsgMsgCategory = 80
  XtTsgMsgCategory_TSG_UPDATE_TSIDX_TO_REDIS_REQUEST XtTsgMsgCategory = 81
  XtTsgMsgCategory_TSG_UPDATE_TSIDX_TO_REDIS_RESPONSE XtTsgMsgCategory = 82
  XtTsgMsgCategory_TSG_QUERY_TASK_REQUEST XtTsgMsgCategory = 83
  XtTsgMsgCategory_TSG_QUERY_TASK_RESPONSE XtTsgMsgCategory = 84
  XtTsgMsgCategory_TSG_TASK_COUNT_REPORT_REQUEST XtTsgMsgCategory = 85
  XtTsgMsgCategory_TSG_TASK_COUNT_REPORT_RESPONSE XtTsgMsgCategory = 86
  XtTsgMsgCategory_TSG_REGEN_RECORD_CDN_INDEX_REQUEST XtTsgMsgCategory = 87
  XtTsgMsgCategory_TSG_REGEN_RECORD_CDN_INDEX_RESPONSE XtTsgMsgCategory = 88
  XtTsgMsgCategory_TSG_REGEN_STREAM_INFO_REQUEST XtTsgMsgCategory = 89
  XtTsgMsgCategory_TSG_REGEN_STREAM_INFO_RESPONSE XtTsgMsgCategory = 90
  XtTsgMsgCategory_TSG_GEN_TOPN_FILE_REQUEST XtTsgMsgCategory = 91
  XtTsgMsgCategory_TSG_TOPN_FINISH_REQUEST XtTsgMsgCategory = 92
  XtTsgMsgCategory_TSG_SAMPLE_EXTRACT_REQUEST XtTsgMsgCategory = 93
  XtTsgMsgCategory_TSG_SAMPLE_EXTRACT_RESPONSE XtTsgMsgCategory = 94
  XtTsgMsgCategory_TSG_SAMPLE_UPDATE_REQUEST XtTsgMsgCategory = 95
  XtTsgMsgCategory_TSG_SAMPLE_UPDATE_RESPONSE XtTsgMsgCategory = 96
  XtTsgMsgCategory_TSG_EXTRACT_EVENT_POSTER_REQUEST XtTsgMsgCategory = 97
  XtTsgMsgCategory_TSG_EXTRACT_EVENT_POSTER_RESPONSE XtTsgMsgCategory = 98
  XtTsgMsgCategory_TSG_EXTRACT_MOVIE_POSTER_REQUEST XtTsgMsgCategory = 99
  XtTsgMsgCategory_TSG_EXTRACT_MOVIE_POSTER_RESPONSE XtTsgMsgCategory = 100
  XtTsgMsgCategory_TSG_EXTRACT_FRAME_SEEK_REQUEST XtTsgMsgCategory = 101
  XtTsgMsgCategory_TSG_EXTRACT_FRAME_SEEK_RESPONSE XtTsgMsgCategory = 102
)

func (p XtTsgMsgCategory) String() string {
  switch p {
  case XtTsgMsgCategory_TSG_BLACK_INFO: return "TSG_BLACK_INFO"
  case XtTsgMsgCategory_TSG_POSTER_INFO: return "TSG_POSTER_INFO"
  case XtTsgMsgCategory_TSG_BLACK_AND_POSTER_INFO: return "TSG_BLACK_AND_POSTER_INFO"
  case XtTsgMsgCategory_TSG_VIDEO_THUMBNAIL_DIR_INFO: return "TSG_VIDEO_THUMBNAIL_DIR_INFO"
  case XtTsgMsgCategory_TSG_MOVIE_POSTER_REQUEST: return "TSG_MOVIE_POSTER_REQUEST"
  case XtTsgMsgCategory_TSG_MOVIE_POSTER_RESPONSE: return "TSG_MOVIE_POSTER_RESPONSE"
  case XtTsgMsgCategory_TSG_STANDARD_POSTER_INFO: return "TSG_STANDARD_POSTER_INFO"
  case XtTsgMsgCategory_TSG_NONSTANDARD_POSTER_INFO: return "TSG_NONSTANDARD_POSTER_INFO"
  case XtTsgMsgCategory_TSG_THUMBNAIL_PKG_INFO: return "TSG_THUMBNAIL_PKG_INFO"
  case XtTsgMsgCategory_TSG_NEW_MOVIE_POSTER_RESPONSE: return "TSG_NEW_MOVIE_POSTER_RESPONSE"
  case XtTsgMsgCategory_TSG_IDX_REQUEST: return "TSG_IDX_REQUEST"
  case XtTsgMsgCategory_TSG_IDX_RESPONSE: return "TSG_IDX_RESPONSE"
  case XtTsgMsgCategory_TSG_GEN_POSTER_REQUEST: return "TSG_GEN_POSTER_REQUEST"
  case XtTsgMsgCategory_TSG_GEN_POSTER_RESPONSE: return "TSG_GEN_POSTER_RESPONSE"
  case XtTsgMsgCategory_TSG_GEN_THUMBNAIL_REQUEST: return "TSG_GEN_THUMBNAIL_REQUEST"
  case XtTsgMsgCategory_TSG_GEN_THUMBNAIL_RESPONSE: return "TSG_GEN_THUMBNAIL_RESPONSE"
  case XtTsgMsgCategory_TSG_GEN_IDX_REQUEST: return "TSG_GEN_IDX_REQUEST"
  case XtTsgMsgCategory_TSG_GEN_IDX_RESPONSE: return "TSG_GEN_IDX_RESPONSE"
  case XtTsgMsgCategory_TSG_GEN_POSTER_THUMBNAIL_IDX_REQUEST: return "TSG_GEN_POSTER_THUMBNAIL_IDX_REQUEST"
  case XtTsgMsgCategory_TSG_GEN_POSTER_THUMBNAIL_IDX_RESPONSE: return "TSG_GEN_POSTER_THUMBNAIL_IDX_RESPONSE"
  case XtTsgMsgCategory_TSG_REPORT_VIDEO_STATUS_REQUEST: return "TSG_REPORT_VIDEO_STATUS_REQUEST"
  case XtTsgMsgCategory_TSG_REPORT_VIDEO_STATUS_RESPONSE: return "TSG_REPORT_VIDEO_STATUS_RESPONSE"
  case XtTsgMsgCategory_TSG_NOTIFY_DELETE_TASK_REQUEST: return "TSG_NOTIFY_DELETE_TASK_REQUEST"
  case XtTsgMsgCategory_TSG_NOTIFY_DELETE_TASK_RESPONSE: return "TSG_NOTIFY_DELETE_TASK_RESPONSE"
  case XtTsgMsgCategory_TSG_POSTER_THUMBNAIL_IDX_PROGRESS_REQUEST: return "TSG_POSTER_THUMBNAIL_IDX_PROGRESS_REQUEST"
  case XtTsgMsgCategory_TSG_POSTER_THUMBNAIL_IDX_PROGRESS_RESPONSE: return "TSG_POSTER_THUMBNAIL_IDX_PROGRESS_RESPONSE"
  case XtTsgMsgCategory_TSG_REGEN_RECORD_THUMBNAIL_REQUEST: return "TSG_REGEN_RECORD_THUMBNAIL_REQUEST"
  case XtTsgMsgCategory_TSG_REGEN_RECORD_THUMBNAIL_RESPONSE: return "TSG_REGEN_RECORD_THUMBNAIL_RESPONSE"
  case XtTsgMsgCategory_TSG_REGEN_RECORD_THUMBNAIL_PROGRESS_REQUEST: return "TSG_REGEN_RECORD_THUMBNAIL_PROGRESS_REQUEST"
  case XtTsgMsgCategory_TSG_REGEN_RECORD_THUMBNAIL_PROGRESS_RESPONSE: return "TSG_REGEN_RECORD_THUMBNAIL_PROGRESS_RESPONSE"
  case XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_RECORD_TS_REQUEST: return "TSG_EXTRACT_MOVIE_FILE_FROM_RECORD_TS_REQUEST"
  case XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_RECORD_TS_RESPONSE: return "TSG_EXTRACT_MOVIE_FILE_FROM_RECORD_TS_RESPONSE"
  case XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_RECORD_TS_PROGRESS_REQUEST: return "TSG_EXTRACT_MOVIE_FILE_FROM_RECORD_TS_PROGRESS_REQUEST"
  case XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_RECORD_TS_PROGRESS_RESPONSE: return "TSG_EXTRACT_MOVIE_FILE_FROM_RECORD_TS_PROGRESS_RESPONSE"
  case XtTsgMsgCategory_TSG_TRANS_RECORD_POSTER_SIZE_REQUEST: return "TSG_TRANS_RECORD_POSTER_SIZE_REQUEST"
  case XtTsgMsgCategory_TSG_TRANS_RECORD_POSTER_SIZE_RESPONSE: return "TSG_TRANS_RECORD_POSTER_SIZE_RESPONSE"
  case XtTsgMsgCategory_TSG_TRANS_RECORD_POSTER_SIZE_PROGRESS_REQUEST: return "TSG_TRANS_RECORD_POSTER_SIZE_PROGRESS_REQUEST"
  case XtTsgMsgCategory_TSG_TRANS_RECORD_POSTER_SIZE_PROGRESS_RESPONSE: return "TSG_TRANS_RECORD_POSTER_SIZE_PROGRESS_RESPONSE"
  case XtTsgMsgCategory_TSG_REGEN_MOVIE_THUMBNAIL_OR_POSTER_REQUEST: return "TSG_REGEN_MOVIE_THUMBNAIL_OR_POSTER_REQUEST"
  case XtTsgMsgCategory_TSG_REGEN_MOVIE_THUMBNAIL_OR_POSTER_RESPONSE: return "TSG_REGEN_MOVIE_THUMBNAIL_OR_POSTER_RESPONSE"
  case XtTsgMsgCategory_TSG_REGEN_MOVIE_THUMBNAIL_OR_POSTER_PROGRESS_REQUEST: return "TSG_REGEN_MOVIE_THUMBNAIL_OR_POSTER_PROGRESS_REQUEST"
  case XtTsgMsgCategory_TSG_REGEN_MOVIE_THUMBNAIL_OR_POSTER_PROGRESS_RESPONSE: return "TSG_REGEN_MOVIE_THUMBNAIL_OR_POSTER_PROGRESS_RESPONSE"
  case XtTsgMsgCategory_TSG_GEN_MUTLI_FILE_EXTERN_INFO_REQUEST: return "TSG_GEN_MUTLI_FILE_EXTERN_INFO_REQUEST"
  case XtTsgMsgCategory_TSG_GEN_MUTLI_FILE_EXTERN_INFO_RESPONSE: return "TSG_GEN_MUTLI_FILE_EXTERN_INFO_RESPONSE"
  case XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_MOVIE_REQUEST: return "TSG_EXTRACT_MOVIE_FILE_FROM_MOVIE_REQUEST"
  case XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_MOVIE_RESPONSE: return "TSG_EXTRACT_MOVIE_FILE_FROM_MOVIE_RESPONSE"
  case XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_MOVIE_PROGRESS_REQUEST: return "TSG_EXTRACT_MOVIE_FILE_FROM_MOVIE_PROGRESS_REQUEST"
  case XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_MOVIE_PROGRESS_RESPONSE: return "TSG_EXTRACT_MOVIE_FILE_FROM_MOVIE_PROGRESS_RESPONSE"
  case XtTsgMsgCategory_TSG_IMPORT_LOOKBACK_STREAM_REQUEST: return "TSG_IMPORT_LOOKBACK_STREAM_REQUEST"
  case XtTsgMsgCategory_TSG_IMPORT_LOOKBACK_STREAM_RESPONSE: return "TSG_IMPORT_LOOKBACK_STREAM_RESPONSE"
  case XtTsgMsgCategory_TSG_SUPPLEMENT_MUTLI_FILE_EXTERN_INFO_REQUEST: return "TSG_SUPPLEMENT_MUTLI_FILE_EXTERN_INFO_REQUEST"
  case XtTsgMsgCategory_TSG_SUPPLEMENT_MUTLI_FILE_EXTERN_INFO_RESPONSE: return "TSG_SUPPLEMENT_MUTLI_FILE_EXTERN_INFO_RESPONSE"
  case XtTsgMsgCategory_TSG_UPDATE_SAMPLE_INFO_REQUEST: return "TSG_UPDATE_SAMPLE_INFO_REQUEST"
  case XtTsgMsgCategory_TSG_UPDATE_SAMPLE_INFO_RESPONSE: return "TSG_UPDATE_SAMPLE_INFO_RESPONSE"
  case XtTsgMsgCategory_TSG_PROGRAM_DETECT_INFO_REQUEST: return "TSG_PROGRAM_DETECT_INFO_REQUEST"
  case XtTsgMsgCategory_TSG_PROGRAM_DETECT_INFO_RESPONSE: return "TSG_PROGRAM_DETECT_INFO_RESPONSE"
  case XtTsgMsgCategory_TSG_RECOVER_TS_TOTAL_IDX_REQUEST: return "TSG_RECOVER_TS_TOTAL_IDX_REQUEST"
  case XtTsgMsgCategory_TSG_RECOVER_TS_TOTAL_IDX_RESPONSE: return "TSG_RECOVER_TS_TOTAL_IDX_RESPONSE"
  case XtTsgMsgCategory_TSG_PROGDETECT_CONTROL_INFO_REQUST: return "TSG_PROGDETECT_CONTROL_INFO_REQUST"
  case XtTsgMsgCategory_TSG_REPLACE_LOOKBACK_STREAM_REQUEST: return "TSG_REPLACE_LOOKBACK_STREAM_REQUEST"
  case XtTsgMsgCategory_TSG_REPLACE_LOOKBACK_STREAM_RESPONSE: return "TSG_REPLACE_LOOKBACK_STREAM_RESPONSE"
  case XtTsgMsgCategory_TSG_DELETE_TASK_REQUEST: return "TSG_DELETE_TASK_REQUEST"
  case XtTsgMsgCategory_TSG_DELETE_TASK_RESPONSE: return "TSG_DELETE_TASK_RESPONSE"
  case XtTsgMsgCategory_TSG_UPDATE_TSIDX_TO_REDIS_REQUEST: return "TSG_UPDATE_TSIDX_TO_REDIS_REQUEST"
  case XtTsgMsgCategory_TSG_UPDATE_TSIDX_TO_REDIS_RESPONSE: return "TSG_UPDATE_TSIDX_TO_REDIS_RESPONSE"
  case XtTsgMsgCategory_TSG_QUERY_TASK_REQUEST: return "TSG_QUERY_TASK_REQUEST"
  case XtTsgMsgCategory_TSG_QUERY_TASK_RESPONSE: return "TSG_QUERY_TASK_RESPONSE"
  case XtTsgMsgCategory_TSG_TASK_COUNT_REPORT_REQUEST: return "TSG_TASK_COUNT_REPORT_REQUEST"
  case XtTsgMsgCategory_TSG_TASK_COUNT_REPORT_RESPONSE: return "TSG_TASK_COUNT_REPORT_RESPONSE"
  case XtTsgMsgCategory_TSG_REGEN_RECORD_CDN_INDEX_REQUEST: return "TSG_REGEN_RECORD_CDN_INDEX_REQUEST"
  case XtTsgMsgCategory_TSG_REGEN_RECORD_CDN_INDEX_RESPONSE: return "TSG_REGEN_RECORD_CDN_INDEX_RESPONSE"
  case XtTsgMsgCategory_TSG_REGEN_STREAM_INFO_REQUEST: return "TSG_REGEN_STREAM_INFO_REQUEST"
  case XtTsgMsgCategory_TSG_REGEN_STREAM_INFO_RESPONSE: return "TSG_REGEN_STREAM_INFO_RESPONSE"
  case XtTsgMsgCategory_TSG_GEN_TOPN_FILE_REQUEST: return "TSG_GEN_TOPN_FILE_REQUEST"
  case XtTsgMsgCategory_TSG_TOPN_FINISH_REQUEST: return "TSG_TOPN_FINISH_REQUEST"
  case XtTsgMsgCategory_TSG_SAMPLE_EXTRACT_REQUEST: return "TSG_SAMPLE_EXTRACT_REQUEST"
  case XtTsgMsgCategory_TSG_SAMPLE_EXTRACT_RESPONSE: return "TSG_SAMPLE_EXTRACT_RESPONSE"
  case XtTsgMsgCategory_TSG_SAMPLE_UPDATE_REQUEST: return "TSG_SAMPLE_UPDATE_REQUEST"
  case XtTsgMsgCategory_TSG_SAMPLE_UPDATE_RESPONSE: return "TSG_SAMPLE_UPDATE_RESPONSE"
  case XtTsgMsgCategory_TSG_EXTRACT_EVENT_POSTER_REQUEST: return "TSG_EXTRACT_EVENT_POSTER_REQUEST"
  case XtTsgMsgCategory_TSG_EXTRACT_EVENT_POSTER_RESPONSE: return "TSG_EXTRACT_EVENT_POSTER_RESPONSE"
  case XtTsgMsgCategory_TSG_EXTRACT_MOVIE_POSTER_REQUEST: return "TSG_EXTRACT_MOVIE_POSTER_REQUEST"
  case XtTsgMsgCategory_TSG_EXTRACT_MOVIE_POSTER_RESPONSE: return "TSG_EXTRACT_MOVIE_POSTER_RESPONSE"
  case XtTsgMsgCategory_TSG_EXTRACT_FRAME_SEEK_REQUEST: return "TSG_EXTRACT_FRAME_SEEK_REQUEST"
  case XtTsgMsgCategory_TSG_EXTRACT_FRAME_SEEK_RESPONSE: return "TSG_EXTRACT_FRAME_SEEK_RESPONSE"
  }
  return "<UNSET>"
}

func XtTsgMsgCategoryFromString(s string) (XtTsgMsgCategory, error) {
  switch s {
  case "TSG_BLACK_INFO": return XtTsgMsgCategory_TSG_BLACK_INFO, nil 
  case "TSG_POSTER_INFO": return XtTsgMsgCategory_TSG_POSTER_INFO, nil 
  case "TSG_BLACK_AND_POSTER_INFO": return XtTsgMsgCategory_TSG_BLACK_AND_POSTER_INFO, nil 
  case "TSG_VIDEO_THUMBNAIL_DIR_INFO": return XtTsgMsgCategory_TSG_VIDEO_THUMBNAIL_DIR_INFO, nil 
  case "TSG_MOVIE_POSTER_REQUEST": return XtTsgMsgCategory_TSG_MOVIE_POSTER_REQUEST, nil 
  case "TSG_MOVIE_POSTER_RESPONSE": return XtTsgMsgCategory_TSG_MOVIE_POSTER_RESPONSE, nil 
  case "TSG_STANDARD_POSTER_INFO": return XtTsgMsgCategory_TSG_STANDARD_POSTER_INFO, nil 
  case "TSG_NONSTANDARD_POSTER_INFO": return XtTsgMsgCategory_TSG_NONSTANDARD_POSTER_INFO, nil 
  case "TSG_THUMBNAIL_PKG_INFO": return XtTsgMsgCategory_TSG_THUMBNAIL_PKG_INFO, nil 
  case "TSG_NEW_MOVIE_POSTER_RESPONSE": return XtTsgMsgCategory_TSG_NEW_MOVIE_POSTER_RESPONSE, nil 
  case "TSG_IDX_REQUEST": return XtTsgMsgCategory_TSG_IDX_REQUEST, nil 
  case "TSG_IDX_RESPONSE": return XtTsgMsgCategory_TSG_IDX_RESPONSE, nil 
  case "TSG_GEN_POSTER_REQUEST": return XtTsgMsgCategory_TSG_GEN_POSTER_REQUEST, nil 
  case "TSG_GEN_POSTER_RESPONSE": return XtTsgMsgCategory_TSG_GEN_POSTER_RESPONSE, nil 
  case "TSG_GEN_THUMBNAIL_REQUEST": return XtTsgMsgCategory_TSG_GEN_THUMBNAIL_REQUEST, nil 
  case "TSG_GEN_THUMBNAIL_RESPONSE": return XtTsgMsgCategory_TSG_GEN_THUMBNAIL_RESPONSE, nil 
  case "TSG_GEN_IDX_REQUEST": return XtTsgMsgCategory_TSG_GEN_IDX_REQUEST, nil 
  case "TSG_GEN_IDX_RESPONSE": return XtTsgMsgCategory_TSG_GEN_IDX_RESPONSE, nil 
  case "TSG_GEN_POSTER_THUMBNAIL_IDX_REQUEST": return XtTsgMsgCategory_TSG_GEN_POSTER_THUMBNAIL_IDX_REQUEST, nil 
  case "TSG_GEN_POSTER_THUMBNAIL_IDX_RESPONSE": return XtTsgMsgCategory_TSG_GEN_POSTER_THUMBNAIL_IDX_RESPONSE, nil 
  case "TSG_REPORT_VIDEO_STATUS_REQUEST": return XtTsgMsgCategory_TSG_REPORT_VIDEO_STATUS_REQUEST, nil 
  case "TSG_REPORT_VIDEO_STATUS_RESPONSE": return XtTsgMsgCategory_TSG_REPORT_VIDEO_STATUS_RESPONSE, nil 
  case "TSG_NOTIFY_DELETE_TASK_REQUEST": return XtTsgMsgCategory_TSG_NOTIFY_DELETE_TASK_REQUEST, nil 
  case "TSG_NOTIFY_DELETE_TASK_RESPONSE": return XtTsgMsgCategory_TSG_NOTIFY_DELETE_TASK_RESPONSE, nil 
  case "TSG_POSTER_THUMBNAIL_IDX_PROGRESS_REQUEST": return XtTsgMsgCategory_TSG_POSTER_THUMBNAIL_IDX_PROGRESS_REQUEST, nil 
  case "TSG_POSTER_THUMBNAIL_IDX_PROGRESS_RESPONSE": return XtTsgMsgCategory_TSG_POSTER_THUMBNAIL_IDX_PROGRESS_RESPONSE, nil 
  case "TSG_REGEN_RECORD_THUMBNAIL_REQUEST": return XtTsgMsgCategory_TSG_REGEN_RECORD_THUMBNAIL_REQUEST, nil 
  case "TSG_REGEN_RECORD_THUMBNAIL_RESPONSE": return XtTsgMsgCategory_TSG_REGEN_RECORD_THUMBNAIL_RESPONSE, nil 
  case "TSG_REGEN_RECORD_THUMBNAIL_PROGRESS_REQUEST": return XtTsgMsgCategory_TSG_REGEN_RECORD_THUMBNAIL_PROGRESS_REQUEST, nil 
  case "TSG_REGEN_RECORD_THUMBNAIL_PROGRESS_RESPONSE": return XtTsgMsgCategory_TSG_REGEN_RECORD_THUMBNAIL_PROGRESS_RESPONSE, nil 
  case "TSG_EXTRACT_MOVIE_FILE_FROM_RECORD_TS_REQUEST": return XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_RECORD_TS_REQUEST, nil 
  case "TSG_EXTRACT_MOVIE_FILE_FROM_RECORD_TS_RESPONSE": return XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_RECORD_TS_RESPONSE, nil 
  case "TSG_EXTRACT_MOVIE_FILE_FROM_RECORD_TS_PROGRESS_REQUEST": return XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_RECORD_TS_PROGRESS_REQUEST, nil 
  case "TSG_EXTRACT_MOVIE_FILE_FROM_RECORD_TS_PROGRESS_RESPONSE": return XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_RECORD_TS_PROGRESS_RESPONSE, nil 
  case "TSG_TRANS_RECORD_POSTER_SIZE_REQUEST": return XtTsgMsgCategory_TSG_TRANS_RECORD_POSTER_SIZE_REQUEST, nil 
  case "TSG_TRANS_RECORD_POSTER_SIZE_RESPONSE": return XtTsgMsgCategory_TSG_TRANS_RECORD_POSTER_SIZE_RESPONSE, nil 
  case "TSG_TRANS_RECORD_POSTER_SIZE_PROGRESS_REQUEST": return XtTsgMsgCategory_TSG_TRANS_RECORD_POSTER_SIZE_PROGRESS_REQUEST, nil 
  case "TSG_TRANS_RECORD_POSTER_SIZE_PROGRESS_RESPONSE": return XtTsgMsgCategory_TSG_TRANS_RECORD_POSTER_SIZE_PROGRESS_RESPONSE, nil 
  case "TSG_REGEN_MOVIE_THUMBNAIL_OR_POSTER_REQUEST": return XtTsgMsgCategory_TSG_REGEN_MOVIE_THUMBNAIL_OR_POSTER_REQUEST, nil 
  case "TSG_REGEN_MOVIE_THUMBNAIL_OR_POSTER_RESPONSE": return XtTsgMsgCategory_TSG_REGEN_MOVIE_THUMBNAIL_OR_POSTER_RESPONSE, nil 
  case "TSG_REGEN_MOVIE_THUMBNAIL_OR_POSTER_PROGRESS_REQUEST": return XtTsgMsgCategory_TSG_REGEN_MOVIE_THUMBNAIL_OR_POSTER_PROGRESS_REQUEST, nil 
  case "TSG_REGEN_MOVIE_THUMBNAIL_OR_POSTER_PROGRESS_RESPONSE": return XtTsgMsgCategory_TSG_REGEN_MOVIE_THUMBNAIL_OR_POSTER_PROGRESS_RESPONSE, nil 
  case "TSG_GEN_MUTLI_FILE_EXTERN_INFO_REQUEST": return XtTsgMsgCategory_TSG_GEN_MUTLI_FILE_EXTERN_INFO_REQUEST, nil 
  case "TSG_GEN_MUTLI_FILE_EXTERN_INFO_RESPONSE": return XtTsgMsgCategory_TSG_GEN_MUTLI_FILE_EXTERN_INFO_RESPONSE, nil 
  case "TSG_EXTRACT_MOVIE_FILE_FROM_MOVIE_REQUEST": return XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_MOVIE_REQUEST, nil 
  case "TSG_EXTRACT_MOVIE_FILE_FROM_MOVIE_RESPONSE": return XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_MOVIE_RESPONSE, nil 
  case "TSG_EXTRACT_MOVIE_FILE_FROM_MOVIE_PROGRESS_REQUEST": return XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_MOVIE_PROGRESS_REQUEST, nil 
  case "TSG_EXTRACT_MOVIE_FILE_FROM_MOVIE_PROGRESS_RESPONSE": return XtTsgMsgCategory_TSG_EXTRACT_MOVIE_FILE_FROM_MOVIE_PROGRESS_RESPONSE, nil 
  case "TSG_IMPORT_LOOKBACK_STREAM_REQUEST": return XtTsgMsgCategory_TSG_IMPORT_LOOKBACK_STREAM_REQUEST, nil 
  case "TSG_IMPORT_LOOKBACK_STREAM_RESPONSE": return XtTsgMsgCategory_TSG_IMPORT_LOOKBACK_STREAM_RESPONSE, nil 
  case "TSG_SUPPLEMENT_MUTLI_FILE_EXTERN_INFO_REQUEST": return XtTsgMsgCategory_TSG_SUPPLEMENT_MUTLI_FILE_EXTERN_INFO_REQUEST, nil 
  case "TSG_SUPPLEMENT_MUTLI_FILE_EXTERN_INFO_RESPONSE": return XtTsgMsgCategory_TSG_SUPPLEMENT_MUTLI_FILE_EXTERN_INFO_RESPONSE, nil 
  case "TSG_UPDATE_SAMPLE_INFO_REQUEST": return XtTsgMsgCategory_TSG_UPDATE_SAMPLE_INFO_REQUEST, nil 
  case "TSG_UPDATE_SAMPLE_INFO_RESPONSE": return XtTsgMsgCategory_TSG_UPDATE_SAMPLE_INFO_RESPONSE, nil 
  case "TSG_PROGRAM_DETECT_INFO_REQUEST": return XtTsgMsgCategory_TSG_PROGRAM_DETECT_INFO_REQUEST, nil 
  case "TSG_PROGRAM_DETECT_INFO_RESPONSE": return XtTsgMsgCategory_TSG_PROGRAM_DETECT_INFO_RESPONSE, nil 
  case "TSG_RECOVER_TS_TOTAL_IDX_REQUEST": return XtTsgMsgCategory_TSG_RECOVER_TS_TOTAL_IDX_REQUEST, nil 
  case "TSG_RECOVER_TS_TOTAL_IDX_RESPONSE": return XtTsgMsgCategory_TSG_RECOVER_TS_TOTAL_IDX_RESPONSE, nil 
  case "TSG_PROGDETECT_CONTROL_INFO_REQUST": return XtTsgMsgCategory_TSG_PROGDETECT_CONTROL_INFO_REQUST, nil 
  case "TSG_REPLACE_LOOKBACK_STREAM_REQUEST": return XtTsgMsgCategory_TSG_REPLACE_LOOKBACK_STREAM_REQUEST, nil 
  case "TSG_REPLACE_LOOKBACK_STREAM_RESPONSE": return XtTsgMsgCategory_TSG_REPLACE_LOOKBACK_STREAM_RESPONSE, nil 
  case "TSG_DELETE_TASK_REQUEST": return XtTsgMsgCategory_TSG_DELETE_TASK_REQUEST, nil 
  case "TSG_DELETE_TASK_RESPONSE": return XtTsgMsgCategory_TSG_DELETE_TASK_RESPONSE, nil 
  case "TSG_UPDATE_TSIDX_TO_REDIS_REQUEST": return XtTsgMsgCategory_TSG_UPDATE_TSIDX_TO_REDIS_REQUEST, nil 
  case "TSG_UPDATE_TSIDX_TO_REDIS_RESPONSE": return XtTsgMsgCategory_TSG_UPDATE_TSIDX_TO_REDIS_RESPONSE, nil 
  case "TSG_QUERY_TASK_REQUEST": return XtTsgMsgCategory_TSG_QUERY_TASK_REQUEST, nil 
  case "TSG_QUERY_TASK_RESPONSE": return XtTsgMsgCategory_TSG_QUERY_TASK_RESPONSE, nil 
  case "TSG_TASK_COUNT_REPORT_REQUEST": return XtTsgMsgCategory_TSG_TASK_COUNT_REPORT_REQUEST, nil 
  case "TSG_TASK_COUNT_REPORT_RESPONSE": return XtTsgMsgCategory_TSG_TASK_COUNT_REPORT_RESPONSE, nil 
  case "TSG_REGEN_RECORD_CDN_INDEX_REQUEST": return XtTsgMsgCategory_TSG_REGEN_RECORD_CDN_INDEX_REQUEST, nil 
  case "TSG_REGEN_RECORD_CDN_INDEX_RESPONSE": return XtTsgMsgCategory_TSG_REGEN_RECORD_CDN_INDEX_RESPONSE, nil 
  case "TSG_REGEN_STREAM_INFO_REQUEST": return XtTsgMsgCategory_TSG_REGEN_STREAM_INFO_REQUEST, nil 
  case "TSG_REGEN_STREAM_INFO_RESPONSE": return XtTsgMsgCategory_TSG_REGEN_STREAM_INFO_RESPONSE, nil 
  case "TSG_GEN_TOPN_FILE_REQUEST": return XtTsgMsgCategory_TSG_GEN_TOPN_FILE_REQUEST, nil 
  case "TSG_TOPN_FINISH_REQUEST": return XtTsgMsgCategory_TSG_TOPN_FINISH_REQUEST, nil 
  case "TSG_SAMPLE_EXTRACT_REQUEST": return XtTsgMsgCategory_TSG_SAMPLE_EXTRACT_REQUEST, nil 
  case "TSG_SAMPLE_EXTRACT_RESPONSE": return XtTsgMsgCategory_TSG_SAMPLE_EXTRACT_RESPONSE, nil 
  case "TSG_SAMPLE_UPDATE_REQUEST": return XtTsgMsgCategory_TSG_SAMPLE_UPDATE_REQUEST, nil 
  case "TSG_SAMPLE_UPDATE_RESPONSE": return XtTsgMsgCategory_TSG_SAMPLE_UPDATE_RESPONSE, nil 
  case "TSG_EXTRACT_EVENT_POSTER_REQUEST": return XtTsgMsgCategory_TSG_EXTRACT_EVENT_POSTER_REQUEST, nil 
  case "TSG_EXTRACT_EVENT_POSTER_RESPONSE": return XtTsgMsgCategory_TSG_EXTRACT_EVENT_POSTER_RESPONSE, nil 
  case "TSG_EXTRACT_MOVIE_POSTER_REQUEST": return XtTsgMsgCategory_TSG_EXTRACT_MOVIE_POSTER_REQUEST, nil 
  case "TSG_EXTRACT_MOVIE_POSTER_RESPONSE": return XtTsgMsgCategory_TSG_EXTRACT_MOVIE_POSTER_RESPONSE, nil 
  case "TSG_EXTRACT_FRAME_SEEK_REQUEST": return XtTsgMsgCategory_TSG_EXTRACT_FRAME_SEEK_REQUEST, nil 
  case "TSG_EXTRACT_FRAME_SEEK_RESPONSE": return XtTsgMsgCategory_TSG_EXTRACT_FRAME_SEEK_RESPONSE, nil 
  }
  return XtTsgMsgCategory(0), fmt.Errorf("not a valid XtTsgMsgCategory string")
}


func XtTsgMsgCategoryPtr(v XtTsgMsgCategory) *XtTsgMsgCategory { return &v }

func (p XtTsgMsgCategory) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *XtTsgMsgCategory) UnmarshalText(text []byte) error {
q, err := XtTsgMsgCategoryFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *XtTsgMsgCategory) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = XtTsgMsgCategory(v)
return nil
}

func (p * XtTsgMsgCategory) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type XtDtvsRecordChannelInfoMsgCategory int64
const (
  XtDtvsRecordChannelInfoMsgCategory_DTVS_ADD_RECORD_CHANNEL_REQUEST XtDtvsRecordChannelInfoMsgCategory = 1
  XtDtvsRecordChannelInfoMsgCategory_DTVS_ADD_RECORD_CHANNEL_RESPONSE XtDtvsRecordChannelInfoMsgCategory = 2
  XtDtvsRecordChannelInfoMsgCategory_DTVS_DELETE_RECORD_CHANNEL_REQUEST XtDtvsRecordChannelInfoMsgCategory = 3
  XtDtvsRecordChannelInfoMsgCategory_DTVS_DELETE_RECORD_CHANNEL_RESPONSE XtDtvsRecordChannelInfoMsgCategory = 4
  XtDtvsRecordChannelInfoMsgCategory_DTVS_MOD_SERVER_WORK_FLAG_REQUEST XtDtvsRecordChannelInfoMsgCategory = 5
  XtDtvsRecordChannelInfoMsgCategory_DTVS_MOD_SERVER_WORK_FLAG_RESPONSE XtDtvsRecordChannelInfoMsgCategory = 6
  XtDtvsRecordChannelInfoMsgCategory_DTVS_RESTART_SERVER_REQUEST XtDtvsRecordChannelInfoMsgCategory = 7
  XtDtvsRecordChannelInfoMsgCategory_DTVS_RESTART_SERVER_RESPONSE XtDtvsRecordChannelInfoMsgCategory = 8
  XtDtvsRecordChannelInfoMsgCategory_DTVS_IS_RESTART_SERVER_FINISH_REQUEST XtDtvsRecordChannelInfoMsgCategory = 9
  XtDtvsRecordChannelInfoMsgCategory_DTVS_IS_RESTART_SERVER_FINISH_RESPONSE XtDtvsRecordChannelInfoMsgCategory = 10
  XtDtvsRecordChannelInfoMsgCategory_DTVS_UPDATE_DATA_FOR_BAK_SERVER_REPLACE_MASTER_SERVER_REQUEST XtDtvsRecordChannelInfoMsgCategory = 11
  XtDtvsRecordChannelInfoMsgCategory_DTVS_UPDATE_DATA_FOR_BAK_SERVER_REPLACE_MASTER_SERVER_RESPONSE XtDtvsRecordChannelInfoMsgCategory = 12
  XtDtvsRecordChannelInfoMsgCategory_DTVS_CREATE_CHANNELLOGO_REQUEST XtDtvsRecordChannelInfoMsgCategory = 13
  XtDtvsRecordChannelInfoMsgCategory_DTVS_CREATE_CHANNELLOGO_RESPONSE XtDtvsRecordChannelInfoMsgCategory = 14
)

func (p XtDtvsRecordChannelInfoMsgCategory) String() string {
  switch p {
  case XtDtvsRecordChannelInfoMsgCategory_DTVS_ADD_RECORD_CHANNEL_REQUEST: return "DTVS_ADD_RECORD_CHANNEL_REQUEST"
  case XtDtvsRecordChannelInfoMsgCategory_DTVS_ADD_RECORD_CHANNEL_RESPONSE: return "DTVS_ADD_RECORD_CHANNEL_RESPONSE"
  case XtDtvsRecordChannelInfoMsgCategory_DTVS_DELETE_RECORD_CHANNEL_REQUEST: return "DTVS_DELETE_RECORD_CHANNEL_REQUEST"
  case XtDtvsRecordChannelInfoMsgCategory_DTVS_DELETE_RECORD_CHANNEL_RESPONSE: return "DTVS_DELETE_RECORD_CHANNEL_RESPONSE"
  case XtDtvsRecordChannelInfoMsgCategory_DTVS_MOD_SERVER_WORK_FLAG_REQUEST: return "DTVS_MOD_SERVER_WORK_FLAG_REQUEST"
  case XtDtvsRecordChannelInfoMsgCategory_DTVS_MOD_SERVER_WORK_FLAG_RESPONSE: return "DTVS_MOD_SERVER_WORK_FLAG_RESPONSE"
  case XtDtvsRecordChannelInfoMsgCategory_DTVS_RESTART_SERVER_REQUEST: return "DTVS_RESTART_SERVER_REQUEST"
  case XtDtvsRecordChannelInfoMsgCategory_DTVS_RESTART_SERVER_RESPONSE: return "DTVS_RESTART_SERVER_RESPONSE"
  case XtDtvsRecordChannelInfoMsgCategory_DTVS_IS_RESTART_SERVER_FINISH_REQUEST: return "DTVS_IS_RESTART_SERVER_FINISH_REQUEST"
  case XtDtvsRecordChannelInfoMsgCategory_DTVS_IS_RESTART_SERVER_FINISH_RESPONSE: return "DTVS_IS_RESTART_SERVER_FINISH_RESPONSE"
  case XtDtvsRecordChannelInfoMsgCategory_DTVS_UPDATE_DATA_FOR_BAK_SERVER_REPLACE_MASTER_SERVER_REQUEST: return "DTVS_UPDATE_DATA_FOR_BAK_SERVER_REPLACE_MASTER_SERVER_REQUEST"
  case XtDtvsRecordChannelInfoMsgCategory_DTVS_UPDATE_DATA_FOR_BAK_SERVER_REPLACE_MASTER_SERVER_RESPONSE: return "DTVS_UPDATE_DATA_FOR_BAK_SERVER_REPLACE_MASTER_SERVER_RESPONSE"
  case XtDtvsRecordChannelInfoMsgCategory_DTVS_CREATE_CHANNELLOGO_REQUEST: return "DTVS_CREATE_CHANNELLOGO_REQUEST"
  case XtDtvsRecordChannelInfoMsgCategory_DTVS_CREATE_CHANNELLOGO_RESPONSE: return "DTVS_CREATE_CHANNELLOGO_RESPONSE"
  }
  return "<UNSET>"
}

func XtDtvsRecordChannelInfoMsgCategoryFromString(s string) (XtDtvsRecordChannelInfoMsgCategory, error) {
  switch s {
  case "DTVS_ADD_RECORD_CHANNEL_REQUEST": return XtDtvsRecordChannelInfoMsgCategory_DTVS_ADD_RECORD_CHANNEL_REQUEST, nil 
  case "DTVS_ADD_RECORD_CHANNEL_RESPONSE": return XtDtvsRecordChannelInfoMsgCategory_DTVS_ADD_RECORD_CHANNEL_RESPONSE, nil 
  case "DTVS_DELETE_RECORD_CHANNEL_REQUEST": return XtDtvsRecordChannelInfoMsgCategory_DTVS_DELETE_RECORD_CHANNEL_REQUEST, nil 
  case "DTVS_DELETE_RECORD_CHANNEL_RESPONSE": return XtDtvsRecordChannelInfoMsgCategory_DTVS_DELETE_RECORD_CHANNEL_RESPONSE, nil 
  case "DTVS_MOD_SERVER_WORK_FLAG_REQUEST": return XtDtvsRecordChannelInfoMsgCategory_DTVS_MOD_SERVER_WORK_FLAG_REQUEST, nil 
  case "DTVS_MOD_SERVER_WORK_FLAG_RESPONSE": return XtDtvsRecordChannelInfoMsgCategory_DTVS_MOD_SERVER_WORK_FLAG_RESPONSE, nil 
  case "DTVS_RESTART_SERVER_REQUEST": return XtDtvsRecordChannelInfoMsgCategory_DTVS_RESTART_SERVER_REQUEST, nil 
  case "DTVS_RESTART_SERVER_RESPONSE": return XtDtvsRecordChannelInfoMsgCategory_DTVS_RESTART_SERVER_RESPONSE, nil 
  case "DTVS_IS_RESTART_SERVER_FINISH_REQUEST": return XtDtvsRecordChannelInfoMsgCategory_DTVS_IS_RESTART_SERVER_FINISH_REQUEST, nil 
  case "DTVS_IS_RESTART_SERVER_FINISH_RESPONSE": return XtDtvsRecordChannelInfoMsgCategory_DTVS_IS_RESTART_SERVER_FINISH_RESPONSE, nil 
  case "DTVS_UPDATE_DATA_FOR_BAK_SERVER_REPLACE_MASTER_SERVER_REQUEST": return XtDtvsRecordChannelInfoMsgCategory_DTVS_UPDATE_DATA_FOR_BAK_SERVER_REPLACE_MASTER_SERVER_REQUEST, nil 
  case "DTVS_UPDATE_DATA_FOR_BAK_SERVER_REPLACE_MASTER_SERVER_RESPONSE": return XtDtvsRecordChannelInfoMsgCategory_DTVS_UPDATE_DATA_FOR_BAK_SERVER_REPLACE_MASTER_SERVER_RESPONSE, nil 
  case "DTVS_CREATE_CHANNELLOGO_REQUEST": return XtDtvsRecordChannelInfoMsgCategory_DTVS_CREATE_CHANNELLOGO_REQUEST, nil 
  case "DTVS_CREATE_CHANNELLOGO_RESPONSE": return XtDtvsRecordChannelInfoMsgCategory_DTVS_CREATE_CHANNELLOGO_RESPONSE, nil 
  }
  return XtDtvsRecordChannelInfoMsgCategory(0), fmt.Errorf("not a valid XtDtvsRecordChannelInfoMsgCategory string")
}


func XtDtvsRecordChannelInfoMsgCategoryPtr(v XtDtvsRecordChannelInfoMsgCategory) *XtDtvsRecordChannelInfoMsgCategory { return &v }

func (p XtDtvsRecordChannelInfoMsgCategory) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *XtDtvsRecordChannelInfoMsgCategory) UnmarshalText(text []byte) error {
q, err := XtDtvsRecordChannelInfoMsgCategoryFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *XtDtvsRecordChannelInfoMsgCategory) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = XtDtvsRecordChannelInfoMsgCategory(v)
return nil
}

func (p * XtDtvsRecordChannelInfoMsgCategory) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type XtHotBakServerMsgCategory int64
const (
  XtHotBakServerMsgCategory_REPORT_DEAD_RECORD_SERVER_REQUEST XtHotBakServerMsgCategory = 1
  XtHotBakServerMsgCategory_REPORT_DEAD_RECORD_SERVER_RESPONSE XtHotBakServerMsgCategory = 2
)

func (p XtHotBakServerMsgCategory) String() string {
  switch p {
  case XtHotBakServerMsgCategory_REPORT_DEAD_RECORD_SERVER_REQUEST: return "REPORT_DEAD_RECORD_SERVER_REQUEST"
  case XtHotBakServerMsgCategory_REPORT_DEAD_RECORD_SERVER_RESPONSE: return "REPORT_DEAD_RECORD_SERVER_RESPONSE"
  }
  return "<UNSET>"
}

func XtHotBakServerMsgCategoryFromString(s string) (XtHotBakServerMsgCategory, error) {
  switch s {
  case "REPORT_DEAD_RECORD_SERVER_REQUEST": return XtHotBakServerMsgCategory_REPORT_DEAD_RECORD_SERVER_REQUEST, nil 
  case "REPORT_DEAD_RECORD_SERVER_RESPONSE": return XtHotBakServerMsgCategory_REPORT_DEAD_RECORD_SERVER_RESPONSE, nil 
  }
  return XtHotBakServerMsgCategory(0), fmt.Errorf("not a valid XtHotBakServerMsgCategory string")
}


func XtHotBakServerMsgCategoryPtr(v XtHotBakServerMsgCategory) *XtHotBakServerMsgCategory { return &v }

func (p XtHotBakServerMsgCategory) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *XtHotBakServerMsgCategory) UnmarshalText(text []byte) error {
q, err := XtHotBakServerMsgCategoryFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *XtHotBakServerMsgCategory) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = XtHotBakServerMsgCategory(v)
return nil
}

func (p * XtHotBakServerMsgCategory) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type XtLiveRoomMsgCategory int64
const (
  XtLiveRoomMsgCategory_LIVE_START_LIVE_REQUEST XtLiveRoomMsgCategory = 1
  XtLiveRoomMsgCategory_LIVE_START_LIVE_RESPONSE XtLiveRoomMsgCategory = 2
  XtLiveRoomMsgCategory_LIVE_STOP_LIVE_REQUEST XtLiveRoomMsgCategory = 3
  XtLiveRoomMsgCategory_LIVE_STOP_LIVE_RESPONSE XtLiveRoomMsgCategory = 4
  XtLiveRoomMsgCategory_LIVE_ONLINE_NUM_REQUEST XtLiveRoomMsgCategory = 5
  XtLiveRoomMsgCategory_LIVE_ONLINE_NUM_RESPONSE XtLiveRoomMsgCategory = 6
)

func (p XtLiveRoomMsgCategory) String() string {
  switch p {
  case XtLiveRoomMsgCategory_LIVE_START_LIVE_REQUEST: return "LIVE_START_LIVE_REQUEST"
  case XtLiveRoomMsgCategory_LIVE_START_LIVE_RESPONSE: return "LIVE_START_LIVE_RESPONSE"
  case XtLiveRoomMsgCategory_LIVE_STOP_LIVE_REQUEST: return "LIVE_STOP_LIVE_REQUEST"
  case XtLiveRoomMsgCategory_LIVE_STOP_LIVE_RESPONSE: return "LIVE_STOP_LIVE_RESPONSE"
  case XtLiveRoomMsgCategory_LIVE_ONLINE_NUM_REQUEST: return "LIVE_ONLINE_NUM_REQUEST"
  case XtLiveRoomMsgCategory_LIVE_ONLINE_NUM_RESPONSE: return "LIVE_ONLINE_NUM_RESPONSE"
  }
  return "<UNSET>"
}

func XtLiveRoomMsgCategoryFromString(s string) (XtLiveRoomMsgCategory, error) {
  switch s {
  case "LIVE_START_LIVE_REQUEST": return XtLiveRoomMsgCategory_LIVE_START_LIVE_REQUEST, nil 
  case "LIVE_START_LIVE_RESPONSE": return XtLiveRoomMsgCategory_LIVE_START_LIVE_RESPONSE, nil 
  case "LIVE_STOP_LIVE_REQUEST": return XtLiveRoomMsgCategory_LIVE_STOP_LIVE_REQUEST, nil 
  case "LIVE_STOP_LIVE_RESPONSE": return XtLiveRoomMsgCategory_LIVE_STOP_LIVE_RESPONSE, nil 
  case "LIVE_ONLINE_NUM_REQUEST": return XtLiveRoomMsgCategory_LIVE_ONLINE_NUM_REQUEST, nil 
  case "LIVE_ONLINE_NUM_RESPONSE": return XtLiveRoomMsgCategory_LIVE_ONLINE_NUM_RESPONSE, nil 
  }
  return XtLiveRoomMsgCategory(0), fmt.Errorf("not a valid XtLiveRoomMsgCategory string")
}


func XtLiveRoomMsgCategoryPtr(v XtLiveRoomMsgCategory) *XtLiveRoomMsgCategory { return &v }

func (p XtLiveRoomMsgCategory) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *XtLiveRoomMsgCategory) UnmarshalText(text []byte) error {
q, err := XtLiveRoomMsgCategoryFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *XtLiveRoomMsgCategory) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = XtLiveRoomMsgCategory(v)
return nil
}

func (p * XtLiveRoomMsgCategory) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type XtPlaylistMsgCategory int64
const (
  XtPlaylistMsgCategory_PLAYLIST_CLEAN_PROGRAM XtPlaylistMsgCategory = 1
)

func (p XtPlaylistMsgCategory) String() string {
  switch p {
  case XtPlaylistMsgCategory_PLAYLIST_CLEAN_PROGRAM: return "PLAYLIST_CLEAN_PROGRAM"
  }
  return "<UNSET>"
}

func XtPlaylistMsgCategoryFromString(s string) (XtPlaylistMsgCategory, error) {
  switch s {
  case "PLAYLIST_CLEAN_PROGRAM": return XtPlaylistMsgCategory_PLAYLIST_CLEAN_PROGRAM, nil 
  }
  return XtPlaylistMsgCategory(0), fmt.Errorf("not a valid XtPlaylistMsgCategory string")
}


func XtPlaylistMsgCategoryPtr(v XtPlaylistMsgCategory) *XtPlaylistMsgCategory { return &v }

func (p XtPlaylistMsgCategory) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *XtPlaylistMsgCategory) UnmarshalText(text []byte) error {
q, err := XtPlaylistMsgCategoryFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *XtPlaylistMsgCategory) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = XtPlaylistMsgCategory(v)
return nil
}

func (p * XtPlaylistMsgCategory) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type XtMissDataMsgCategory int64
const (
  XtMissDataMsgCategory_MISS_STREAM_REQUEST XtMissDataMsgCategory = 1
  XtMissDataMsgCategory_MISS_STREAM_RESPONSE XtMissDataMsgCategory = 2
  XtMissDataMsgCategory_REPORT_RECORD_STATUS_REQUEST XtMissDataMsgCategory = 3
  XtMissDataMsgCategory_REPORT_RECORD_STATUS_RESPONSE XtMissDataMsgCategory = 4
  XtMissDataMsgCategory_REPLACE_STREAM_REQUEST XtMissDataMsgCategory = 5
  XtMissDataMsgCategory_REPLACE_STREAM_RESPONSE XtMissDataMsgCategory = 6
)

func (p XtMissDataMsgCategory) String() string {
  switch p {
  case XtMissDataMsgCategory_MISS_STREAM_REQUEST: return "MISS_STREAM_REQUEST"
  case XtMissDataMsgCategory_MISS_STREAM_RESPONSE: return "MISS_STREAM_RESPONSE"
  case XtMissDataMsgCategory_REPORT_RECORD_STATUS_REQUEST: return "REPORT_RECORD_STATUS_REQUEST"
  case XtMissDataMsgCategory_REPORT_RECORD_STATUS_RESPONSE: return "REPORT_RECORD_STATUS_RESPONSE"
  case XtMissDataMsgCategory_REPLACE_STREAM_REQUEST: return "REPLACE_STREAM_REQUEST"
  case XtMissDataMsgCategory_REPLACE_STREAM_RESPONSE: return "REPLACE_STREAM_RESPONSE"
  }
  return "<UNSET>"
}

func XtMissDataMsgCategoryFromString(s string) (XtMissDataMsgCategory, error) {
  switch s {
  case "MISS_STREAM_REQUEST": return XtMissDataMsgCategory_MISS_STREAM_REQUEST, nil 
  case "MISS_STREAM_RESPONSE": return XtMissDataMsgCategory_MISS_STREAM_RESPONSE, nil 
  case "REPORT_RECORD_STATUS_REQUEST": return XtMissDataMsgCategory_REPORT_RECORD_STATUS_REQUEST, nil 
  case "REPORT_RECORD_STATUS_RESPONSE": return XtMissDataMsgCategory_REPORT_RECORD_STATUS_RESPONSE, nil 
  case "REPLACE_STREAM_REQUEST": return XtMissDataMsgCategory_REPLACE_STREAM_REQUEST, nil 
  case "REPLACE_STREAM_RESPONSE": return XtMissDataMsgCategory_REPLACE_STREAM_RESPONSE, nil 
  }
  return XtMissDataMsgCategory(0), fmt.Errorf("not a valid XtMissDataMsgCategory string")
}


func XtMissDataMsgCategoryPtr(v XtMissDataMsgCategory) *XtMissDataMsgCategory { return &v }

func (p XtMissDataMsgCategory) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *XtMissDataMsgCategory) UnmarshalText(text []byte) error {
q, err := XtMissDataMsgCategoryFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *XtMissDataMsgCategory) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = XtMissDataMsgCategory(v)
return nil
}

func (p * XtMissDataMsgCategory) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SynDtvsAppInfoSubcmd EComSubcmd

func SynDtvsAppInfoSubcmdPtr(v SynDtvsAppInfoSubcmd) *SynDtvsAppInfoSubcmd { return &v }

type SyncDtvsSearchHotKey EComSubcmd

func SyncDtvsSearchHotKeyPtr(v SyncDtvsSearchHotKey) *SyncDtvsSearchHotKey { return &v }

type SynDtvsStarInfoSubcmd EComSubcmd

func SynDtvsStarInfoSubcmdPtr(v SynDtvsStarInfoSubcmd) *SynDtvsStarInfoSubcmd { return &v }

type SynILogPlayCInfoSubcmd EComSubcmd

func SynILogPlayCInfoSubcmdPtr(v SynILogPlayCInfoSubcmd) *SynILogPlayCInfoSubcmd { return &v }

type SynILogOLUserInfoSubcmd EComSubcmd

func SynILogOLUserInfoSubcmdPtr(v SynILogOLUserInfoSubcmd) *SynILogOLUserInfoSubcmd { return &v }

type SynILogProStatInfoSubcmd EComSubcmd

func SynILogProStatInfoSubcmdPtr(v SynILogProStatInfoSubcmd) *SynILogProStatInfoSubcmd { return &v }

type SynDtvsChannelLimitSubcmd EComSubcmd

func SynDtvsChannelLimitSubcmdPtr(v SynDtvsChannelLimitSubcmd) *SynDtvsChannelLimitSubcmd { return &v }

type SyncDtvsWeatherInfoSubcmd EComSubcmd

func SyncDtvsWeatherInfoSubcmdPtr(v SyncDtvsWeatherInfoSubcmd) *SyncDtvsWeatherInfoSubcmd { return &v }

type SyncDtvsSensitiveWordInfoSubcmd EComSubcmd

func SyncDtvsSensitiveWordInfoSubcmdPtr(v SyncDtvsSensitiveWordInfoSubcmd) *SyncDtvsSensitiveWordInfoSubcmd { return &v }

type SynDtvsPublicResourceInfoSubcmd EComSubcmd

func SynDtvsPublicResourceInfoSubcmdPtr(v SynDtvsPublicResourceInfoSubcmd) *SynDtvsPublicResourceInfoSubcmd { return &v }

type SynDtvsMediaLabelInfoSubcmd EComSubcmd

func SynDtvsMediaLabelInfoSubcmdPtr(v SynDtvsMediaLabelInfoSubcmd) *SynDtvsMediaLabelInfoSubcmd { return &v }

type SynDtvsMediaTagTypeInfoSubcmd EComSubcmd

func SynDtvsMediaTagTypeInfoSubcmdPtr(v SynDtvsMediaTagTypeInfoSubcmd) *SynDtvsMediaTagTypeInfoSubcmd { return &v }

type SynDtvsUserLabelInfoSubcmd EComSubcmd

func SynDtvsUserLabelInfoSubcmdPtr(v SynDtvsUserLabelInfoSubcmd) *SynDtvsUserLabelInfoSubcmd { return &v }

type SynDtvsMediaTypeInfoSubcmd EComSubcmd

func SynDtvsMediaTypeInfoSubcmdPtr(v SynDtvsMediaTypeInfoSubcmd) *SynDtvsMediaTypeInfoSubcmd { return &v }

type SynDtvsPartnerInfoSubcmd EComSubcmd

func SynDtvsPartnerInfoSubcmdPtr(v SynDtvsPartnerInfoSubcmd) *SynDtvsPartnerInfoSubcmd { return &v }

type SynDtvsFilterInfoSubcmd EComSubcmd

func SynDtvsFilterInfoSubcmdPtr(v SynDtvsFilterInfoSubcmd) *SynDtvsFilterInfoSubcmd { return &v }

type SynDtvsConfigTagInfoSubcmd EComSubcmd

func SynDtvsConfigTagInfoSubcmdPtr(v SynDtvsConfigTagInfoSubcmd) *SynDtvsConfigTagInfoSubcmd { return &v }

type SynDtvsHomeTypeInfoSubcmd EComSubcmd

func SynDtvsHomeTypeInfoSubcmdPtr(v SynDtvsHomeTypeInfoSubcmd) *SynDtvsHomeTypeInfoSubcmd { return &v }

type SynILogHLSStatInfoSubcmd EComSubcmd

func SynILogHLSStatInfoSubcmdPtr(v SynILogHLSStatInfoSubcmd) *SynILogHLSStatInfoSubcmd { return &v }

type SynILogHLSVPInfoSubcmd EComSubcmd

func SynILogHLSVPInfoSubcmdPtr(v SynILogHLSVPInfoSubcmd) *SynILogHLSVPInfoSubcmd { return &v }

type SyncDtvsProgramCompositeSubcmd EComSubcmd

func SyncDtvsProgramCompositeSubcmdPtr(v SyncDtvsProgramCompositeSubcmd) *SyncDtvsProgramCompositeSubcmd { return &v }

type SynTrolleySubcmd EComSubcmd

func SynTrolleySubcmdPtr(v SynTrolleySubcmd) *SynTrolleySubcmd { return &v }

type SynDtvsMediaVisibleRuleSubcmd EComSubcmd

func SynDtvsMediaVisibleRuleSubcmdPtr(v SynDtvsMediaVisibleRuleSubcmd) *SynDtvsMediaVisibleRuleSubcmd { return &v }

type SynDtvsSystemSettingSubcmd EComSubcmd

func SynDtvsSystemSettingSubcmdPtr(v SynDtvsSystemSettingSubcmd) *SynDtvsSystemSettingSubcmd { return &v }

type SynDtvsVideoInfoSubcmd EComSubcmd

func SynDtvsVideoInfoSubcmdPtr(v SynDtvsVideoInfoSubcmd) *SynDtvsVideoInfoSubcmd { return &v }

type SynDtvsChannelShowRuleSubcmd EComSubcmd

func SynDtvsChannelShowRuleSubcmdPtr(v SynDtvsChannelShowRuleSubcmd) *SynDtvsChannelShowRuleSubcmd { return &v }

type SyncDtvsSubjectProgramSubcmd EComSubcmd

func SyncDtvsSubjectProgramSubcmdPtr(v SyncDtvsSubjectProgramSubcmd) *SyncDtvsSubjectProgramSubcmd { return &v }

type SyncDtvsSubjectScheduleSubcmd EComSubcmd

func SyncDtvsSubjectScheduleSubcmdPtr(v SyncDtvsSubjectScheduleSubcmd) *SyncDtvsSubjectScheduleSubcmd { return &v }

// Attributes:
//  - NData1
//  - NData2
type NETPI2 struct {
  NData1 int64 `thrift:"nData1,1,required" db:"nData1" json:"nData1"`
  NData2 int64 `thrift:"nData2,2,required" db:"nData2" json:"nData2"`
}

func NewNETPI2() *NETPI2 {
  return &NETPI2{}
}


func (p *NETPI2) GetNData1() int64 {
  return p.NData1
}

func (p *NETPI2) GetNData2() int64 {
  return p.NData2
}
func (p *NETPI2) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNData1 bool = false;
  var issetNData2 bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNData1 = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNData2 = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNData1{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData1 is not set"));
  }
  if !issetNData2{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData2 is not set"));
  }
  return nil
}

func (p *NETPI2)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NData1 = v
}
  return nil
}

func (p *NETPI2)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NData2 = v
}
  return nil
}

func (p *NETPI2) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NETPI2"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NETPI2) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData1", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nData1: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nData1: ", p), err) }
  return err
}

func (p *NETPI2) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData2", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nData2: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nData2: ", p), err) }
  return err
}

func (p *NETPI2) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NETPI2(%+v)", *p)
}

// Attributes:
//  - NData1
//  - NData2
//  - NData3
//  - NData4
type NETPI4 struct {
  NData1 int64 `thrift:"nData1,1,required" db:"nData1" json:"nData1"`
  NData2 int64 `thrift:"nData2,2,required" db:"nData2" json:"nData2"`
  NData3 int64 `thrift:"nData3,3,required" db:"nData3" json:"nData3"`
  NData4 int64 `thrift:"nData4,4,required" db:"nData4" json:"nData4"`
}

func NewNETPI4() *NETPI4 {
  return &NETPI4{}
}


func (p *NETPI4) GetNData1() int64 {
  return p.NData1
}

func (p *NETPI4) GetNData2() int64 {
  return p.NData2
}

func (p *NETPI4) GetNData3() int64 {
  return p.NData3
}

func (p *NETPI4) GetNData4() int64 {
  return p.NData4
}
func (p *NETPI4) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNData1 bool = false;
  var issetNData2 bool = false;
  var issetNData3 bool = false;
  var issetNData4 bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNData1 = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNData2 = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetNData3 = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetNData4 = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNData1{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData1 is not set"));
  }
  if !issetNData2{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData2 is not set"));
  }
  if !issetNData3{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData3 is not set"));
  }
  if !issetNData4{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData4 is not set"));
  }
  return nil
}

func (p *NETPI4)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NData1 = v
}
  return nil
}

func (p *NETPI4)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NData2 = v
}
  return nil
}

func (p *NETPI4)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NData3 = v
}
  return nil
}

func (p *NETPI4)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NData4 = v
}
  return nil
}

func (p *NETPI4) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NETPI4"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NETPI4) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData1", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nData1: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nData1: ", p), err) }
  return err
}

func (p *NETPI4) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData2", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nData2: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nData2: ", p), err) }
  return err
}

func (p *NETPI4) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData3", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nData3: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData3)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData3 (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nData3: ", p), err) }
  return err
}

func (p *NETPI4) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData4", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nData4: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData4)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData4 (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nData4: ", p), err) }
  return err
}

func (p *NETPI4) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NETPI4(%+v)", *p)
}

// Attributes:
//  - NData1
//  - NData2
//  - NData3
//  - NData4
//  - NData5
//  - NData6
//  - NData7
//  - NData8
type NETPI8 struct {
  NData1 int64 `thrift:"nData1,1,required" db:"nData1" json:"nData1"`
  NData2 int64 `thrift:"nData2,2,required" db:"nData2" json:"nData2"`
  NData3 int64 `thrift:"nData3,3,required" db:"nData3" json:"nData3"`
  NData4 int64 `thrift:"nData4,4,required" db:"nData4" json:"nData4"`
  NData5 int64 `thrift:"nData5,5,required" db:"nData5" json:"nData5"`
  NData6 int64 `thrift:"nData6,6,required" db:"nData6" json:"nData6"`
  NData7 int64 `thrift:"nData7,7,required" db:"nData7" json:"nData7"`
  NData8 int64 `thrift:"nData8,8,required" db:"nData8" json:"nData8"`
}

func NewNETPI8() *NETPI8 {
  return &NETPI8{}
}


func (p *NETPI8) GetNData1() int64 {
  return p.NData1
}

func (p *NETPI8) GetNData2() int64 {
  return p.NData2
}

func (p *NETPI8) GetNData3() int64 {
  return p.NData3
}

func (p *NETPI8) GetNData4() int64 {
  return p.NData4
}

func (p *NETPI8) GetNData5() int64 {
  return p.NData5
}

func (p *NETPI8) GetNData6() int64 {
  return p.NData6
}

func (p *NETPI8) GetNData7() int64 {
  return p.NData7
}

func (p *NETPI8) GetNData8() int64 {
  return p.NData8
}
func (p *NETPI8) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNData1 bool = false;
  var issetNData2 bool = false;
  var issetNData3 bool = false;
  var issetNData4 bool = false;
  var issetNData5 bool = false;
  var issetNData6 bool = false;
  var issetNData7 bool = false;
  var issetNData8 bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNData1 = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNData2 = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetNData3 = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetNData4 = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetNData5 = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetNData6 = true
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
      issetNData7 = true
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
      issetNData8 = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNData1{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData1 is not set"));
  }
  if !issetNData2{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData2 is not set"));
  }
  if !issetNData3{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData3 is not set"));
  }
  if !issetNData4{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData4 is not set"));
  }
  if !issetNData5{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData5 is not set"));
  }
  if !issetNData6{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData6 is not set"));
  }
  if !issetNData7{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData7 is not set"));
  }
  if !issetNData8{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData8 is not set"));
  }
  return nil
}

func (p *NETPI8)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NData1 = v
}
  return nil
}

func (p *NETPI8)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NData2 = v
}
  return nil
}

func (p *NETPI8)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NData3 = v
}
  return nil
}

func (p *NETPI8)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NData4 = v
}
  return nil
}

func (p *NETPI8)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NData5 = v
}
  return nil
}

func (p *NETPI8)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NData6 = v
}
  return nil
}

func (p *NETPI8)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.NData7 = v
}
  return nil
}

func (p *NETPI8)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.NData8 = v
}
  return nil
}

func (p *NETPI8) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NETPI8"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NETPI8) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData1", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nData1: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nData1: ", p), err) }
  return err
}

func (p *NETPI8) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData2", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nData2: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nData2: ", p), err) }
  return err
}

func (p *NETPI8) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData3", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nData3: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData3)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData3 (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nData3: ", p), err) }
  return err
}

func (p *NETPI8) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData4", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nData4: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData4)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData4 (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nData4: ", p), err) }
  return err
}

func (p *NETPI8) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData5", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nData5: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData5)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData5 (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nData5: ", p), err) }
  return err
}

func (p *NETPI8) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData6", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:nData6: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData6)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData6 (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:nData6: ", p), err) }
  return err
}

func (p *NETPI8) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData7", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:nData7: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData7)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData7 (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:nData7: ", p), err) }
  return err
}

func (p *NETPI8) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData8", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:nData8: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData8)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData8 (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:nData8: ", p), err) }
  return err
}

func (p *NETPI8) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NETPI8(%+v)", *p)
}

// Attributes:
//  - NData1
//  - NData2
//  - NData3
//  - NData4
//  - SzData1
//  - SzData2
type NETPI4S2 struct {
  NData1 int64 `thrift:"nData1,1,required" db:"nData1" json:"nData1"`
  NData2 int64 `thrift:"nData2,2,required" db:"nData2" json:"nData2"`
  NData3 int64 `thrift:"nData3,3,required" db:"nData3" json:"nData3"`
  NData4 int64 `thrift:"nData4,4,required" db:"nData4" json:"nData4"`
  SzData1 string `thrift:"szData1,5,required" db:"szData1" json:"szData1"`
  SzData2 string `thrift:"szData2,6,required" db:"szData2" json:"szData2"`
}

func NewNETPI4S2() *NETPI4S2 {
  return &NETPI4S2{}
}


func (p *NETPI4S2) GetNData1() int64 {
  return p.NData1
}

func (p *NETPI4S2) GetNData2() int64 {
  return p.NData2
}

func (p *NETPI4S2) GetNData3() int64 {
  return p.NData3
}

func (p *NETPI4S2) GetNData4() int64 {
  return p.NData4
}

func (p *NETPI4S2) GetSzData1() string {
  return p.SzData1
}

func (p *NETPI4S2) GetSzData2() string {
  return p.SzData2
}
func (p *NETPI4S2) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNData1 bool = false;
  var issetNData2 bool = false;
  var issetNData3 bool = false;
  var issetNData4 bool = false;
  var issetSzData1 bool = false;
  var issetSzData2 bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNData1 = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNData2 = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetNData3 = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetNData4 = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetSzData1 = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetSzData2 = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNData1{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData1 is not set"));
  }
  if !issetNData2{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData2 is not set"));
  }
  if !issetNData3{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData3 is not set"));
  }
  if !issetNData4{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData4 is not set"));
  }
  if !issetSzData1{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SzData1 is not set"));
  }
  if !issetSzData2{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SzData2 is not set"));
  }
  return nil
}

func (p *NETPI4S2)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NData1 = v
}
  return nil
}

func (p *NETPI4S2)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NData2 = v
}
  return nil
}

func (p *NETPI4S2)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NData3 = v
}
  return nil
}

func (p *NETPI4S2)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NData4 = v
}
  return nil
}

func (p *NETPI4S2)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.SzData1 = v
}
  return nil
}

func (p *NETPI4S2)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.SzData2 = v
}
  return nil
}

func (p *NETPI4S2) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NETPI4S2"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NETPI4S2) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData1", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nData1: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nData1: ", p), err) }
  return err
}

func (p *NETPI4S2) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData2", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nData2: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nData2: ", p), err) }
  return err
}

func (p *NETPI4S2) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData3", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nData3: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData3)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData3 (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nData3: ", p), err) }
  return err
}

func (p *NETPI4S2) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData4", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nData4: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData4)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData4 (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nData4: ", p), err) }
  return err
}

func (p *NETPI4S2) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("szData1", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:szData1: ", p), err) }
  if err := oprot.WriteString(string(p.SzData1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.szData1 (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:szData1: ", p), err) }
  return err
}

func (p *NETPI4S2) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("szData2", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:szData2: ", p), err) }
  if err := oprot.WriteString(string(p.SzData2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.szData2 (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:szData2: ", p), err) }
  return err
}

func (p *NETPI4S2) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NETPI4S2(%+v)", *p)
}

// Attributes:
//  - NData1
//  - NData2
//  - NData3
//  - NData4
//  - SzData1
//  - SzData2
//  - SzData3
//  - SzData4
type NETPI4S4 struct {
  NData1 int64 `thrift:"nData1,1,required" db:"nData1" json:"nData1"`
  NData2 int64 `thrift:"nData2,2,required" db:"nData2" json:"nData2"`
  NData3 int64 `thrift:"nData3,3,required" db:"nData3" json:"nData3"`
  NData4 int64 `thrift:"nData4,4,required" db:"nData4" json:"nData4"`
  SzData1 string `thrift:"szData1,5,required" db:"szData1" json:"szData1"`
  SzData2 string `thrift:"szData2,6,required" db:"szData2" json:"szData2"`
  SzData3 string `thrift:"szData3,7,required" db:"szData3" json:"szData3"`
  SzData4 string `thrift:"szData4,8,required" db:"szData4" json:"szData4"`
}

func NewNETPI4S4() *NETPI4S4 {
  return &NETPI4S4{}
}


func (p *NETPI4S4) GetNData1() int64 {
  return p.NData1
}

func (p *NETPI4S4) GetNData2() int64 {
  return p.NData2
}

func (p *NETPI4S4) GetNData3() int64 {
  return p.NData3
}

func (p *NETPI4S4) GetNData4() int64 {
  return p.NData4
}

func (p *NETPI4S4) GetSzData1() string {
  return p.SzData1
}

func (p *NETPI4S4) GetSzData2() string {
  return p.SzData2
}

func (p *NETPI4S4) GetSzData3() string {
  return p.SzData3
}

func (p *NETPI4S4) GetSzData4() string {
  return p.SzData4
}
func (p *NETPI4S4) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNData1 bool = false;
  var issetNData2 bool = false;
  var issetNData3 bool = false;
  var issetNData4 bool = false;
  var issetSzData1 bool = false;
  var issetSzData2 bool = false;
  var issetSzData3 bool = false;
  var issetSzData4 bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNData1 = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNData2 = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetNData3 = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetNData4 = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetSzData1 = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetSzData2 = true
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
      issetSzData3 = true
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
      issetSzData4 = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNData1{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData1 is not set"));
  }
  if !issetNData2{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData2 is not set"));
  }
  if !issetNData3{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData3 is not set"));
  }
  if !issetNData4{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData4 is not set"));
  }
  if !issetSzData1{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SzData1 is not set"));
  }
  if !issetSzData2{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SzData2 is not set"));
  }
  if !issetSzData3{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SzData3 is not set"));
  }
  if !issetSzData4{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SzData4 is not set"));
  }
  return nil
}

func (p *NETPI4S4)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NData1 = v
}
  return nil
}

func (p *NETPI4S4)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NData2 = v
}
  return nil
}

func (p *NETPI4S4)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NData3 = v
}
  return nil
}

func (p *NETPI4S4)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NData4 = v
}
  return nil
}

func (p *NETPI4S4)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.SzData1 = v
}
  return nil
}

func (p *NETPI4S4)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.SzData2 = v
}
  return nil
}

func (p *NETPI4S4)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.SzData3 = v
}
  return nil
}

func (p *NETPI4S4)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.SzData4 = v
}
  return nil
}

func (p *NETPI4S4) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NETPI4S4"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NETPI4S4) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData1", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nData1: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nData1: ", p), err) }
  return err
}

func (p *NETPI4S4) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData2", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nData2: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nData2: ", p), err) }
  return err
}

func (p *NETPI4S4) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData3", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nData3: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData3)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData3 (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nData3: ", p), err) }
  return err
}

func (p *NETPI4S4) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData4", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nData4: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData4)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData4 (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nData4: ", p), err) }
  return err
}

func (p *NETPI4S4) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("szData1", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:szData1: ", p), err) }
  if err := oprot.WriteString(string(p.SzData1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.szData1 (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:szData1: ", p), err) }
  return err
}

func (p *NETPI4S4) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("szData2", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:szData2: ", p), err) }
  if err := oprot.WriteString(string(p.SzData2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.szData2 (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:szData2: ", p), err) }
  return err
}

func (p *NETPI4S4) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("szData3", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:szData3: ", p), err) }
  if err := oprot.WriteString(string(p.SzData3)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.szData3 (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:szData3: ", p), err) }
  return err
}

func (p *NETPI4S4) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("szData4", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:szData4: ", p), err) }
  if err := oprot.WriteString(string(p.SzData4)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.szData4 (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:szData4: ", p), err) }
  return err
}

func (p *NETPI4S4) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NETPI4S4(%+v)", *p)
}

// Attributes:
//  - NData1
//  - NData2
//  - NData3
//  - NData4
//  - NData5
//  - NData6
//  - NData7
//  - NData8
//  - DData1
//  - DData2
//  - SzData1
//  - SzData2
type NETPI8D2S2 struct {
  NData1 int64 `thrift:"nData1,1,required" db:"nData1" json:"nData1"`
  NData2 int64 `thrift:"nData2,2,required" db:"nData2" json:"nData2"`
  NData3 int64 `thrift:"nData3,3,required" db:"nData3" json:"nData3"`
  NData4 int64 `thrift:"nData4,4,required" db:"nData4" json:"nData4"`
  NData5 int64 `thrift:"nData5,5,required" db:"nData5" json:"nData5"`
  NData6 int64 `thrift:"nData6,6,required" db:"nData6" json:"nData6"`
  NData7 int64 `thrift:"nData7,7,required" db:"nData7" json:"nData7"`
  NData8 int64 `thrift:"nData8,8,required" db:"nData8" json:"nData8"`
  DData1 float64 `thrift:"dData1,9,required" db:"dData1" json:"dData1"`
  DData2 float64 `thrift:"dData2,10,required" db:"dData2" json:"dData2"`
  SzData1 string `thrift:"szData1,11,required" db:"szData1" json:"szData1"`
  SzData2 string `thrift:"szData2,12,required" db:"szData2" json:"szData2"`
}

func NewNETPI8D2S2() *NETPI8D2S2 {
  return &NETPI8D2S2{}
}


func (p *NETPI8D2S2) GetNData1() int64 {
  return p.NData1
}

func (p *NETPI8D2S2) GetNData2() int64 {
  return p.NData2
}

func (p *NETPI8D2S2) GetNData3() int64 {
  return p.NData3
}

func (p *NETPI8D2S2) GetNData4() int64 {
  return p.NData4
}

func (p *NETPI8D2S2) GetNData5() int64 {
  return p.NData5
}

func (p *NETPI8D2S2) GetNData6() int64 {
  return p.NData6
}

func (p *NETPI8D2S2) GetNData7() int64 {
  return p.NData7
}

func (p *NETPI8D2S2) GetNData8() int64 {
  return p.NData8
}

func (p *NETPI8D2S2) GetDData1() float64 {
  return p.DData1
}

func (p *NETPI8D2S2) GetDData2() float64 {
  return p.DData2
}

func (p *NETPI8D2S2) GetSzData1() string {
  return p.SzData1
}

func (p *NETPI8D2S2) GetSzData2() string {
  return p.SzData2
}
func (p *NETPI8D2S2) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNData1 bool = false;
  var issetNData2 bool = false;
  var issetNData3 bool = false;
  var issetNData4 bool = false;
  var issetNData5 bool = false;
  var issetNData6 bool = false;
  var issetNData7 bool = false;
  var issetNData8 bool = false;
  var issetDData1 bool = false;
  var issetDData2 bool = false;
  var issetSzData1 bool = false;
  var issetSzData2 bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNData1 = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNData2 = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetNData3 = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetNData4 = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetNData5 = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetNData6 = true
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
      issetNData7 = true
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
      issetNData8 = true
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
      issetDData1 = true
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
      issetDData2 = true
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
      issetSzData1 = true
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
      issetSzData2 = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNData1{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData1 is not set"));
  }
  if !issetNData2{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData2 is not set"));
  }
  if !issetNData3{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData3 is not set"));
  }
  if !issetNData4{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData4 is not set"));
  }
  if !issetNData5{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData5 is not set"));
  }
  if !issetNData6{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData6 is not set"));
  }
  if !issetNData7{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData7 is not set"));
  }
  if !issetNData8{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NData8 is not set"));
  }
  if !issetDData1{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DData1 is not set"));
  }
  if !issetDData2{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DData2 is not set"));
  }
  if !issetSzData1{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SzData1 is not set"));
  }
  if !issetSzData2{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SzData2 is not set"));
  }
  return nil
}

func (p *NETPI8D2S2)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NData1 = v
}
  return nil
}

func (p *NETPI8D2S2)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NData2 = v
}
  return nil
}

func (p *NETPI8D2S2)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NData3 = v
}
  return nil
}

func (p *NETPI8D2S2)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NData4 = v
}
  return nil
}

func (p *NETPI8D2S2)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NData5 = v
}
  return nil
}

func (p *NETPI8D2S2)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NData6 = v
}
  return nil
}

func (p *NETPI8D2S2)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.NData7 = v
}
  return nil
}

func (p *NETPI8D2S2)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.NData8 = v
}
  return nil
}

func (p *NETPI8D2S2)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.DData1 = v
}
  return nil
}

func (p *NETPI8D2S2)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DData2 = v
}
  return nil
}

func (p *NETPI8D2S2)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.SzData1 = v
}
  return nil
}

func (p *NETPI8D2S2)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.SzData2 = v
}
  return nil
}

func (p *NETPI8D2S2) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NETPI8D2S2"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NETPI8D2S2) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData1", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nData1: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nData1: ", p), err) }
  return err
}

func (p *NETPI8D2S2) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData2", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nData2: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nData2: ", p), err) }
  return err
}

func (p *NETPI8D2S2) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData3", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nData3: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData3)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData3 (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nData3: ", p), err) }
  return err
}

func (p *NETPI8D2S2) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData4", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nData4: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData4)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData4 (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nData4: ", p), err) }
  return err
}

func (p *NETPI8D2S2) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData5", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nData5: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData5)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData5 (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nData5: ", p), err) }
  return err
}

func (p *NETPI8D2S2) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData6", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:nData6: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData6)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData6 (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:nData6: ", p), err) }
  return err
}

func (p *NETPI8D2S2) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData7", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:nData7: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData7)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData7 (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:nData7: ", p), err) }
  return err
}

func (p *NETPI8D2S2) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nData8", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:nData8: ", p), err) }
  if err := oprot.WriteI64(int64(p.NData8)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nData8 (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:nData8: ", p), err) }
  return err
}

func (p *NETPI8D2S2) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dData1", thrift.DOUBLE, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:dData1: ", p), err) }
  if err := oprot.WriteDouble(float64(p.DData1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dData1 (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:dData1: ", p), err) }
  return err
}

func (p *NETPI8D2S2) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dData2", thrift.DOUBLE, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:dData2: ", p), err) }
  if err := oprot.WriteDouble(float64(p.DData2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dData2 (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:dData2: ", p), err) }
  return err
}

func (p *NETPI8D2S2) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("szData1", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:szData1: ", p), err) }
  if err := oprot.WriteString(string(p.SzData1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.szData1 (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:szData1: ", p), err) }
  return err
}

func (p *NETPI8D2S2) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("szData2", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:szData2: ", p), err) }
  if err := oprot.WriteString(string(p.SzData2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.szData2 (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:szData2: ", p), err) }
  return err
}

func (p *NETPI8D2S2) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NETPI8D2S2(%+v)", *p)
}

// Attributes:
//  - NLength
//  - NCmdID
//  - NSubCmdID
//  - NSendSrvTypeID
//  - ND1
//  - ND2
//  - ND3
//  - ND4
//  - ND5
//  - AnI1
//  - AnI2
//  - AnI4
//  - AnI8
//  - AnI4S2
//  - AnI8D2S2
//  - AstrS1
type RDSPKG_SYNLITTLEMSG struct {
  NLength int32 `thrift:"nLength,1,required" db:"nLength" json:"nLength"`
  NCmdID int32 `thrift:"nCmdID,2,required" db:"nCmdID" json:"nCmdID"`
  NSubCmdID int32 `thrift:"nSubCmdID,3,required" db:"nSubCmdID" json:"nSubCmdID"`
  NSendSrvTypeID int32 `thrift:"nSendSrvTypeID,4,required" db:"nSendSrvTypeID" json:"nSendSrvTypeID"`
  ND1 int64 `thrift:"nD1,5,required" db:"nD1" json:"nD1"`
  ND2 int64 `thrift:"nD2,6,required" db:"nD2" json:"nD2"`
  ND3 int64 `thrift:"nD3,7,required" db:"nD3" json:"nD3"`
  ND4 int64 `thrift:"nD4,8,required" db:"nD4" json:"nD4"`
  ND5 int64 `thrift:"nD5,9,required" db:"nD5" json:"nD5"`
  AnI1 []int64 `thrift:"anI1,10,required" db:"anI1" json:"anI1"`
  AnI2 []*NETPI2 `thrift:"anI2,11,required" db:"anI2" json:"anI2"`
  AnI4 []*NETPI4 `thrift:"anI4,12,required" db:"anI4" json:"anI4"`
  AnI8 []*NETPI8 `thrift:"anI8,13,required" db:"anI8" json:"anI8"`
  AnI4S2 []*NETPI4S2 `thrift:"anI4S2,14,required" db:"anI4S2" json:"anI4S2"`
  AnI8D2S2 []*NETPI8D2S2 `thrift:"anI8D2S2,15,required" db:"anI8D2S2" json:"anI8D2S2"`
  AstrS1 []string `thrift:"astrS1,16,required" db:"astrS1" json:"astrS1"`
}

func NewRDSPKG_SYNLITTLEMSG() *RDSPKG_SYNLITTLEMSG {
  return &RDSPKG_SYNLITTLEMSG{
NCmdID: 1,
}
}


func (p *RDSPKG_SYNLITTLEMSG) GetNLength() int32 {
  return p.NLength
}

func (p *RDSPKG_SYNLITTLEMSG) GetNCmdID() int32 {
  return p.NCmdID
}

func (p *RDSPKG_SYNLITTLEMSG) GetNSubCmdID() int32 {
  return p.NSubCmdID
}

func (p *RDSPKG_SYNLITTLEMSG) GetNSendSrvTypeID() int32 {
  return p.NSendSrvTypeID
}

func (p *RDSPKG_SYNLITTLEMSG) GetND1() int64 {
  return p.ND1
}

func (p *RDSPKG_SYNLITTLEMSG) GetND2() int64 {
  return p.ND2
}

func (p *RDSPKG_SYNLITTLEMSG) GetND3() int64 {
  return p.ND3
}

func (p *RDSPKG_SYNLITTLEMSG) GetND4() int64 {
  return p.ND4
}

func (p *RDSPKG_SYNLITTLEMSG) GetND5() int64 {
  return p.ND5
}

func (p *RDSPKG_SYNLITTLEMSG) GetAnI1() []int64 {
  return p.AnI1
}

func (p *RDSPKG_SYNLITTLEMSG) GetAnI2() []*NETPI2 {
  return p.AnI2
}

func (p *RDSPKG_SYNLITTLEMSG) GetAnI4() []*NETPI4 {
  return p.AnI4
}

func (p *RDSPKG_SYNLITTLEMSG) GetAnI8() []*NETPI8 {
  return p.AnI8
}

func (p *RDSPKG_SYNLITTLEMSG) GetAnI4S2() []*NETPI4S2 {
  return p.AnI4S2
}

func (p *RDSPKG_SYNLITTLEMSG) GetAnI8D2S2() []*NETPI8D2S2 {
  return p.AnI8D2S2
}

func (p *RDSPKG_SYNLITTLEMSG) GetAstrS1() []string {
  return p.AstrS1
}
func (p *RDSPKG_SYNLITTLEMSG) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNLength bool = false;
  var issetNCmdID bool = false;
  var issetNSubCmdID bool = false;
  var issetNSendSrvTypeID bool = false;
  var issetND1 bool = false;
  var issetND2 bool = false;
  var issetND3 bool = false;
  var issetND4 bool = false;
  var issetND5 bool = false;
  var issetAnI1 bool = false;
  var issetAnI2 bool = false;
  var issetAnI4 bool = false;
  var issetAnI8 bool = false;
  var issetAnI4S2 bool = false;
  var issetAnI8D2S2 bool = false;
  var issetAstrS1 bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNLength = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNCmdID = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetNSubCmdID = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetNSendSrvTypeID = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetND1 = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetND2 = true
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
      issetND3 = true
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
      issetND4 = true
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
      issetND5 = true
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
      issetAnI1 = true
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
      issetAnI2 = true
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
      issetAnI4 = true
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
      issetAnI8 = true
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
      issetAnI4S2 = true
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
      issetAnI8D2S2 = true
    case 16:
      if err := p.ReadField16(iprot); err != nil {
        return err
      }
      issetAstrS1 = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNLength{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NLength is not set"));
  }
  if !issetNCmdID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NCmdID is not set"));
  }
  if !issetNSubCmdID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSubCmdID is not set"));
  }
  if !issetNSendSrvTypeID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSendSrvTypeID is not set"));
  }
  if !issetND1{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ND1 is not set"));
  }
  if !issetND2{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ND2 is not set"));
  }
  if !issetND3{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ND3 is not set"));
  }
  if !issetND4{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ND4 is not set"));
  }
  if !issetND5{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ND5 is not set"));
  }
  if !issetAnI1{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AnI1 is not set"));
  }
  if !issetAnI2{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AnI2 is not set"));
  }
  if !issetAnI4{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AnI4 is not set"));
  }
  if !issetAnI8{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AnI8 is not set"));
  }
  if !issetAnI4S2{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AnI4S2 is not set"));
  }
  if !issetAnI8D2S2{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AnI8D2S2 is not set"));
  }
  if !issetAstrS1{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AstrS1 is not set"));
  }
  return nil
}

func (p *RDSPKG_SYNLITTLEMSG)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NLength = v
}
  return nil
}

func (p *RDSPKG_SYNLITTLEMSG)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NCmdID = v
}
  return nil
}

func (p *RDSPKG_SYNLITTLEMSG)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NSubCmdID = v
}
  return nil
}

func (p *RDSPKG_SYNLITTLEMSG)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NSendSrvTypeID = v
}
  return nil
}

func (p *RDSPKG_SYNLITTLEMSG)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ND1 = v
}
  return nil
}

func (p *RDSPKG_SYNLITTLEMSG)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ND2 = v
}
  return nil
}

func (p *RDSPKG_SYNLITTLEMSG)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ND3 = v
}
  return nil
}

func (p *RDSPKG_SYNLITTLEMSG)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ND4 = v
}
  return nil
}

func (p *RDSPKG_SYNLITTLEMSG)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ND5 = v
}
  return nil
}

func (p *RDSPKG_SYNLITTLEMSG)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.AnI1 =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.AnI1 = append(p.AnI1, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RDSPKG_SYNLITTLEMSG)  ReadField11(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*NETPI2, 0, size)
  p.AnI2 =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &NETPI2{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.AnI2 = append(p.AnI2, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RDSPKG_SYNLITTLEMSG)  ReadField12(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*NETPI4, 0, size)
  p.AnI4 =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &NETPI4{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.AnI4 = append(p.AnI4, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RDSPKG_SYNLITTLEMSG)  ReadField13(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*NETPI8, 0, size)
  p.AnI8 =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &NETPI8{}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.AnI8 = append(p.AnI8, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RDSPKG_SYNLITTLEMSG)  ReadField14(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*NETPI4S2, 0, size)
  p.AnI4S2 =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &NETPI4S2{}
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.AnI4S2 = append(p.AnI4S2, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RDSPKG_SYNLITTLEMSG)  ReadField15(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*NETPI8D2S2, 0, size)
  p.AnI8D2S2 =  tSlice
  for i := 0; i < size; i ++ {
    _elem5 := &NETPI8D2S2{}
    if err := _elem5.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
    }
    p.AnI8D2S2 = append(p.AnI8D2S2, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RDSPKG_SYNLITTLEMSG)  ReadField16(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.AstrS1 =  tSlice
  for i := 0; i < size; i ++ {
var _elem6 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem6 = v
}
    p.AstrS1 = append(p.AstrS1, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RDSPKG_SYNLITTLEMSG) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RDSPKG_SYNLITTLEMSG"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RDSPKG_SYNLITTLEMSG) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nLength", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nLength: ", p), err) }
  if err := oprot.WriteI32(int32(p.NLength)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nLength (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nLength: ", p), err) }
  return err
}

func (p *RDSPKG_SYNLITTLEMSG) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nCmdID", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nCmdID: ", p), err) }
  if err := oprot.WriteI32(int32(p.NCmdID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nCmdID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nCmdID: ", p), err) }
  return err
}

func (p *RDSPKG_SYNLITTLEMSG) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nSubCmdID", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nSubCmdID: ", p), err) }
  if err := oprot.WriteI32(int32(p.NSubCmdID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nSubCmdID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nSubCmdID: ", p), err) }
  return err
}

func (p *RDSPKG_SYNLITTLEMSG) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nSendSrvTypeID", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nSendSrvTypeID: ", p), err) }
  if err := oprot.WriteI32(int32(p.NSendSrvTypeID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nSendSrvTypeID (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nSendSrvTypeID: ", p), err) }
  return err
}

func (p *RDSPKG_SYNLITTLEMSG) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nD1", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nD1: ", p), err) }
  if err := oprot.WriteI64(int64(p.ND1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nD1 (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nD1: ", p), err) }
  return err
}

func (p *RDSPKG_SYNLITTLEMSG) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nD2", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:nD2: ", p), err) }
  if err := oprot.WriteI64(int64(p.ND2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nD2 (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:nD2: ", p), err) }
  return err
}

func (p *RDSPKG_SYNLITTLEMSG) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nD3", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:nD3: ", p), err) }
  if err := oprot.WriteI64(int64(p.ND3)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nD3 (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:nD3: ", p), err) }
  return err
}

func (p *RDSPKG_SYNLITTLEMSG) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nD4", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:nD4: ", p), err) }
  if err := oprot.WriteI64(int64(p.ND4)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nD4 (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:nD4: ", p), err) }
  return err
}

func (p *RDSPKG_SYNLITTLEMSG) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nD5", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:nD5: ", p), err) }
  if err := oprot.WriteI64(int64(p.ND5)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nD5 (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:nD5: ", p), err) }
  return err
}

func (p *RDSPKG_SYNLITTLEMSG) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("anI1", thrift.LIST, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:anI1: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.AnI1)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AnI1 {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:anI1: ", p), err) }
  return err
}

func (p *RDSPKG_SYNLITTLEMSG) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("anI2", thrift.LIST, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:anI2: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AnI2)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AnI2 {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:anI2: ", p), err) }
  return err
}

func (p *RDSPKG_SYNLITTLEMSG) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("anI4", thrift.LIST, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:anI4: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AnI4)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AnI4 {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:anI4: ", p), err) }
  return err
}

func (p *RDSPKG_SYNLITTLEMSG) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("anI8", thrift.LIST, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:anI8: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AnI8)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AnI8 {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:anI8: ", p), err) }
  return err
}

func (p *RDSPKG_SYNLITTLEMSG) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("anI4S2", thrift.LIST, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:anI4S2: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AnI4S2)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AnI4S2 {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:anI4S2: ", p), err) }
  return err
}

func (p *RDSPKG_SYNLITTLEMSG) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("anI8D2S2", thrift.LIST, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:anI8D2S2: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AnI8D2S2)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AnI8D2S2 {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:anI8D2S2: ", p), err) }
  return err
}

func (p *RDSPKG_SYNLITTLEMSG) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("astrS1", thrift.LIST, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:astrS1: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.AstrS1)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AstrS1 {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:astrS1: ", p), err) }
  return err
}

func (p *RDSPKG_SYNLITTLEMSG) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RDSPKG_SYNLITTLEMSG(%+v)", *p)
}

// Attributes:
//  - NSrvTypeID
//  - StrIP
//  - NPort
//  - StrSrvName
//  - NRecvBufSize
//  - NSendBufSize
//  - NMaxSessionCount
//  - NRpcPort
type ONEBINARYSRV struct {
  NSrvTypeID int32 `thrift:"nSrvTypeID,1,required" db:"nSrvTypeID" json:"nSrvTypeID"`
  StrIP string `thrift:"strIP,2,required" db:"strIP" json:"strIP"`
  NPort int32 `thrift:"nPort,3,required" db:"nPort" json:"nPort"`
  StrSrvName string `thrift:"strSrvName,4,required" db:"strSrvName" json:"strSrvName"`
  NRecvBufSize int32 `thrift:"nRecvBufSize,5,required" db:"nRecvBufSize" json:"nRecvBufSize"`
  NSendBufSize int32 `thrift:"nSendBufSize,6,required" db:"nSendBufSize" json:"nSendBufSize"`
  NMaxSessionCount int32 `thrift:"nMaxSessionCount,7,required" db:"nMaxSessionCount" json:"nMaxSessionCount"`
  NRpcPort int32 `thrift:"nRpcPort,8,required" db:"nRpcPort" json:"nRpcPort"`
}

func NewONEBINARYSRV() *ONEBINARYSRV {
  return &ONEBINARYSRV{}
}


func (p *ONEBINARYSRV) GetNSrvTypeID() int32 {
  return p.NSrvTypeID
}

func (p *ONEBINARYSRV) GetStrIP() string {
  return p.StrIP
}

func (p *ONEBINARYSRV) GetNPort() int32 {
  return p.NPort
}

func (p *ONEBINARYSRV) GetStrSrvName() string {
  return p.StrSrvName
}

func (p *ONEBINARYSRV) GetNRecvBufSize() int32 {
  return p.NRecvBufSize
}

func (p *ONEBINARYSRV) GetNSendBufSize() int32 {
  return p.NSendBufSize
}

func (p *ONEBINARYSRV) GetNMaxSessionCount() int32 {
  return p.NMaxSessionCount
}

func (p *ONEBINARYSRV) GetNRpcPort() int32 {
  return p.NRpcPort
}
func (p *ONEBINARYSRV) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNSrvTypeID bool = false;
  var issetStrIP bool = false;
  var issetNPort bool = false;
  var issetStrSrvName bool = false;
  var issetNRecvBufSize bool = false;
  var issetNSendBufSize bool = false;
  var issetNMaxSessionCount bool = false;
  var issetNRpcPort bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNSrvTypeID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetStrIP = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetNPort = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetStrSrvName = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetNRecvBufSize = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetNSendBufSize = true
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
      issetNMaxSessionCount = true
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
      issetNRpcPort = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNSrvTypeID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSrvTypeID is not set"));
  }
  if !issetStrIP{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StrIP is not set"));
  }
  if !issetNPort{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NPort is not set"));
  }
  if !issetStrSrvName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StrSrvName is not set"));
  }
  if !issetNRecvBufSize{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NRecvBufSize is not set"));
  }
  if !issetNSendBufSize{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSendBufSize is not set"));
  }
  if !issetNMaxSessionCount{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NMaxSessionCount is not set"));
  }
  if !issetNRpcPort{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NRpcPort is not set"));
  }
  return nil
}

func (p *ONEBINARYSRV)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NSrvTypeID = v
}
  return nil
}

func (p *ONEBINARYSRV)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StrIP = v
}
  return nil
}

func (p *ONEBINARYSRV)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NPort = v
}
  return nil
}

func (p *ONEBINARYSRV)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.StrSrvName = v
}
  return nil
}

func (p *ONEBINARYSRV)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NRecvBufSize = v
}
  return nil
}

func (p *ONEBINARYSRV)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NSendBufSize = v
}
  return nil
}

func (p *ONEBINARYSRV)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.NMaxSessionCount = v
}
  return nil
}

func (p *ONEBINARYSRV)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.NRpcPort = v
}
  return nil
}

func (p *ONEBINARYSRV) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ONEBINARYSRV"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ONEBINARYSRV) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nSrvTypeID", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nSrvTypeID: ", p), err) }
  if err := oprot.WriteI32(int32(p.NSrvTypeID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nSrvTypeID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nSrvTypeID: ", p), err) }
  return err
}

func (p *ONEBINARYSRV) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("strIP", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:strIP: ", p), err) }
  if err := oprot.WriteString(string(p.StrIP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.strIP (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:strIP: ", p), err) }
  return err
}

func (p *ONEBINARYSRV) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nPort", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nPort: ", p), err) }
  if err := oprot.WriteI32(int32(p.NPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nPort (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nPort: ", p), err) }
  return err
}

func (p *ONEBINARYSRV) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("strSrvName", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:strSrvName: ", p), err) }
  if err := oprot.WriteString(string(p.StrSrvName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.strSrvName (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:strSrvName: ", p), err) }
  return err
}

func (p *ONEBINARYSRV) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nRecvBufSize", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nRecvBufSize: ", p), err) }
  if err := oprot.WriteI32(int32(p.NRecvBufSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nRecvBufSize (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nRecvBufSize: ", p), err) }
  return err
}

func (p *ONEBINARYSRV) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nSendBufSize", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:nSendBufSize: ", p), err) }
  if err := oprot.WriteI32(int32(p.NSendBufSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nSendBufSize (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:nSendBufSize: ", p), err) }
  return err
}

func (p *ONEBINARYSRV) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nMaxSessionCount", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:nMaxSessionCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.NMaxSessionCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nMaxSessionCount (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:nMaxSessionCount: ", p), err) }
  return err
}

func (p *ONEBINARYSRV) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nRpcPort", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:nRpcPort: ", p), err) }
  if err := oprot.WriteI32(int32(p.NRpcPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nRpcPort (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:nRpcPort: ", p), err) }
  return err
}

func (p *ONEBINARYSRV) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ONEBINARYSRV(%+v)", *p)
}

// Attributes:
//  - NLength
//  - NCmdID
//  - NSubCmdID
//  - NSendSrvTypeID
//  - Data
type RDSPKG_ONEBINARYSRV struct {
  NLength int32 `thrift:"nLength,1,required" db:"nLength" json:"nLength"`
  NCmdID int32 `thrift:"nCmdID,2,required" db:"nCmdID" json:"nCmdID"`
  NSubCmdID int32 `thrift:"nSubCmdID,3,required" db:"nSubCmdID" json:"nSubCmdID"`
  NSendSrvTypeID int32 `thrift:"nSendSrvTypeID,4,required" db:"nSendSrvTypeID" json:"nSendSrvTypeID"`
  Data *ONEBINARYSRV `thrift:"data,5,required" db:"data" json:"data"`
}

func NewRDSPKG_ONEBINARYSRV() *RDSPKG_ONEBINARYSRV {
  return &RDSPKG_ONEBINARYSRV{
NCmdID: 2320,
}
}


func (p *RDSPKG_ONEBINARYSRV) GetNLength() int32 {
  return p.NLength
}

func (p *RDSPKG_ONEBINARYSRV) GetNCmdID() int32 {
  return p.NCmdID
}

func (p *RDSPKG_ONEBINARYSRV) GetNSubCmdID() int32 {
  return p.NSubCmdID
}

func (p *RDSPKG_ONEBINARYSRV) GetNSendSrvTypeID() int32 {
  return p.NSendSrvTypeID
}
var RDSPKG_ONEBINARYSRV_Data_DEFAULT *ONEBINARYSRV
func (p *RDSPKG_ONEBINARYSRV) GetData() *ONEBINARYSRV {
  if !p.IsSetData() {
    return RDSPKG_ONEBINARYSRV_Data_DEFAULT
  }
return p.Data
}
func (p *RDSPKG_ONEBINARYSRV) IsSetData() bool {
  return p.Data != nil
}

func (p *RDSPKG_ONEBINARYSRV) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNLength bool = false;
  var issetNCmdID bool = false;
  var issetNSubCmdID bool = false;
  var issetNSendSrvTypeID bool = false;
  var issetData bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNLength = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNCmdID = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetNSubCmdID = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetNSendSrvTypeID = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetData = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNLength{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NLength is not set"));
  }
  if !issetNCmdID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NCmdID is not set"));
  }
  if !issetNSubCmdID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSubCmdID is not set"));
  }
  if !issetNSendSrvTypeID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSendSrvTypeID is not set"));
  }
  if !issetData{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Data is not set"));
  }
  return nil
}

func (p *RDSPKG_ONEBINARYSRV)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NLength = v
}
  return nil
}

func (p *RDSPKG_ONEBINARYSRV)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NCmdID = v
}
  return nil
}

func (p *RDSPKG_ONEBINARYSRV)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NSubCmdID = v
}
  return nil
}

func (p *RDSPKG_ONEBINARYSRV)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NSendSrvTypeID = v
}
  return nil
}

func (p *RDSPKG_ONEBINARYSRV)  ReadField5(iprot thrift.TProtocol) error {
  p.Data = &ONEBINARYSRV{}
  if err := p.Data.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *RDSPKG_ONEBINARYSRV) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RDSPKG_ONEBINARYSRV"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RDSPKG_ONEBINARYSRV) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nLength", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nLength: ", p), err) }
  if err := oprot.WriteI32(int32(p.NLength)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nLength (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nLength: ", p), err) }
  return err
}

func (p *RDSPKG_ONEBINARYSRV) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nCmdID", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nCmdID: ", p), err) }
  if err := oprot.WriteI32(int32(p.NCmdID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nCmdID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nCmdID: ", p), err) }
  return err
}

func (p *RDSPKG_ONEBINARYSRV) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nSubCmdID", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nSubCmdID: ", p), err) }
  if err := oprot.WriteI32(int32(p.NSubCmdID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nSubCmdID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nSubCmdID: ", p), err) }
  return err
}

func (p *RDSPKG_ONEBINARYSRV) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nSendSrvTypeID", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nSendSrvTypeID: ", p), err) }
  if err := oprot.WriteI32(int32(p.NSendSrvTypeID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nSendSrvTypeID (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nSendSrvTypeID: ", p), err) }
  return err
}

func (p *RDSPKG_ONEBINARYSRV) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:data: ", p), err) }
  if err := p.Data.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:data: ", p), err) }
  return err
}

func (p *RDSPKG_ONEBINARYSRV) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RDSPKG_ONEBINARYSRV(%+v)", *p)
}

// Attributes:
//  - StrSrvName
//  - NSrvID
//  - NVersion
//  - StrAddr
//  - NPort
type SRVNODE struct {
  StrSrvName string `thrift:"strSrvName,1,required" db:"strSrvName" json:"strSrvName"`
  NSrvID int32 `thrift:"nSrvID,2,required" db:"nSrvID" json:"nSrvID"`
  NVersion int32 `thrift:"nVersion,3,required" db:"nVersion" json:"nVersion"`
  StrAddr string `thrift:"strAddr,4,required" db:"strAddr" json:"strAddr"`
  NPort int16 `thrift:"nPort,5,required" db:"nPort" json:"nPort"`
}

func NewSRVNODE() *SRVNODE {
  return &SRVNODE{}
}


func (p *SRVNODE) GetStrSrvName() string {
  return p.StrSrvName
}

func (p *SRVNODE) GetNSrvID() int32 {
  return p.NSrvID
}

func (p *SRVNODE) GetNVersion() int32 {
  return p.NVersion
}

func (p *SRVNODE) GetStrAddr() string {
  return p.StrAddr
}

func (p *SRVNODE) GetNPort() int16 {
  return p.NPort
}
func (p *SRVNODE) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStrSrvName bool = false;
  var issetNSrvID bool = false;
  var issetNVersion bool = false;
  var issetStrAddr bool = false;
  var issetNPort bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetStrSrvName = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNSrvID = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetNVersion = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetStrAddr = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetNPort = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStrSrvName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StrSrvName is not set"));
  }
  if !issetNSrvID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSrvID is not set"));
  }
  if !issetNVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NVersion is not set"));
  }
  if !issetStrAddr{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StrAddr is not set"));
  }
  if !issetNPort{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NPort is not set"));
  }
  return nil
}

func (p *SRVNODE)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StrSrvName = v
}
  return nil
}

func (p *SRVNODE)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NSrvID = v
}
  return nil
}

func (p *SRVNODE)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NVersion = v
}
  return nil
}

func (p *SRVNODE)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.StrAddr = v
}
  return nil
}

func (p *SRVNODE)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NPort = v
}
  return nil
}

func (p *SRVNODE) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SRVNODE"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SRVNODE) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("strSrvName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:strSrvName: ", p), err) }
  if err := oprot.WriteString(string(p.StrSrvName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.strSrvName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:strSrvName: ", p), err) }
  return err
}

func (p *SRVNODE) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nSrvID", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nSrvID: ", p), err) }
  if err := oprot.WriteI32(int32(p.NSrvID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nSrvID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nSrvID: ", p), err) }
  return err
}

func (p *SRVNODE) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nVersion", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nVersion: ", p), err) }
  if err := oprot.WriteI32(int32(p.NVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nVersion (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nVersion: ", p), err) }
  return err
}

func (p *SRVNODE) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("strAddr", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:strAddr: ", p), err) }
  if err := oprot.WriteString(string(p.StrAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.strAddr (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:strAddr: ", p), err) }
  return err
}

func (p *SRVNODE) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nPort", thrift.I16, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nPort: ", p), err) }
  if err := oprot.WriteI16(int16(p.NPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nPort (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nPort: ", p), err) }
  return err
}

func (p *SRVNODE) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SRVNODE(%+v)", *p)
}

// Attributes:
//  - NLength
//  - NCmdID
//  - NSubCmdID
//  - NSendSrvTypeID
//  - Data
type RDSPKG_ONERPCSRV struct {
  NLength int32 `thrift:"nLength,1,required" db:"nLength" json:"nLength"`
  NCmdID int32 `thrift:"nCmdID,2,required" db:"nCmdID" json:"nCmdID"`
  NSubCmdID int32 `thrift:"nSubCmdID,3,required" db:"nSubCmdID" json:"nSubCmdID"`
  NSendSrvTypeID int32 `thrift:"nSendSrvTypeID,4,required" db:"nSendSrvTypeID" json:"nSendSrvTypeID"`
  Data *SRVNODE `thrift:"data,5,required" db:"data" json:"data"`
}

func NewRDSPKG_ONERPCSRV() *RDSPKG_ONERPCSRV {
  return &RDSPKG_ONERPCSRV{
NCmdID: 2321,
}
}


func (p *RDSPKG_ONERPCSRV) GetNLength() int32 {
  return p.NLength
}

func (p *RDSPKG_ONERPCSRV) GetNCmdID() int32 {
  return p.NCmdID
}

func (p *RDSPKG_ONERPCSRV) GetNSubCmdID() int32 {
  return p.NSubCmdID
}

func (p *RDSPKG_ONERPCSRV) GetNSendSrvTypeID() int32 {
  return p.NSendSrvTypeID
}
var RDSPKG_ONERPCSRV_Data_DEFAULT *SRVNODE
func (p *RDSPKG_ONERPCSRV) GetData() *SRVNODE {
  if !p.IsSetData() {
    return RDSPKG_ONERPCSRV_Data_DEFAULT
  }
return p.Data
}
func (p *RDSPKG_ONERPCSRV) IsSetData() bool {
  return p.Data != nil
}

func (p *RDSPKG_ONERPCSRV) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNLength bool = false;
  var issetNCmdID bool = false;
  var issetNSubCmdID bool = false;
  var issetNSendSrvTypeID bool = false;
  var issetData bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNLength = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNCmdID = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetNSubCmdID = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetNSendSrvTypeID = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetData = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNLength{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NLength is not set"));
  }
  if !issetNCmdID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NCmdID is not set"));
  }
  if !issetNSubCmdID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSubCmdID is not set"));
  }
  if !issetNSendSrvTypeID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NSendSrvTypeID is not set"));
  }
  if !issetData{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Data is not set"));
  }
  return nil
}

func (p *RDSPKG_ONERPCSRV)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NLength = v
}
  return nil
}

func (p *RDSPKG_ONERPCSRV)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NCmdID = v
}
  return nil
}

func (p *RDSPKG_ONERPCSRV)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NSubCmdID = v
}
  return nil
}

func (p *RDSPKG_ONERPCSRV)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NSendSrvTypeID = v
}
  return nil
}

func (p *RDSPKG_ONERPCSRV)  ReadField5(iprot thrift.TProtocol) error {
  p.Data = &SRVNODE{}
  if err := p.Data.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *RDSPKG_ONERPCSRV) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RDSPKG_ONERPCSRV"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RDSPKG_ONERPCSRV) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nLength", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nLength: ", p), err) }
  if err := oprot.WriteI32(int32(p.NLength)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nLength (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nLength: ", p), err) }
  return err
}

func (p *RDSPKG_ONERPCSRV) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nCmdID", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nCmdID: ", p), err) }
  if err := oprot.WriteI32(int32(p.NCmdID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nCmdID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nCmdID: ", p), err) }
  return err
}

func (p *RDSPKG_ONERPCSRV) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nSubCmdID", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nSubCmdID: ", p), err) }
  if err := oprot.WriteI32(int32(p.NSubCmdID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nSubCmdID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nSubCmdID: ", p), err) }
  return err
}

func (p *RDSPKG_ONERPCSRV) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nSendSrvTypeID", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nSendSrvTypeID: ", p), err) }
  if err := oprot.WriteI32(int32(p.NSendSrvTypeID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nSendSrvTypeID (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nSendSrvTypeID: ", p), err) }
  return err
}

func (p *RDSPKG_ONERPCSRV) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:data: ", p), err) }
  if err := p.Data.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:data: ", p), err) }
  return err
}

func (p *RDSPKG_ONERPCSRV) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RDSPKG_ONERPCSRV(%+v)", *p)
}

